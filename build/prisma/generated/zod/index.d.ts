import { z } from 'zod';
export declare const TransactionIsolationLevelSchema: z.ZodEnum<["ReadUncommitted", "ReadCommitted", "RepeatableRead", "Serializable"]>;
export declare const MerkleMapScalarFieldEnumSchema: z.ZodEnum<["id", "name", "root", "size", "height", "createdUtc", "updatedUtc"]>;
export declare const MerkleMapLeafScalarFieldEnumSchema: z.ZodEnum<["uid", "mapId", "index", "key", "hash", "data", "createdUtc", "updatedUtc"]>;
export declare const SessionScalarFieldEnumSchema: z.ZodEnum<["uid", "otp", "email", "createdUtc", "updatedUtc"]>;
export declare const PersonScalarFieldEnumSchema: z.ZodEnum<["uid", "accountId", "state", "fullName", "description", "image", "email", "phone", "telegram", "preferences", "createdUTC", "updatedUTC", "approvedUTC"]>;
export declare const CommunityScalarFieldEnumSchema: z.ZodEnum<["uid", "accountId", "adminUid", "state", "name", "description", "image", "createdUTC", "updatedUTC", "approvedUTC", "xadmins"]>;
export declare const MembersScalarFieldEnumSchema: z.ZodEnum<["uid", "communityUid", "personUid", "role", "createdUTC", "approvedUTC"]>;
export declare const ClaimScalarFieldEnumSchema: z.ZodEnum<["uid", "communityUid", "applicantUid", "planUid", "state", "accountId", "alias", "createdUTC", "updatedUTC", "votedUTC", "issuedUTC", "dueUTC", "requiredVotes", "requiredPositives", "positiveVotes", "negativeVotes", "ignoredVotes", "evidenceData"]>;
export declare const PlanScalarFieldEnumSchema: z.ZodEnum<["uid", "communityUid", "state", "name", "alias", "description", "image", "template", "evidence", "strategy", "createdUTC", "updatedUTC", "approvedUTC", "fee", "rewardsShare", "communityShare", "protocolShare", "total", "available", "expiration", "revocable", "startsUTC", "endsUTC"]>;
export declare const CredentialScalarFieldEnumSchema: z.ZodEnum<["uid", "accountId", "applicantId", "claimId", "applicantUid", "communityUid", "claimUid", "type", "description", "community", "image", "alias", "stars", "metadata", "revocable", "issuedUTC", "expiresUTC"]>;
export declare const TaskScalarFieldEnumSchema: z.ZodEnum<["uid", "claimUid", "assigneeUid", "state", "assignedUTC", "completedUTC", "dueUTC", "rewarded", "reason", "result"]>;
export declare const ProposedScalarFieldEnumSchema: z.ZodEnum<["uid", "role", "personUid", "communityUid", "createdUTC"]>;
export declare const BatchScalarFieldEnumSchema: z.ZodEnum<["uid", "sequence", "type", "metadata", "signerAccountId", "signedData", "signatureField", "signatureScalar", "commitment", "size", "state", "submitedUTC", "doneUTC", "BatchesAccountId", "BatchReceivedTxnUid", "BatchesCommitedTxnUid"]>;
export declare const StateScalarFieldEnumSchema: z.ZodEnum<["id", "label"]>;
export declare const TransactionQueueScalarFieldEnumSchema: z.ZodEnum<["uid", "sequence", "queue", "type", "data", "state", "receivedUTC", "submitedUTC", "doneUTC", "retries", "hash", "done", "error"]>;
export declare const TransactionEventScalarFieldEnumSchema: z.ZodEnum<["sequence", "type", "subject", "payload", "state", "emittedUTC"]>;
export declare const SortOrderSchema: z.ZodEnum<["asc", "desc"]>;
export declare const QueryModeSchema: z.ZodEnum<["default", "insensitive"]>;
export declare const NullsOrderSchema: z.ZodEnum<["first", "last"]>;
export declare const MerkleMapSchema: z.ZodObject<{
    id: z.ZodNumber;
    name: z.ZodString;
    root: z.ZodBigInt;
    size: z.ZodNumber;
    height: z.ZodNumber;
    createdUtc: z.ZodDate;
    updatedUtc: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    createdUtc: Date;
    updatedUtc: Date;
    id: number;
    name: string;
    root: bigint;
    size: number;
    height: number;
}, {
    createdUtc: Date;
    updatedUtc: Date;
    id: number;
    name: string;
    root: bigint;
    size: number;
    height: number;
}>;
export type MerkleMap = z.infer<typeof MerkleMapSchema>;
export declare const MerkleMapPartialSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodNumber>;
    name: z.ZodOptional<z.ZodString>;
    root: z.ZodOptional<z.ZodBigInt>;
    size: z.ZodOptional<z.ZodNumber>;
    height: z.ZodOptional<z.ZodNumber>;
    createdUtc: z.ZodOptional<z.ZodDate>;
    updatedUtc: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    id?: number | undefined;
    name?: string | undefined;
    root?: bigint | undefined;
    size?: number | undefined;
    height?: number | undefined;
    createdUtc?: Date | undefined;
    updatedUtc?: Date | undefined;
}, {
    id?: number | undefined;
    name?: string | undefined;
    root?: bigint | undefined;
    size?: number | undefined;
    height?: number | undefined;
    createdUtc?: Date | undefined;
    updatedUtc?: Date | undefined;
}>;
export type MerkleMapPartial = z.infer<typeof MerkleMapPartialSchema>;
export declare const MerkleMapLeafSchema: z.ZodObject<{
    uid: z.ZodString;
    mapId: z.ZodNumber;
    index: z.ZodBigInt;
    key: z.ZodString;
    hash: z.ZodString;
    data: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdUtc: z.ZodDate;
    updatedUtc: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    uid: string;
    mapId: number;
    index: bigint;
    key: string;
    hash: string;
    createdUtc: Date;
    updatedUtc: Date;
    data?: string | null | undefined;
}, {
    uid: string;
    mapId: number;
    index: bigint;
    key: string;
    hash: string;
    createdUtc: Date;
    updatedUtc: Date;
    data?: string | null | undefined;
}>;
export type MerkleMapLeaf = z.infer<typeof MerkleMapLeafSchema>;
export declare const MerkleMapLeafPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    mapId: z.ZodOptional<z.ZodNumber>;
    index: z.ZodOptional<z.ZodBigInt>;
    key: z.ZodOptional<z.ZodString>;
    hash: z.ZodOptional<z.ZodString>;
    data: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    createdUtc: z.ZodOptional<z.ZodDate>;
    updatedUtc: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    mapId?: number | undefined;
    index?: bigint | undefined;
    key?: string | undefined;
    hash?: string | undefined;
    data?: string | null | undefined;
    createdUtc?: Date | undefined;
    updatedUtc?: Date | undefined;
}, {
    uid?: string | undefined;
    mapId?: number | undefined;
    index?: bigint | undefined;
    key?: string | undefined;
    hash?: string | undefined;
    data?: string | null | undefined;
    createdUtc?: Date | undefined;
    updatedUtc?: Date | undefined;
}>;
export type MerkleMapLeafPartial = z.infer<typeof MerkleMapLeafPartialSchema>;
export declare const SessionSchema: z.ZodObject<{
    uid: z.ZodString;
    otp: z.ZodString;
    email: z.ZodString;
    createdUtc: z.ZodDate;
    updatedUtc: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    uid: string;
    createdUtc: Date;
    updatedUtc: Date;
    email: string;
    otp: string;
}, {
    uid: string;
    createdUtc: Date;
    updatedUtc: Date;
    email: string;
    otp: string;
}>;
export type Session = z.infer<typeof SessionSchema>;
export declare const SessionPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    otp: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    createdUtc: z.ZodOptional<z.ZodDate>;
    updatedUtc: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    otp?: string | undefined;
    email?: string | undefined;
    createdUtc?: Date | undefined;
    updatedUtc?: Date | undefined;
}, {
    uid?: string | undefined;
    otp?: string | undefined;
    email?: string | undefined;
    createdUtc?: Date | undefined;
    updatedUtc?: Date | undefined;
}>;
export type SessionPartial = z.infer<typeof SessionPartialSchema>;
export declare const PersonSchema: z.ZodObject<{
    uid: z.ZodString;
    accountId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    state: z.ZodString;
    fullName: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodString;
    phone: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    telegram: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    preferences: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdUTC: z.ZodDate;
    updatedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    approvedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    createdUTC: Date;
    fullName: string;
    state: string;
    email: string;
    accountId?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    phone?: string | null | undefined;
    telegram?: string | null | undefined;
    preferences?: string | null | undefined;
    updatedUTC?: Date | null | undefined;
    approvedUTC?: Date | null | undefined;
}, {
    uid: string;
    createdUTC: Date;
    fullName: string;
    state: string;
    email: string;
    accountId?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    phone?: string | null | undefined;
    telegram?: string | null | undefined;
    preferences?: string | null | undefined;
    updatedUTC?: Date | null | undefined;
    approvedUTC?: Date | null | undefined;
}>;
export type Person = z.infer<typeof PersonSchema>;
export declare const PersonPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    accountId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    state: z.ZodOptional<z.ZodString>;
    fullName: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    image: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    email: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    telegram: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    preferences: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    createdUTC: z.ZodOptional<z.ZodDate>;
    updatedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    approvedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    accountId?: string | null | undefined;
    state?: string | undefined;
    fullName?: string | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    email?: string | undefined;
    phone?: string | null | undefined;
    telegram?: string | null | undefined;
    preferences?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | null | undefined;
    approvedUTC?: Date | null | undefined;
}, {
    uid?: string | undefined;
    accountId?: string | null | undefined;
    state?: string | undefined;
    fullName?: string | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    email?: string | undefined;
    phone?: string | null | undefined;
    telegram?: string | null | undefined;
    preferences?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | null | undefined;
    approvedUTC?: Date | null | undefined;
}>;
export type PersonPartial = z.infer<typeof PersonPartialSchema>;
export declare const CommunitySchema: z.ZodObject<{
    uid: z.ZodString;
    accountId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    adminUid: z.ZodString;
    state: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdUTC: z.ZodDate;
    updatedUTC: z.ZodDate;
    approvedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    xadmins: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    name: string;
    createdUTC: Date;
    state: string;
    updatedUTC: Date;
    adminUid: string;
    accountId?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    approvedUTC?: Date | null | undefined;
    xadmins?: string | null | undefined;
}, {
    uid: string;
    name: string;
    createdUTC: Date;
    state: string;
    updatedUTC: Date;
    adminUid: string;
    accountId?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    approvedUTC?: Date | null | undefined;
    xadmins?: string | null | undefined;
}>;
export type Community = z.infer<typeof CommunitySchema>;
export declare const CommunityPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    accountId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    adminUid: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    image: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    createdUTC: z.ZodOptional<z.ZodDate>;
    updatedUTC: z.ZodOptional<z.ZodDate>;
    approvedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    xadmins: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    accountId?: string | null | undefined;
    adminUid?: string | undefined;
    state?: string | undefined;
    name?: string | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | undefined;
    approvedUTC?: Date | null | undefined;
    xadmins?: string | null | undefined;
}, {
    uid?: string | undefined;
    accountId?: string | null | undefined;
    adminUid?: string | undefined;
    state?: string | undefined;
    name?: string | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | undefined;
    approvedUTC?: Date | null | undefined;
    xadmins?: string | null | undefined;
}>;
export type CommunityPartial = z.infer<typeof CommunityPartialSchema>;
export declare const MembersSchema: z.ZodObject<{
    uid: z.ZodString;
    communityUid: z.ZodString;
    personUid: z.ZodString;
    /**
     * // 1:PLAIN, 2:VALIDATOR, 3:AUDITOR
     */
    role: z.ZodString;
    createdUTC: z.ZodDate;
    approvedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    role: string;
    communityUid: string;
    personUid: string;
    createdUTC: Date;
    approvedUTC?: Date | null | undefined;
}, {
    uid: string;
    role: string;
    communityUid: string;
    personUid: string;
    createdUTC: Date;
    approvedUTC?: Date | null | undefined;
}>;
export type Members = z.infer<typeof MembersSchema>;
export declare const MembersPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    communityUid: z.ZodOptional<z.ZodString>;
    personUid: z.ZodOptional<z.ZodString>;
    role: z.ZodOptional<z.ZodString>;
    createdUTC: z.ZodOptional<z.ZodDate>;
    approvedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    communityUid?: string | undefined;
    personUid?: string | undefined;
    role?: string | undefined;
    createdUTC?: Date | undefined;
    approvedUTC?: Date | null | undefined;
}, {
    uid?: string | undefined;
    communityUid?: string | undefined;
    personUid?: string | undefined;
    role?: string | undefined;
    createdUTC?: Date | undefined;
    approvedUTC?: Date | null | undefined;
}>;
export type MembersPartial = z.infer<typeof MembersPartialSchema>;
export declare const ClaimSchema: z.ZodObject<{
    uid: z.ZodString;
    communityUid: z.ZodString;
    applicantUid: z.ZodString;
    planUid: z.ZodString;
    state: z.ZodNumber;
    accountId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    alias: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdUTC: z.ZodDate;
    updatedUTC: z.ZodDate;
    votedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    issuedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    dueUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    requiredVotes: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    requiredPositives: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    positiveVotes: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    negativeVotes: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    ignoredVotes: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    evidenceData: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    communityUid: string;
    createdUTC: Date;
    state: number;
    updatedUTC: Date;
    applicantUid: string;
    planUid: string;
    accountId?: string | null | undefined;
    alias?: string | null | undefined;
    votedUTC?: Date | null | undefined;
    issuedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    requiredVotes?: number | null | undefined;
    requiredPositives?: number | null | undefined;
    positiveVotes?: number | null | undefined;
    negativeVotes?: number | null | undefined;
    ignoredVotes?: number | null | undefined;
    evidenceData?: string | null | undefined;
}, {
    uid: string;
    communityUid: string;
    createdUTC: Date;
    state: number;
    updatedUTC: Date;
    applicantUid: string;
    planUid: string;
    accountId?: string | null | undefined;
    alias?: string | null | undefined;
    votedUTC?: Date | null | undefined;
    issuedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    requiredVotes?: number | null | undefined;
    requiredPositives?: number | null | undefined;
    positiveVotes?: number | null | undefined;
    negativeVotes?: number | null | undefined;
    ignoredVotes?: number | null | undefined;
    evidenceData?: string | null | undefined;
}>;
export type Claim = z.infer<typeof ClaimSchema>;
export declare const ClaimPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    communityUid: z.ZodOptional<z.ZodString>;
    applicantUid: z.ZodOptional<z.ZodString>;
    planUid: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodNumber>;
    accountId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    alias: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    createdUTC: z.ZodOptional<z.ZodDate>;
    updatedUTC: z.ZodOptional<z.ZodDate>;
    votedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    issuedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    dueUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    requiredVotes: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    requiredPositives: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    positiveVotes: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    negativeVotes: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    ignoredVotes: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    evidenceData: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    communityUid?: string | undefined;
    applicantUid?: string | undefined;
    planUid?: string | undefined;
    state?: number | undefined;
    accountId?: string | null | undefined;
    alias?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | undefined;
    votedUTC?: Date | null | undefined;
    issuedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    requiredVotes?: number | null | undefined;
    requiredPositives?: number | null | undefined;
    positiveVotes?: number | null | undefined;
    negativeVotes?: number | null | undefined;
    ignoredVotes?: number | null | undefined;
    evidenceData?: string | null | undefined;
}, {
    uid?: string | undefined;
    communityUid?: string | undefined;
    applicantUid?: string | undefined;
    planUid?: string | undefined;
    state?: number | undefined;
    accountId?: string | null | undefined;
    alias?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | undefined;
    votedUTC?: Date | null | undefined;
    issuedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    requiredVotes?: number | null | undefined;
    requiredPositives?: number | null | undefined;
    positiveVotes?: number | null | undefined;
    negativeVotes?: number | null | undefined;
    ignoredVotes?: number | null | undefined;
    evidenceData?: string | null | undefined;
}>;
export type ClaimPartial = z.infer<typeof ClaimPartialSchema>;
export declare const PlanSchema: z.ZodObject<{
    uid: z.ZodString;
    communityUid: z.ZodString;
    state: z.ZodNumber;
    name: z.ZodString;
    alias: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    template: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    evidence: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    strategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdUTC: z.ZodDate;
    updatedUTC: z.ZodDate;
    approvedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    fee: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rewardsShare: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    communityShare: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    protocolShare: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    total: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    available: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    expiration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    revocable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    startsUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    endsUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    name: string;
    communityUid: string;
    createdUTC: Date;
    state: number;
    updatedUTC: Date;
    alias?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    template?: string | null | undefined;
    evidence?: string | null | undefined;
    strategy?: string | null | undefined;
    approvedUTC?: Date | null | undefined;
    fee?: number | null | undefined;
    rewardsShare?: number | null | undefined;
    communityShare?: number | null | undefined;
    protocolShare?: number | null | undefined;
    total?: number | null | undefined;
    available?: number | null | undefined;
    expiration?: number | null | undefined;
    revocable?: boolean | null | undefined;
    startsUTC?: Date | null | undefined;
    endsUTC?: Date | null | undefined;
}, {
    uid: string;
    name: string;
    communityUid: string;
    createdUTC: Date;
    state: number;
    updatedUTC: Date;
    alias?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    template?: string | null | undefined;
    evidence?: string | null | undefined;
    strategy?: string | null | undefined;
    approvedUTC?: Date | null | undefined;
    fee?: number | null | undefined;
    rewardsShare?: number | null | undefined;
    communityShare?: number | null | undefined;
    protocolShare?: number | null | undefined;
    total?: number | null | undefined;
    available?: number | null | undefined;
    expiration?: number | null | undefined;
    revocable?: boolean | null | undefined;
    startsUTC?: Date | null | undefined;
    endsUTC?: Date | null | undefined;
}>;
export type Plan = z.infer<typeof PlanSchema>;
export declare const PlanPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    communityUid: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodNumber>;
    name: z.ZodOptional<z.ZodString>;
    alias: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    description: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    image: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    template: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    evidence: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    strategy: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    createdUTC: z.ZodOptional<z.ZodDate>;
    updatedUTC: z.ZodOptional<z.ZodDate>;
    approvedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    fee: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    rewardsShare: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    communityShare: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    protocolShare: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    total: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    available: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    expiration: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    revocable: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
    startsUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    endsUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    communityUid?: string | undefined;
    state?: number | undefined;
    name?: string | undefined;
    alias?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    template?: string | null | undefined;
    evidence?: string | null | undefined;
    strategy?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | undefined;
    approvedUTC?: Date | null | undefined;
    fee?: number | null | undefined;
    rewardsShare?: number | null | undefined;
    communityShare?: number | null | undefined;
    protocolShare?: number | null | undefined;
    total?: number | null | undefined;
    available?: number | null | undefined;
    expiration?: number | null | undefined;
    revocable?: boolean | null | undefined;
    startsUTC?: Date | null | undefined;
    endsUTC?: Date | null | undefined;
}, {
    uid?: string | undefined;
    communityUid?: string | undefined;
    state?: number | undefined;
    name?: string | undefined;
    alias?: string | null | undefined;
    description?: string | null | undefined;
    image?: string | null | undefined;
    template?: string | null | undefined;
    evidence?: string | null | undefined;
    strategy?: string | null | undefined;
    createdUTC?: Date | undefined;
    updatedUTC?: Date | undefined;
    approvedUTC?: Date | null | undefined;
    fee?: number | null | undefined;
    rewardsShare?: number | null | undefined;
    communityShare?: number | null | undefined;
    protocolShare?: number | null | undefined;
    total?: number | null | undefined;
    available?: number | null | undefined;
    expiration?: number | null | undefined;
    revocable?: boolean | null | undefined;
    startsUTC?: Date | null | undefined;
    endsUTC?: Date | null | undefined;
}>;
export type PlanPartial = z.infer<typeof PlanPartialSchema>;
export declare const CredentialSchema: z.ZodObject<{
    uid: z.ZodString;
    accountId: z.ZodString;
    applicantId: z.ZodString;
    claimId: z.ZodString;
    applicantUid: z.ZodString;
    communityUid: z.ZodString;
    claimUid: z.ZodString;
    type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    community: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    alias: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stars: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    revocable: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    issuedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    expiresUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    communityUid: string;
    accountId: string;
    applicantUid: string;
    applicantId: string;
    claimId: string;
    claimUid: string;
    type?: string | null | undefined;
    description?: string | null | undefined;
    community?: string | null | undefined;
    image?: string | null | undefined;
    alias?: string | null | undefined;
    stars?: number | null | undefined;
    metadata?: string | null | undefined;
    revocable?: boolean | null | undefined;
    issuedUTC?: Date | null | undefined;
    expiresUTC?: Date | null | undefined;
}, {
    uid: string;
    communityUid: string;
    accountId: string;
    applicantUid: string;
    applicantId: string;
    claimId: string;
    claimUid: string;
    type?: string | null | undefined;
    description?: string | null | undefined;
    community?: string | null | undefined;
    image?: string | null | undefined;
    alias?: string | null | undefined;
    stars?: number | null | undefined;
    metadata?: string | null | undefined;
    revocable?: boolean | null | undefined;
    issuedUTC?: Date | null | undefined;
    expiresUTC?: Date | null | undefined;
}>;
export type Credential = z.infer<typeof CredentialSchema>;
export declare const CredentialPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    accountId: z.ZodOptional<z.ZodString>;
    applicantId: z.ZodOptional<z.ZodString>;
    claimId: z.ZodOptional<z.ZodString>;
    applicantUid: z.ZodOptional<z.ZodString>;
    communityUid: z.ZodOptional<z.ZodString>;
    claimUid: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    description: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    community: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    image: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    alias: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    stars: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    metadata: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    revocable: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
    issuedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    expiresUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    accountId?: string | undefined;
    applicantId?: string | undefined;
    claimId?: string | undefined;
    applicantUid?: string | undefined;
    communityUid?: string | undefined;
    claimUid?: string | undefined;
    type?: string | null | undefined;
    description?: string | null | undefined;
    community?: string | null | undefined;
    image?: string | null | undefined;
    alias?: string | null | undefined;
    stars?: number | null | undefined;
    metadata?: string | null | undefined;
    revocable?: boolean | null | undefined;
    issuedUTC?: Date | null | undefined;
    expiresUTC?: Date | null | undefined;
}, {
    uid?: string | undefined;
    accountId?: string | undefined;
    applicantId?: string | undefined;
    claimId?: string | undefined;
    applicantUid?: string | undefined;
    communityUid?: string | undefined;
    claimUid?: string | undefined;
    type?: string | null | undefined;
    description?: string | null | undefined;
    community?: string | null | undefined;
    image?: string | null | undefined;
    alias?: string | null | undefined;
    stars?: number | null | undefined;
    metadata?: string | null | undefined;
    revocable?: boolean | null | undefined;
    issuedUTC?: Date | null | undefined;
    expiresUTC?: Date | null | undefined;
}>;
export type CredentialPartial = z.infer<typeof CredentialPartialSchema>;
export declare const TaskSchema: z.ZodObject<{
    uid: z.ZodString;
    claimUid: z.ZodString;
    assigneeUid: z.ZodString;
    state: z.ZodNumber;
    assignedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    completedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    dueUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    rewarded: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    result: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    state: number;
    claimUid: string;
    assigneeUid: string;
    assignedUTC?: Date | null | undefined;
    completedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    rewarded?: number | null | undefined;
    reason?: number | null | undefined;
    result?: string | null | undefined;
}, {
    uid: string;
    state: number;
    claimUid: string;
    assigneeUid: string;
    assignedUTC?: Date | null | undefined;
    completedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    rewarded?: number | null | undefined;
    reason?: number | null | undefined;
    result?: string | null | undefined;
}>;
export type Task = z.infer<typeof TaskSchema>;
export declare const TaskPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    claimUid: z.ZodOptional<z.ZodString>;
    assigneeUid: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodNumber>;
    assignedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    completedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    dueUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    rewarded: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    reason: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    result: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    claimUid?: string | undefined;
    assigneeUid?: string | undefined;
    state?: number | undefined;
    assignedUTC?: Date | null | undefined;
    completedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    rewarded?: number | null | undefined;
    reason?: number | null | undefined;
    result?: string | null | undefined;
}, {
    uid?: string | undefined;
    claimUid?: string | undefined;
    assigneeUid?: string | undefined;
    state?: number | undefined;
    assignedUTC?: Date | null | undefined;
    completedUTC?: Date | null | undefined;
    dueUTC?: Date | null | undefined;
    rewarded?: number | null | undefined;
    reason?: number | null | undefined;
    result?: string | null | undefined;
}>;
export type TaskPartial = z.infer<typeof TaskPartialSchema>;
export declare const ProposedSchema: z.ZodObject<{
    uid: z.ZodString;
    role: z.ZodString;
    personUid: z.ZodString;
    communityUid: z.ZodString;
    createdUTC: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    uid: string;
    role: string;
    communityUid: string;
    personUid: string;
    createdUTC: Date;
}, {
    uid: string;
    role: string;
    communityUid: string;
    personUid: string;
    createdUTC: Date;
}>;
export type Proposed = z.infer<typeof ProposedSchema>;
export declare const ProposedPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    role: z.ZodOptional<z.ZodString>;
    personUid: z.ZodOptional<z.ZodString>;
    communityUid: z.ZodOptional<z.ZodString>;
    createdUTC: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    role?: string | undefined;
    personUid?: string | undefined;
    communityUid?: string | undefined;
    createdUTC?: Date | undefined;
}, {
    uid?: string | undefined;
    role?: string | undefined;
    personUid?: string | undefined;
    communityUid?: string | undefined;
    createdUTC?: Date | undefined;
}>;
export type ProposedPartial = z.infer<typeof ProposedPartialSchema>;
export declare const BatchSchema: z.ZodObject<{
    uid: z.ZodString;
    sequence: z.ZodNumber;
    type: z.ZodString;
    metadata: z.ZodString;
    signerAccountId: z.ZodString;
    signedData: z.ZodString;
    signatureField: z.ZodString;
    signatureScalar: z.ZodString;
    commitment: z.ZodString;
    size: z.ZodNumber;
    state: z.ZodNumber;
    submitedUTC: z.ZodDate;
    doneUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    BatchesAccountId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    BatchReceivedTxnUid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    BatchesCommitedTxnUid: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    uid: string;
    size: number;
    state: number;
    sequence: number;
    type: string;
    metadata: string;
    signerAccountId: string;
    signedData: string;
    signatureField: string;
    signatureScalar: string;
    commitment: string;
    submitedUTC: Date;
    doneUTC?: Date | null | undefined;
    BatchesAccountId?: string | null | undefined;
    BatchReceivedTxnUid?: string | null | undefined;
    BatchesCommitedTxnUid?: string | null | undefined;
}, {
    uid: string;
    size: number;
    state: number;
    sequence: number;
    type: string;
    metadata: string;
    signerAccountId: string;
    signedData: string;
    signatureField: string;
    signatureScalar: string;
    commitment: string;
    submitedUTC: Date;
    doneUTC?: Date | null | undefined;
    BatchesAccountId?: string | null | undefined;
    BatchReceivedTxnUid?: string | null | undefined;
    BatchesCommitedTxnUid?: string | null | undefined;
}>;
export type Batch = z.infer<typeof BatchSchema>;
export declare const BatchPartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    sequence: z.ZodOptional<z.ZodNumber>;
    type: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodString>;
    signerAccountId: z.ZodOptional<z.ZodString>;
    signedData: z.ZodOptional<z.ZodString>;
    signatureField: z.ZodOptional<z.ZodString>;
    signatureScalar: z.ZodOptional<z.ZodString>;
    commitment: z.ZodOptional<z.ZodString>;
    size: z.ZodOptional<z.ZodNumber>;
    state: z.ZodOptional<z.ZodNumber>;
    submitedUTC: z.ZodOptional<z.ZodDate>;
    doneUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    BatchesAccountId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    BatchReceivedTxnUid: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    BatchesCommitedTxnUid: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    sequence?: number | undefined;
    type?: string | undefined;
    metadata?: string | undefined;
    signerAccountId?: string | undefined;
    signedData?: string | undefined;
    signatureField?: string | undefined;
    signatureScalar?: string | undefined;
    commitment?: string | undefined;
    size?: number | undefined;
    state?: number | undefined;
    submitedUTC?: Date | undefined;
    doneUTC?: Date | null | undefined;
    BatchesAccountId?: string | null | undefined;
    BatchReceivedTxnUid?: string | null | undefined;
    BatchesCommitedTxnUid?: string | null | undefined;
}, {
    uid?: string | undefined;
    sequence?: number | undefined;
    type?: string | undefined;
    metadata?: string | undefined;
    signerAccountId?: string | undefined;
    signedData?: string | undefined;
    signatureField?: string | undefined;
    signatureScalar?: string | undefined;
    commitment?: string | undefined;
    size?: number | undefined;
    state?: number | undefined;
    submitedUTC?: Date | undefined;
    doneUTC?: Date | null | undefined;
    BatchesAccountId?: string | null | undefined;
    BatchReceivedTxnUid?: string | null | undefined;
    BatchesCommitedTxnUid?: string | null | undefined;
}>;
export type BatchPartial = z.infer<typeof BatchPartialSchema>;
export declare const StateSchema: z.ZodObject<{
    id: z.ZodNumber;
    label: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: number;
    label: string;
}, {
    id: number;
    label: string;
}>;
export type State = z.infer<typeof StateSchema>;
export declare const StatePartialSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodNumber>;
    label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: number | undefined;
    label?: string | undefined;
}, {
    id?: number | undefined;
    label?: string | undefined;
}>;
export type StatePartial = z.infer<typeof StatePartialSchema>;
export declare const TransactionQueueSchema: z.ZodObject<{
    uid: z.ZodString;
    sequence: z.ZodNumber;
    queue: z.ZodString;
    type: z.ZodString;
    data: z.ZodString;
    state: z.ZodNumber;
    receivedUTC: z.ZodDate;
    submitedUTC: z.ZodDate;
    doneUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    retries: z.ZodNumber;
    hash: z.ZodString;
    done: z.ZodString;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    error: string;
    uid: string;
    hash: string;
    data: string;
    state: number;
    sequence: number;
    type: string;
    submitedUTC: Date;
    queue: string;
    receivedUTC: Date;
    retries: number;
    done: string;
    doneUTC?: Date | null | undefined;
}, {
    error: string;
    uid: string;
    hash: string;
    data: string;
    state: number;
    sequence: number;
    type: string;
    submitedUTC: Date;
    queue: string;
    receivedUTC: Date;
    retries: number;
    done: string;
    doneUTC?: Date | null | undefined;
}>;
export type TransactionQueue = z.infer<typeof TransactionQueueSchema>;
export declare const TransactionQueuePartialSchema: z.ZodObject<{
    uid: z.ZodOptional<z.ZodString>;
    sequence: z.ZodOptional<z.ZodNumber>;
    queue: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    data: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodNumber>;
    receivedUTC: z.ZodOptional<z.ZodDate>;
    submitedUTC: z.ZodOptional<z.ZodDate>;
    doneUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
    retries: z.ZodOptional<z.ZodNumber>;
    hash: z.ZodOptional<z.ZodString>;
    done: z.ZodOptional<z.ZodString>;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    uid?: string | undefined;
    sequence?: number | undefined;
    queue?: string | undefined;
    type?: string | undefined;
    data?: string | undefined;
    state?: number | undefined;
    receivedUTC?: Date | undefined;
    submitedUTC?: Date | undefined;
    doneUTC?: Date | null | undefined;
    retries?: number | undefined;
    hash?: string | undefined;
    done?: string | undefined;
    error?: string | undefined;
}, {
    uid?: string | undefined;
    sequence?: number | undefined;
    queue?: string | undefined;
    type?: string | undefined;
    data?: string | undefined;
    state?: number | undefined;
    receivedUTC?: Date | undefined;
    submitedUTC?: Date | undefined;
    doneUTC?: Date | null | undefined;
    retries?: number | undefined;
    hash?: string | undefined;
    done?: string | undefined;
    error?: string | undefined;
}>;
export type TransactionQueuePartial = z.infer<typeof TransactionQueuePartialSchema>;
export declare const TransactionEventSchema: z.ZodObject<{
    sequence: z.ZodNumber;
    type: z.ZodString;
    subject: z.ZodString;
    payload: z.ZodString;
    state: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    emittedUTC: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    sequence: number;
    type: string;
    subject: string;
    payload: string;
    state?: number | null | undefined;
    emittedUTC?: Date | null | undefined;
}, {
    sequence: number;
    type: string;
    subject: string;
    payload: string;
    state?: number | null | undefined;
    emittedUTC?: Date | null | undefined;
}>;
export type TransactionEvent = z.infer<typeof TransactionEventSchema>;
export declare const TransactionEventPartialSchema: z.ZodObject<{
    sequence: z.ZodOptional<z.ZodNumber>;
    type: z.ZodOptional<z.ZodString>;
    subject: z.ZodOptional<z.ZodString>;
    payload: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    emittedUTC: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodDate>>>;
}, "strip", z.ZodTypeAny, {
    sequence?: number | undefined;
    type?: string | undefined;
    subject?: string | undefined;
    payload?: string | undefined;
    state?: number | null | undefined;
    emittedUTC?: Date | null | undefined;
}, {
    sequence?: number | undefined;
    type?: string | undefined;
    subject?: string | undefined;
    payload?: string | undefined;
    state?: number | null | undefined;
    emittedUTC?: Date | null | undefined;
}>;
export type TransactionEventPartial = z.infer<typeof TransactionEventPartialSchema>;
