
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 5.0.0
 * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
 */
Prisma.prismaVersion = {
  client: "5.0.0",
  engine: "6b0aef69b7cdfc787f822ecd7cdc76d5f1991584"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.MerkleMapScalarFieldEnum = {
  id: 'id',
  name: 'name',
  root: 'root',
  size: 'size',
  height: 'height',
  createdUtc: 'createdUtc',
  updatedUtc: 'updatedUtc'
};

exports.Prisma.MerkleMapLeafScalarFieldEnum = {
  uid: 'uid',
  mapId: 'mapId',
  index: 'index',
  key: 'key',
  hash: 'hash',
  data: 'data',
  createdUtc: 'createdUtc',
  updatedUtc: 'updatedUtc'
};

exports.Prisma.SessionScalarFieldEnum = {
  uid: 'uid',
  otp: 'otp',
  email: 'email',
  createdUtc: 'createdUtc',
  updatedUtc: 'updatedUtc'
};

exports.Prisma.PersonScalarFieldEnum = {
  uid: 'uid',
  accountId: 'accountId',
  state: 'state',
  fullName: 'fullName',
  description: 'description',
  image: 'image',
  email: 'email',
  phone: 'phone',
  telegram: 'telegram',
  preferences: 'preferences',
  createdUTC: 'createdUTC',
  updatedUTC: 'updatedUTC',
  approvedUTC: 'approvedUTC'
};

exports.Prisma.CommunityScalarFieldEnum = {
  uid: 'uid',
  accountId: 'accountId',
  adminUid: 'adminUid',
  state: 'state',
  name: 'name',
  description: 'description',
  image: 'image',
  createdUTC: 'createdUTC',
  updatedUTC: 'updatedUTC',
  approvedUTC: 'approvedUTC',
  xadmins: 'xadmins'
};

exports.Prisma.MembersScalarFieldEnum = {
  uid: 'uid',
  communityUid: 'communityUid',
  personUid: 'personUid',
  role: 'role',
  createdUTC: 'createdUTC',
  approvedUTC: 'approvedUTC'
};

exports.Prisma.ClaimScalarFieldEnum = {
  uid: 'uid',
  communityUid: 'communityUid',
  applicantUid: 'applicantUid',
  planUid: 'planUid',
  state: 'state',
  accountId: 'accountId',
  alias: 'alias',
  createdUTC: 'createdUTC',
  updatedUTC: 'updatedUTC',
  votedUTC: 'votedUTC',
  issuedUTC: 'issuedUTC',
  dueUTC: 'dueUTC',
  requiredVotes: 'requiredVotes',
  requiredPositives: 'requiredPositives',
  positiveVotes: 'positiveVotes',
  negativeVotes: 'negativeVotes',
  ignoredVotes: 'ignoredVotes',
  evidenceData: 'evidenceData'
};

exports.Prisma.PlanScalarFieldEnum = {
  uid: 'uid',
  communityUid: 'communityUid',
  state: 'state',
  name: 'name',
  alias: 'alias',
  description: 'description',
  image: 'image',
  template: 'template',
  evidence: 'evidence',
  strategy: 'strategy',
  createdUTC: 'createdUTC',
  updatedUTC: 'updatedUTC',
  approvedUTC: 'approvedUTC',
  fee: 'fee',
  rewardsShare: 'rewardsShare',
  communityShare: 'communityShare',
  protocolShare: 'protocolShare',
  total: 'total',
  available: 'available',
  expiration: 'expiration',
  revocable: 'revocable',
  startsUTC: 'startsUTC',
  endsUTC: 'endsUTC'
};

exports.Prisma.CredentialScalarFieldEnum = {
  uid: 'uid',
  accountId: 'accountId',
  applicantId: 'applicantId',
  claimId: 'claimId',
  applicantUid: 'applicantUid',
  communityUid: 'communityUid',
  claimUid: 'claimUid',
  type: 'type',
  description: 'description',
  community: 'community',
  image: 'image',
  alias: 'alias',
  stars: 'stars',
  metadata: 'metadata',
  revocable: 'revocable',
  issuedUTC: 'issuedUTC',
  expiresUTC: 'expiresUTC'
};

exports.Prisma.TaskScalarFieldEnum = {
  uid: 'uid',
  claimUid: 'claimUid',
  assigneeUid: 'assigneeUid',
  state: 'state',
  assignedUTC: 'assignedUTC',
  completedUTC: 'completedUTC',
  dueUTC: 'dueUTC',
  rewarded: 'rewarded',
  reason: 'reason',
  result: 'result'
};

exports.Prisma.ProposedScalarFieldEnum = {
  uid: 'uid',
  role: 'role',
  personUid: 'personUid',
  communityUid: 'communityUid',
  createdUTC: 'createdUTC'
};

exports.Prisma.BatchScalarFieldEnum = {
  uid: 'uid',
  sequence: 'sequence',
  type: 'type',
  metadata: 'metadata',
  signerAccountId: 'signerAccountId',
  signedData: 'signedData',
  signatureField: 'signatureField',
  signatureScalar: 'signatureScalar',
  commitment: 'commitment',
  size: 'size',
  state: 'state',
  submitedUTC: 'submitedUTC',
  doneUTC: 'doneUTC',
  BatchesAccountId: 'BatchesAccountId',
  BatchReceivedTxnUid: 'BatchReceivedTxnUid',
  BatchesCommitedTxnUid: 'BatchesCommitedTxnUid'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  label: 'label'
};

exports.Prisma.TransactionQueueScalarFieldEnum = {
  uid: 'uid',
  sequence: 'sequence',
  queue: 'queue',
  type: 'type',
  data: 'data',
  state: 'state',
  receivedUTC: 'receivedUTC',
  submitedUTC: 'submitedUTC',
  doneUTC: 'doneUTC',
  retries: 'retries',
  hash: 'hash',
  done: 'done',
  error: 'error'
};

exports.Prisma.TransactionEventScalarFieldEnum = {
  sequence: 'sequence',
  type: 'type',
  subject: 'subject',
  payload: 'payload',
  state: 'state',
  emittedUTC: 'emittedUTC'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  MerkleMap: 'MerkleMap',
  MerkleMapLeaf: 'MerkleMapLeaf',
  Session: 'Session',
  Person: 'Person',
  Community: 'Community',
  Members: 'Members',
  Claim: 'Claim',
  Plan: 'Plan',
  Credential: 'Credential',
  Task: 'Task',
  Proposed: 'Proposed',
  Batch: 'Batch',
  State: 'State',
  TransactionQueue: 'TransactionQueue',
  TransactionEvent: 'TransactionEvent'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
