
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type MerkleMapPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "MerkleMap"
  objects: {
    leafs: MerkleMapLeafPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    root: bigint
    size: number
    height: number
    createdUtc: Date
    updatedUtc: Date
  }, ExtArgs["result"]["merkleMap"]>
  composites: {}
}

/**
 * Model MerkleMap
 * 
 */
export type MerkleMap = runtime.Types.DefaultSelection<MerkleMapPayload>
export type MerkleMapLeafPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "MerkleMapLeaf"
  objects: {
    map: MerkleMapPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    uid: string
    mapId: number
    index: bigint
    key: string
    hash: string
    data: string | null
    createdUtc: Date
    updatedUtc: Date
  }, ExtArgs["result"]["merkleMapLeaf"]>
  composites: {}
}

/**
 * Model MerkleMapLeaf
 * 
 */
export type MerkleMapLeaf = runtime.Types.DefaultSelection<MerkleMapLeafPayload>
export type SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Session"
  objects: {}
  scalars: $Extensions.GetResult<{
    /**
     * @zod.string.max(36)
     */
    uid: string
    /**
     * @zod.string.min(6).max(8)
     */
    otp: string
    /**
     * @zod.string.email().min(5).max(128)
     */
    email: string
    createdUtc: Date
    updatedUtc: Date
  }, ExtArgs["result"]["session"]>
  composites: {}
}

/**
 * Model Session
 * 
 */
export type Session = runtime.Types.DefaultSelection<SessionPayload>
export type PersonPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Person"
  objects: {}
  scalars: $Extensions.GetResult<{
    /**
     * @zod.string.max(32)
     */
    uid: string
    /**
     * @zod.string.max(64)
     */
    accountId: string | null
    /**
     * @zod.string.min(1).max(12)
     */
    state: string
    /**
     * @zod.string.min(3).max(128)
     */
    fullName: string
    /**
     * @zod.string.max(128)
     */
    description: string | null
    /**
     * @zod.string.max(128) 
     */
    image: string | null
    /**
     * @zod.string.email().min(5).max(128)
     */
    email: string
    /**
     * @zod.string.max(128)
     */
    phone: string | null
    /**
     * @zod.string.max(128)
     */
    telegram: string | null
    preferences: string | null
    createdUTC: Date
    updatedUTC: Date | null
    approvedUTC: Date | null
  }, ExtArgs["result"]["person"]>
  composites: {}
}

/**
 * Model Person
 * 
 */
export type Person = runtime.Types.DefaultSelection<PersonPayload>
export type CommunityPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Community"
  objects: {}
  scalars: $Extensions.GetResult<{
    /**
     * @zod.string.max(32)
     */
    uid: string
    /**
     * @zod.string.max(64)
     */
    accountId: string | null
    /**
     * @zod.string.max(64)
     */
    adminUid: string
    /**
     * @zod.string.min(1).max(12) 
     */
    state: string
    /**
     * @zod.string.min(3).max(128)
     */
    name: string
    /**
     * @zod.string.max(128)
     */
    description: string | null
    /**
     * @zod.string.url().max(1024)
     */
    image: string | null
    createdUTC: Date
    updatedUTC: Date
    approvedUTC: Date | null
    xadmins: string | null
  }, ExtArgs["result"]["community"]>
  composites: {}
}

/**
 * Model Community
 * 
 */
export type Community = runtime.Types.DefaultSelection<CommunityPayload>
export type MembersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Members"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    /**
     * @zod.string.max(32)
     */
    communityUid: string
    /**
     * @zod.string.max(32)
     */
    personUid: string
    /**
     * @zod.string.max(32) // 1:PLAIN, 2:VALIDATOR, 3:AUDITOR
     */
    role: string
    createdUTC: Date
    approvedUTC: Date | null
  }, ExtArgs["result"]["members"]>
  composites: {}
}

/**
 * Model Members
 * 
 */
export type Members = runtime.Types.DefaultSelection<MembersPayload>
export type ClaimPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Claim"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    communityUid: string
    applicantUid: string
    planUid: string
    state: number
    accountId: string | null
    alias: string | null
    createdUTC: Date
    updatedUTC: Date
    votedUTC: Date | null
    issuedUTC: Date | null
    dueUTC: Date | null
    requiredVotes: number | null
    requiredPositives: number | null
    positiveVotes: number | null
    negativeVotes: number | null
    ignoredVotes: number | null
    evidenceData: string | null
  }, ExtArgs["result"]["claim"]>
  composites: {}
}

/**
 * Model Claim
 * 
 */
export type Claim = runtime.Types.DefaultSelection<ClaimPayload>
export type PlanPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Plan"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    communityUid: string
    state: number
    name: string
    alias: string | null
    description: string | null
    image: string | null
    template: string | null
    evidence: string | null
    strategy: string | null
    createdUTC: Date
    updatedUTC: Date
    approvedUTC: Date | null
    fee: number | null
    rewardsShare: number | null
    communityShare: number | null
    protocolShare: number | null
    total: number | null
    available: number | null
    expiration: number | null
    revocable: boolean | null
    startsUTC: Date | null
    endsUTC: Date | null
  }, ExtArgs["result"]["plan"]>
  composites: {}
}

/**
 * Model Plan
 * 
 */
export type Plan = runtime.Types.DefaultSelection<PlanPayload>
export type CredentialPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Credential"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    accountId: string
    applicantId: string
    claimId: string
    applicantUid: string
    communityUid: string
    claimUid: string
    type: string | null
    description: string | null
    community: string | null
    image: string | null
    alias: string | null
    stars: number | null
    metadata: string | null
    revocable: boolean | null
    issuedUTC: Date | null
    expiresUTC: Date | null
  }, ExtArgs["result"]["credential"]>
  composites: {}
}

/**
 * Model Credential
 * 
 */
export type Credential = runtime.Types.DefaultSelection<CredentialPayload>
export type TaskPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Task"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    claimUid: string
    assigneeUid: string
    state: number
    assignedUTC: Date | null
    completedUTC: Date | null
    dueUTC: Date | null
    rewarded: number | null
    reason: number | null
    result: string | null
  }, ExtArgs["result"]["task"]>
  composites: {}
}

/**
 * Model Task
 * 
 */
export type Task = runtime.Types.DefaultSelection<TaskPayload>
export type ProposedPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Proposed"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    role: string
    personUid: string
    communityUid: string
    createdUTC: Date
  }, ExtArgs["result"]["proposed"]>
  composites: {}
}

/**
 * Model Proposed
 * 
 */
export type Proposed = runtime.Types.DefaultSelection<ProposedPayload>
export type BatchPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Batch"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    sequence: number
    type: string
    metadata: string
    signerAccountId: string
    signedData: string
    signatureField: string
    signatureScalar: string
    commitment: string
    size: number
    state: number
    submitedUTC: Date
    doneUTC: Date | null
    BatchesAccountId: string | null
    BatchReceivedTxnUid: string | null
    BatchesCommitedTxnUid: string | null
  }, ExtArgs["result"]["batch"]>
  composites: {}
}

/**
 * Model Batch
 * 
 */
export type Batch = runtime.Types.DefaultSelection<BatchPayload>
export type StatePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "State"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    label: string
  }, ExtArgs["result"]["state"]>
  composites: {}
}

/**
 * Model State
 * 
 */
export type State = runtime.Types.DefaultSelection<StatePayload>
export type TransactionQueuePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "TransactionQueue"
  objects: {}
  scalars: $Extensions.GetResult<{
    uid: string
    sequence: number
    queue: string
    type: string
    data: string
    state: number
    receivedUTC: Date
    submitedUTC: Date
    doneUTC: Date | null
    retries: number
    hash: string
    done: string
    error: string
  }, ExtArgs["result"]["transactionQueue"]>
  composites: {}
}

/**
 * Model TransactionQueue
 * 
 */
export type TransactionQueue = runtime.Types.DefaultSelection<TransactionQueuePayload>
export type TransactionEventPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "TransactionEvent"
  objects: {}
  scalars: $Extensions.GetResult<{
    sequence: number
    type: string
    subject: string
    payload: string
    state: number | null
    emittedUTC: Date | null
  }, ExtArgs["result"]["transactionEvent"]>
  composites: {}
}

/**
 * Model TransactionEvent
 * 
 */
export type TransactionEvent = runtime.Types.DefaultSelection<TransactionEventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more MerkleMaps
 * const merkleMaps = await prisma.merkleMap.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more MerkleMaps
   * const merkleMaps = await prisma.merkleMap.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  /**
   * Gives access to the client metrics in json or prometheus format.
   * 
   * @example
   * ```
   * const metrics = await prisma.$metrics.json()
   * // or
   * const metrics = await prisma.$metrics.prometheus()
   * ```
   */
  readonly $metrics: runtime.MetricsClient
  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.merkleMap`: Exposes CRUD operations for the **MerkleMap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MerkleMaps
    * const merkleMaps = await prisma.merkleMap.findMany()
    * ```
    */
  get merkleMap(): Prisma.MerkleMapDelegate<ExtArgs>;

  /**
   * `prisma.merkleMapLeaf`: Exposes CRUD operations for the **MerkleMapLeaf** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MerkleMapLeaves
    * const merkleMapLeaves = await prisma.merkleMapLeaf.findMany()
    * ```
    */
  get merkleMapLeaf(): Prisma.MerkleMapLeafDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs>;

  /**
   * `prisma.community`: Exposes CRUD operations for the **Community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communities
    * const communities = await prisma.community.findMany()
    * ```
    */
  get community(): Prisma.CommunityDelegate<ExtArgs>;

  /**
   * `prisma.members`: Exposes CRUD operations for the **Members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.members.findMany()
    * ```
    */
  get members(): Prisma.MembersDelegate<ExtArgs>;

  /**
   * `prisma.claim`: Exposes CRUD operations for the **Claim** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Claims
    * const claims = await prisma.claim.findMany()
    * ```
    */
  get claim(): Prisma.ClaimDelegate<ExtArgs>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **Plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.PlanDelegate<ExtArgs>;

  /**
   * `prisma.credential`: Exposes CRUD operations for the **Credential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credentials
    * const credentials = await prisma.credential.findMany()
    * ```
    */
  get credential(): Prisma.CredentialDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.proposed`: Exposes CRUD operations for the **Proposed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proposeds
    * const proposeds = await prisma.proposed.findMany()
    * ```
    */
  get proposed(): Prisma.ProposedDelegate<ExtArgs>;

  /**
   * `prisma.batch`: Exposes CRUD operations for the **Batch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Batches
    * const batches = await prisma.batch.findMany()
    * ```
    */
  get batch(): Prisma.BatchDelegate<ExtArgs>;

  /**
   * `prisma.state`: Exposes CRUD operations for the **State** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more States
    * const states = await prisma.state.findMany()
    * ```
    */
  get state(): Prisma.StateDelegate<ExtArgs>;

  /**
   * `prisma.transactionQueue`: Exposes CRUD operations for the **TransactionQueue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionQueues
    * const transactionQueues = await prisma.transactionQueue.findMany()
    * ```
    */
  get transactionQueue(): Prisma.TransactionQueueDelegate<ExtArgs>;

  /**
   * `prisma.transactionEvent`: Exposes CRUD operations for the **TransactionEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionEvents
    * const transactionEvents = await prisma.transactionEvent.findMany()
    * ```
    */
  get transactionEvent(): Prisma.TransactionEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    MerkleMap: 'MerkleMap',
    MerkleMapLeaf: 'MerkleMapLeaf',
    Session: 'Session',
    Person: 'Person',
    Community: 'Community',
    Members: 'Members',
    Claim: 'Claim',
    Plan: 'Plan',
    Credential: 'Credential',
    Task: 'Task',
    Proposed: 'Proposed',
    Batch: 'Batch',
    State: 'State',
    TransactionQueue: 'TransactionQueue',
    TransactionEvent: 'TransactionEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'merkleMap' | 'merkleMapLeaf' | 'session' | 'person' | 'community' | 'members' | 'claim' | 'plan' | 'credential' | 'task' | 'proposed' | 'batch' | 'state' | 'transactionQueue' | 'transactionEvent'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      MerkleMap: {
        payload: MerkleMapPayload<ExtArgs>
        fields: Prisma.MerkleMapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerkleMapFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerkleMapFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload>
          }
          findFirst: {
            args: Prisma.MerkleMapFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerkleMapFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload>
          }
          findMany: {
            args: Prisma.MerkleMapFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload>[]
          }
          create: {
            args: Prisma.MerkleMapCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload>
          }
          createMany: {
            args: Prisma.MerkleMapCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MerkleMapDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload>
          }
          update: {
            args: Prisma.MerkleMapUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload>
          }
          deleteMany: {
            args: Prisma.MerkleMapDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MerkleMapUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MerkleMapUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapPayload>
          }
          aggregate: {
            args: Prisma.MerkleMapAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMerkleMap>
          }
          groupBy: {
            args: Prisma.MerkleMapGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MerkleMapGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerkleMapCountArgs<ExtArgs>,
            result: $Utils.Optional<MerkleMapCountAggregateOutputType> | number
          }
        }
      }
      MerkleMapLeaf: {
        payload: MerkleMapLeafPayload<ExtArgs>
        fields: Prisma.MerkleMapLeafFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerkleMapLeafFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerkleMapLeafFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload>
          }
          findFirst: {
            args: Prisma.MerkleMapLeafFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerkleMapLeafFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload>
          }
          findMany: {
            args: Prisma.MerkleMapLeafFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload>[]
          }
          create: {
            args: Prisma.MerkleMapLeafCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload>
          }
          createMany: {
            args: Prisma.MerkleMapLeafCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MerkleMapLeafDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload>
          }
          update: {
            args: Prisma.MerkleMapLeafUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload>
          }
          deleteMany: {
            args: Prisma.MerkleMapLeafDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MerkleMapLeafUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MerkleMapLeafUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MerkleMapLeafPayload>
          }
          aggregate: {
            args: Prisma.MerkleMapLeafAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMerkleMapLeaf>
          }
          groupBy: {
            args: Prisma.MerkleMapLeafGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MerkleMapLeafGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerkleMapLeafCountArgs<ExtArgs>,
            result: $Utils.Optional<MerkleMapLeafCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Person: {
        payload: PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>,
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      Community: {
        payload: CommunityPayload<ExtArgs>
        fields: Prisma.CommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload>
          }
          findFirst: {
            args: Prisma.CommunityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload>
          }
          findMany: {
            args: Prisma.CommunityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload>[]
          }
          create: {
            args: Prisma.CommunityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload>
          }
          createMany: {
            args: Prisma.CommunityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommunityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload>
          }
          update: {
            args: Prisma.CommunityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload>
          }
          deleteMany: {
            args: Prisma.CommunityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommunityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommunityPayload>
          }
          aggregate: {
            args: Prisma.CommunityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommunity>
          }
          groupBy: {
            args: Prisma.CommunityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommunityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunityCountArgs<ExtArgs>,
            result: $Utils.Optional<CommunityCountAggregateOutputType> | number
          }
        }
      }
      Members: {
        payload: MembersPayload<ExtArgs>
        fields: Prisma.MembersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MembersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MembersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload>
          }
          findFirst: {
            args: Prisma.MembersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MembersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload>
          }
          findMany: {
            args: Prisma.MembersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload>[]
          }
          create: {
            args: Prisma.MembersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload>
          }
          createMany: {
            args: Prisma.MembersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MembersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload>
          }
          update: {
            args: Prisma.MembersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload>
          }
          deleteMany: {
            args: Prisma.MembersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MembersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MembersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MembersPayload>
          }
          aggregate: {
            args: Prisma.MembersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMembers>
          }
          groupBy: {
            args: Prisma.MembersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MembersGroupByOutputType>[]
          }
          count: {
            args: Prisma.MembersCountArgs<ExtArgs>,
            result: $Utils.Optional<MembersCountAggregateOutputType> | number
          }
        }
      }
      Claim: {
        payload: ClaimPayload<ExtArgs>
        fields: Prisma.ClaimFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClaimFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClaimFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload>
          }
          findFirst: {
            args: Prisma.ClaimFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClaimFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload>
          }
          findMany: {
            args: Prisma.ClaimFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload>[]
          }
          create: {
            args: Prisma.ClaimCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload>
          }
          createMany: {
            args: Prisma.ClaimCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClaimDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload>
          }
          update: {
            args: Prisma.ClaimUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload>
          }
          deleteMany: {
            args: Prisma.ClaimDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClaimUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClaimUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClaimPayload>
          }
          aggregate: {
            args: Prisma.ClaimAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClaim>
          }
          groupBy: {
            args: Prisma.ClaimGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClaimGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClaimCountArgs<ExtArgs>,
            result: $Utils.Optional<ClaimCountAggregateOutputType> | number
          }
        }
      }
      Plan: {
        payload: PlanPayload<ExtArgs>
        fields: Prisma.PlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload>
          }
          findFirst: {
            args: Prisma.PlanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload>
          }
          findMany: {
            args: Prisma.PlanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload>[]
          }
          create: {
            args: Prisma.PlanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload>
          }
          createMany: {
            args: Prisma.PlanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload>
          }
          update: {
            args: Prisma.PlanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload>
          }
          deleteMany: {
            args: Prisma.PlanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlanPayload>
          }
          aggregate: {
            args: Prisma.PlanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlan>
          }
          groupBy: {
            args: Prisma.PlanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCountArgs<ExtArgs>,
            result: $Utils.Optional<PlanCountAggregateOutputType> | number
          }
        }
      }
      Credential: {
        payload: CredentialPayload<ExtArgs>
        fields: Prisma.CredentialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CredentialFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CredentialFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload>
          }
          findFirst: {
            args: Prisma.CredentialFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CredentialFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload>
          }
          findMany: {
            args: Prisma.CredentialFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload>[]
          }
          create: {
            args: Prisma.CredentialCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload>
          }
          createMany: {
            args: Prisma.CredentialCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CredentialDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload>
          }
          update: {
            args: Prisma.CredentialUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload>
          }
          deleteMany: {
            args: Prisma.CredentialDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CredentialUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CredentialUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CredentialPayload>
          }
          aggregate: {
            args: Prisma.CredentialAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCredential>
          }
          groupBy: {
            args: Prisma.CredentialGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CredentialGroupByOutputType>[]
          }
          count: {
            args: Prisma.CredentialCountArgs<ExtArgs>,
            result: $Utils.Optional<CredentialCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>,
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Proposed: {
        payload: ProposedPayload<ExtArgs>
        fields: Prisma.ProposedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProposedFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProposedFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload>
          }
          findFirst: {
            args: Prisma.ProposedFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProposedFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload>
          }
          findMany: {
            args: Prisma.ProposedFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload>[]
          }
          create: {
            args: Prisma.ProposedCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload>
          }
          createMany: {
            args: Prisma.ProposedCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProposedDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload>
          }
          update: {
            args: Prisma.ProposedUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload>
          }
          deleteMany: {
            args: Prisma.ProposedDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProposedUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProposedUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProposedPayload>
          }
          aggregate: {
            args: Prisma.ProposedAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProposed>
          }
          groupBy: {
            args: Prisma.ProposedGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProposedGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProposedCountArgs<ExtArgs>,
            result: $Utils.Optional<ProposedCountAggregateOutputType> | number
          }
        }
      }
      Batch: {
        payload: BatchPayload<ExtArgs>
        fields: Prisma.BatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BatchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BatchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          findFirst: {
            args: Prisma.BatchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BatchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          findMany: {
            args: Prisma.BatchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>[]
          }
          create: {
            args: Prisma.BatchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          createMany: {
            args: Prisma.BatchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BatchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          update: {
            args: Prisma.BatchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          deleteMany: {
            args: Prisma.BatchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BatchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BatchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          aggregate: {
            args: Prisma.BatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBatch>
          }
          groupBy: {
            args: Prisma.BatchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BatchCountArgs<ExtArgs>,
            result: $Utils.Optional<BatchCountAggregateOutputType> | number
          }
        }
      }
      State: {
        payload: StatePayload<ExtArgs>
        fields: Prisma.StateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload>
          }
          findFirst: {
            args: Prisma.StateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload>
          }
          findMany: {
            args: Prisma.StateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload>[]
          }
          create: {
            args: Prisma.StateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload>
          }
          createMany: {
            args: Prisma.StateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload>
          }
          update: {
            args: Prisma.StateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload>
          }
          deleteMany: {
            args: Prisma.StateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StatePayload>
          }
          aggregate: {
            args: Prisma.StateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateState>
          }
          groupBy: {
            args: Prisma.StateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StateGroupByOutputType>[]
          }
          count: {
            args: Prisma.StateCountArgs<ExtArgs>,
            result: $Utils.Optional<StateCountAggregateOutputType> | number
          }
        }
      }
      TransactionQueue: {
        payload: TransactionQueuePayload<ExtArgs>
        fields: Prisma.TransactionQueueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionQueueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionQueueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload>
          }
          findFirst: {
            args: Prisma.TransactionQueueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionQueueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload>
          }
          findMany: {
            args: Prisma.TransactionQueueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload>[]
          }
          create: {
            args: Prisma.TransactionQueueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload>
          }
          createMany: {
            args: Prisma.TransactionQueueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransactionQueueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload>
          }
          update: {
            args: Prisma.TransactionQueueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload>
          }
          deleteMany: {
            args: Prisma.TransactionQueueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionQueueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransactionQueueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionQueuePayload>
          }
          aggregate: {
            args: Prisma.TransactionQueueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransactionQueue>
          }
          groupBy: {
            args: Prisma.TransactionQueueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransactionQueueGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionQueueCountArgs<ExtArgs>,
            result: $Utils.Optional<TransactionQueueCountAggregateOutputType> | number
          }
        }
      }
      TransactionEvent: {
        payload: TransactionEventPayload<ExtArgs>
        fields: Prisma.TransactionEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionEventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionEventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload>
          }
          findFirst: {
            args: Prisma.TransactionEventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionEventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload>
          }
          findMany: {
            args: Prisma.TransactionEventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload>[]
          }
          create: {
            args: Prisma.TransactionEventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload>
          }
          createMany: {
            args: Prisma.TransactionEventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransactionEventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload>
          }
          update: {
            args: Prisma.TransactionEventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload>
          }
          deleteMany: {
            args: Prisma.TransactionEventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionEventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransactionEventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TransactionEventPayload>
          }
          aggregate: {
            args: Prisma.TransactionEventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransactionEvent>
          }
          groupBy: {
            args: Prisma.TransactionEventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransactionEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionEventCountArgs<ExtArgs>,
            result: $Utils.Optional<TransactionEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MerkleMapCountOutputType
   */


  export type MerkleMapCountOutputType = {
    leafs: number
  }

  export type MerkleMapCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    leafs?: boolean | MerkleMapCountOutputTypeCountLeafsArgs
  }

  // Custom InputTypes

  /**
   * MerkleMapCountOutputType without action
   */
  export type MerkleMapCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapCountOutputType
     */
    select?: MerkleMapCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MerkleMapCountOutputType without action
   */
  export type MerkleMapCountOutputTypeCountLeafsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MerkleMapLeafWhereInput
  }



  /**
   * Models
   */

  /**
   * Model MerkleMap
   */


  export type AggregateMerkleMap = {
    _count: MerkleMapCountAggregateOutputType | null
    _avg: MerkleMapAvgAggregateOutputType | null
    _sum: MerkleMapSumAggregateOutputType | null
    _min: MerkleMapMinAggregateOutputType | null
    _max: MerkleMapMaxAggregateOutputType | null
  }

  export type MerkleMapAvgAggregateOutputType = {
    id: number | null
    root: number | null
    size: number | null
    height: number | null
  }

  export type MerkleMapSumAggregateOutputType = {
    id: number | null
    root: bigint | null
    size: number | null
    height: number | null
  }

  export type MerkleMapMinAggregateOutputType = {
    id: number | null
    name: string | null
    root: bigint | null
    size: number | null
    height: number | null
    createdUtc: Date | null
    updatedUtc: Date | null
  }

  export type MerkleMapMaxAggregateOutputType = {
    id: number | null
    name: string | null
    root: bigint | null
    size: number | null
    height: number | null
    createdUtc: Date | null
    updatedUtc: Date | null
  }

  export type MerkleMapCountAggregateOutputType = {
    id: number
    name: number
    root: number
    size: number
    height: number
    createdUtc: number
    updatedUtc: number
    _all: number
  }


  export type MerkleMapAvgAggregateInputType = {
    id?: true
    root?: true
    size?: true
    height?: true
  }

  export type MerkleMapSumAggregateInputType = {
    id?: true
    root?: true
    size?: true
    height?: true
  }

  export type MerkleMapMinAggregateInputType = {
    id?: true
    name?: true
    root?: true
    size?: true
    height?: true
    createdUtc?: true
    updatedUtc?: true
  }

  export type MerkleMapMaxAggregateInputType = {
    id?: true
    name?: true
    root?: true
    size?: true
    height?: true
    createdUtc?: true
    updatedUtc?: true
  }

  export type MerkleMapCountAggregateInputType = {
    id?: true
    name?: true
    root?: true
    size?: true
    height?: true
    createdUtc?: true
    updatedUtc?: true
    _all?: true
  }

  export type MerkleMapAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerkleMap to aggregate.
     */
    where?: MerkleMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMaps to fetch.
     */
    orderBy?: MerkleMapOrderByWithRelationInput | MerkleMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerkleMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MerkleMaps
    **/
    _count?: true | MerkleMapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MerkleMapAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MerkleMapSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerkleMapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerkleMapMaxAggregateInputType
  }

  export type GetMerkleMapAggregateType<T extends MerkleMapAggregateArgs> = {
        [P in keyof T & keyof AggregateMerkleMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerkleMap[P]>
      : GetScalarType<T[P], AggregateMerkleMap[P]>
  }




  export type MerkleMapGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MerkleMapWhereInput
    orderBy?: MerkleMapOrderByWithAggregationInput | MerkleMapOrderByWithAggregationInput[]
    by: MerkleMapScalarFieldEnum[] | MerkleMapScalarFieldEnum
    having?: MerkleMapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerkleMapCountAggregateInputType | true
    _avg?: MerkleMapAvgAggregateInputType
    _sum?: MerkleMapSumAggregateInputType
    _min?: MerkleMapMinAggregateInputType
    _max?: MerkleMapMaxAggregateInputType
  }


  export type MerkleMapGroupByOutputType = {
    id: number
    name: string
    root: bigint
    size: number
    height: number
    createdUtc: Date
    updatedUtc: Date
    _count: MerkleMapCountAggregateOutputType | null
    _avg: MerkleMapAvgAggregateOutputType | null
    _sum: MerkleMapSumAggregateOutputType | null
    _min: MerkleMapMinAggregateOutputType | null
    _max: MerkleMapMaxAggregateOutputType | null
  }

  type GetMerkleMapGroupByPayload<T extends MerkleMapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerkleMapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerkleMapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerkleMapGroupByOutputType[P]>
            : GetScalarType<T[P], MerkleMapGroupByOutputType[P]>
        }
      >
    >


  export type MerkleMapSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    root?: boolean
    size?: boolean
    height?: boolean
    createdUtc?: boolean
    updatedUtc?: boolean
    leafs?: boolean | MerkleMap$leafsArgs<ExtArgs>
    _count?: boolean | MerkleMapCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["merkleMap"]>

  export type MerkleMapSelectScalar = {
    id?: boolean
    name?: boolean
    root?: boolean
    size?: boolean
    height?: boolean
    createdUtc?: boolean
    updatedUtc?: boolean
  }

  export type MerkleMapInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    leafs?: boolean | MerkleMap$leafsArgs<ExtArgs>
    _count?: boolean | MerkleMapCountOutputTypeArgs<ExtArgs>
  }


  type MerkleMapGetPayload<S extends boolean | null | undefined | MerkleMapArgs> = $Types.GetResult<MerkleMapPayload, S>

  type MerkleMapCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MerkleMapFindManyArgs, 'select' | 'include'> & {
      select?: MerkleMapCountAggregateInputType | true
    }

  export interface MerkleMapDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MerkleMap'], meta: { name: 'MerkleMap' } }
    /**
     * Find zero or one MerkleMap that matches the filter.
     * @param {MerkleMapFindUniqueArgs} args - Arguments to find a MerkleMap
     * @example
     * // Get one MerkleMap
     * const merkleMap = await prisma.merkleMap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MerkleMapFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapFindUniqueArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MerkleMap that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MerkleMapFindUniqueOrThrowArgs} args - Arguments to find a MerkleMap
     * @example
     * // Get one MerkleMap
     * const merkleMap = await prisma.merkleMap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MerkleMapFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MerkleMap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapFindFirstArgs} args - Arguments to find a MerkleMap
     * @example
     * // Get one MerkleMap
     * const merkleMap = await prisma.merkleMap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MerkleMapFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapFindFirstArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MerkleMap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapFindFirstOrThrowArgs} args - Arguments to find a MerkleMap
     * @example
     * // Get one MerkleMap
     * const merkleMap = await prisma.merkleMap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MerkleMapFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MerkleMaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MerkleMaps
     * const merkleMaps = await prisma.merkleMap.findMany()
     * 
     * // Get first 10 MerkleMaps
     * const merkleMaps = await prisma.merkleMap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const merkleMapWithIdOnly = await prisma.merkleMap.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MerkleMapFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MerkleMap.
     * @param {MerkleMapCreateArgs} args - Arguments to create a MerkleMap.
     * @example
     * // Create one MerkleMap
     * const MerkleMap = await prisma.merkleMap.create({
     *   data: {
     *     // ... data to create a MerkleMap
     *   }
     * })
     * 
    **/
    create<T extends MerkleMapCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapCreateArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MerkleMaps.
     *     @param {MerkleMapCreateManyArgs} args - Arguments to create many MerkleMaps.
     *     @example
     *     // Create many MerkleMaps
     *     const merkleMap = await prisma.merkleMap.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MerkleMapCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MerkleMap.
     * @param {MerkleMapDeleteArgs} args - Arguments to delete one MerkleMap.
     * @example
     * // Delete one MerkleMap
     * const MerkleMap = await prisma.merkleMap.delete({
     *   where: {
     *     // ... filter to delete one MerkleMap
     *   }
     * })
     * 
    **/
    delete<T extends MerkleMapDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapDeleteArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MerkleMap.
     * @param {MerkleMapUpdateArgs} args - Arguments to update one MerkleMap.
     * @example
     * // Update one MerkleMap
     * const merkleMap = await prisma.merkleMap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MerkleMapUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapUpdateArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MerkleMaps.
     * @param {MerkleMapDeleteManyArgs} args - Arguments to filter MerkleMaps to delete.
     * @example
     * // Delete a few MerkleMaps
     * const { count } = await prisma.merkleMap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MerkleMapDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MerkleMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MerkleMaps
     * const merkleMap = await prisma.merkleMap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MerkleMapUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MerkleMap.
     * @param {MerkleMapUpsertArgs} args - Arguments to update or create a MerkleMap.
     * @example
     * // Update or create a MerkleMap
     * const merkleMap = await prisma.merkleMap.upsert({
     *   create: {
     *     // ... data to create a MerkleMap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MerkleMap we want to update
     *   }
     * })
    **/
    upsert<T extends MerkleMapUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapUpsertArgs<ExtArgs>>
    ): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MerkleMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapCountArgs} args - Arguments to filter MerkleMaps to count.
     * @example
     * // Count the number of MerkleMaps
     * const count = await prisma.merkleMap.count({
     *   where: {
     *     // ... the filter for the MerkleMaps we want to count
     *   }
     * })
    **/
    count<T extends MerkleMapCountArgs>(
      args?: Subset<T, MerkleMapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerkleMapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MerkleMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerkleMapAggregateArgs>(args: Subset<T, MerkleMapAggregateArgs>): Prisma.PrismaPromise<GetMerkleMapAggregateType<T>>

    /**
     * Group by MerkleMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerkleMapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerkleMapGroupByArgs['orderBy'] }
        : { orderBy?: MerkleMapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerkleMapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerkleMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MerkleMap model
   */
  readonly fields: MerkleMapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MerkleMap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MerkleMapClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    leafs<T extends MerkleMap$leafsArgs<ExtArgs> = {}>(args?: Subset<T, MerkleMap$leafsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the MerkleMap model
   */ 
  interface MerkleMapFieldRefs {
    readonly id: FieldRef<"MerkleMap", 'Int'>
    readonly name: FieldRef<"MerkleMap", 'String'>
    readonly root: FieldRef<"MerkleMap", 'BigInt'>
    readonly size: FieldRef<"MerkleMap", 'Int'>
    readonly height: FieldRef<"MerkleMap", 'Int'>
    readonly createdUtc: FieldRef<"MerkleMap", 'DateTime'>
    readonly updatedUtc: FieldRef<"MerkleMap", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MerkleMap findUnique
   */
  export type MerkleMapFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMap to fetch.
     */
    where: MerkleMapWhereUniqueInput
  }


  /**
   * MerkleMap findUniqueOrThrow
   */
  export type MerkleMapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMap to fetch.
     */
    where: MerkleMapWhereUniqueInput
  }


  /**
   * MerkleMap findFirst
   */
  export type MerkleMapFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMap to fetch.
     */
    where?: MerkleMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMaps to fetch.
     */
    orderBy?: MerkleMapOrderByWithRelationInput | MerkleMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerkleMaps.
     */
    cursor?: MerkleMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerkleMaps.
     */
    distinct?: MerkleMapScalarFieldEnum | MerkleMapScalarFieldEnum[]
  }


  /**
   * MerkleMap findFirstOrThrow
   */
  export type MerkleMapFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMap to fetch.
     */
    where?: MerkleMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMaps to fetch.
     */
    orderBy?: MerkleMapOrderByWithRelationInput | MerkleMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerkleMaps.
     */
    cursor?: MerkleMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerkleMaps.
     */
    distinct?: MerkleMapScalarFieldEnum | MerkleMapScalarFieldEnum[]
  }


  /**
   * MerkleMap findMany
   */
  export type MerkleMapFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMaps to fetch.
     */
    where?: MerkleMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMaps to fetch.
     */
    orderBy?: MerkleMapOrderByWithRelationInput | MerkleMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MerkleMaps.
     */
    cursor?: MerkleMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMaps.
     */
    skip?: number
    distinct?: MerkleMapScalarFieldEnum | MerkleMapScalarFieldEnum[]
  }


  /**
   * MerkleMap create
   */
  export type MerkleMapCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * The data needed to create a MerkleMap.
     */
    data: XOR<MerkleMapCreateInput, MerkleMapUncheckedCreateInput>
  }


  /**
   * MerkleMap createMany
   */
  export type MerkleMapCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MerkleMaps.
     */
    data: MerkleMapCreateManyInput | MerkleMapCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MerkleMap update
   */
  export type MerkleMapUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * The data needed to update a MerkleMap.
     */
    data: XOR<MerkleMapUpdateInput, MerkleMapUncheckedUpdateInput>
    /**
     * Choose, which MerkleMap to update.
     */
    where: MerkleMapWhereUniqueInput
  }


  /**
   * MerkleMap updateMany
   */
  export type MerkleMapUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MerkleMaps.
     */
    data: XOR<MerkleMapUpdateManyMutationInput, MerkleMapUncheckedUpdateManyInput>
    /**
     * Filter which MerkleMaps to update
     */
    where?: MerkleMapWhereInput
  }


  /**
   * MerkleMap upsert
   */
  export type MerkleMapUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * The filter to search for the MerkleMap to update in case it exists.
     */
    where: MerkleMapWhereUniqueInput
    /**
     * In case the MerkleMap found by the `where` argument doesn't exist, create a new MerkleMap with this data.
     */
    create: XOR<MerkleMapCreateInput, MerkleMapUncheckedCreateInput>
    /**
     * In case the MerkleMap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerkleMapUpdateInput, MerkleMapUncheckedUpdateInput>
  }


  /**
   * MerkleMap delete
   */
  export type MerkleMapDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
    /**
     * Filter which MerkleMap to delete.
     */
    where: MerkleMapWhereUniqueInput
  }


  /**
   * MerkleMap deleteMany
   */
  export type MerkleMapDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerkleMaps to delete
     */
    where?: MerkleMapWhereInput
  }


  /**
   * MerkleMap.leafs
   */
  export type MerkleMap$leafsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    where?: MerkleMapLeafWhereInput
    orderBy?: MerkleMapLeafOrderByWithRelationInput | MerkleMapLeafOrderByWithRelationInput[]
    cursor?: MerkleMapLeafWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MerkleMapLeafScalarFieldEnum | MerkleMapLeafScalarFieldEnum[]
  }


  /**
   * MerkleMap without action
   */
  export type MerkleMapArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMap
     */
    select?: MerkleMapSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapInclude<ExtArgs> | null
  }



  /**
   * Model MerkleMapLeaf
   */


  export type AggregateMerkleMapLeaf = {
    _count: MerkleMapLeafCountAggregateOutputType | null
    _avg: MerkleMapLeafAvgAggregateOutputType | null
    _sum: MerkleMapLeafSumAggregateOutputType | null
    _min: MerkleMapLeafMinAggregateOutputType | null
    _max: MerkleMapLeafMaxAggregateOutputType | null
  }

  export type MerkleMapLeafAvgAggregateOutputType = {
    mapId: number | null
    index: number | null
  }

  export type MerkleMapLeafSumAggregateOutputType = {
    mapId: number | null
    index: bigint | null
  }

  export type MerkleMapLeafMinAggregateOutputType = {
    uid: string | null
    mapId: number | null
    index: bigint | null
    key: string | null
    hash: string | null
    data: string | null
    createdUtc: Date | null
    updatedUtc: Date | null
  }

  export type MerkleMapLeafMaxAggregateOutputType = {
    uid: string | null
    mapId: number | null
    index: bigint | null
    key: string | null
    hash: string | null
    data: string | null
    createdUtc: Date | null
    updatedUtc: Date | null
  }

  export type MerkleMapLeafCountAggregateOutputType = {
    uid: number
    mapId: number
    index: number
    key: number
    hash: number
    data: number
    createdUtc: number
    updatedUtc: number
    _all: number
  }


  export type MerkleMapLeafAvgAggregateInputType = {
    mapId?: true
    index?: true
  }

  export type MerkleMapLeafSumAggregateInputType = {
    mapId?: true
    index?: true
  }

  export type MerkleMapLeafMinAggregateInputType = {
    uid?: true
    mapId?: true
    index?: true
    key?: true
    hash?: true
    data?: true
    createdUtc?: true
    updatedUtc?: true
  }

  export type MerkleMapLeafMaxAggregateInputType = {
    uid?: true
    mapId?: true
    index?: true
    key?: true
    hash?: true
    data?: true
    createdUtc?: true
    updatedUtc?: true
  }

  export type MerkleMapLeafCountAggregateInputType = {
    uid?: true
    mapId?: true
    index?: true
    key?: true
    hash?: true
    data?: true
    createdUtc?: true
    updatedUtc?: true
    _all?: true
  }

  export type MerkleMapLeafAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerkleMapLeaf to aggregate.
     */
    where?: MerkleMapLeafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMapLeaves to fetch.
     */
    orderBy?: MerkleMapLeafOrderByWithRelationInput | MerkleMapLeafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerkleMapLeafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMapLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMapLeaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MerkleMapLeaves
    **/
    _count?: true | MerkleMapLeafCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MerkleMapLeafAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MerkleMapLeafSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerkleMapLeafMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerkleMapLeafMaxAggregateInputType
  }

  export type GetMerkleMapLeafAggregateType<T extends MerkleMapLeafAggregateArgs> = {
        [P in keyof T & keyof AggregateMerkleMapLeaf]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerkleMapLeaf[P]>
      : GetScalarType<T[P], AggregateMerkleMapLeaf[P]>
  }




  export type MerkleMapLeafGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MerkleMapLeafWhereInput
    orderBy?: MerkleMapLeafOrderByWithAggregationInput | MerkleMapLeafOrderByWithAggregationInput[]
    by: MerkleMapLeafScalarFieldEnum[] | MerkleMapLeafScalarFieldEnum
    having?: MerkleMapLeafScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerkleMapLeafCountAggregateInputType | true
    _avg?: MerkleMapLeafAvgAggregateInputType
    _sum?: MerkleMapLeafSumAggregateInputType
    _min?: MerkleMapLeafMinAggregateInputType
    _max?: MerkleMapLeafMaxAggregateInputType
  }


  export type MerkleMapLeafGroupByOutputType = {
    uid: string
    mapId: number
    index: bigint
    key: string
    hash: string
    data: string | null
    createdUtc: Date
    updatedUtc: Date
    _count: MerkleMapLeafCountAggregateOutputType | null
    _avg: MerkleMapLeafAvgAggregateOutputType | null
    _sum: MerkleMapLeafSumAggregateOutputType | null
    _min: MerkleMapLeafMinAggregateOutputType | null
    _max: MerkleMapLeafMaxAggregateOutputType | null
  }

  type GetMerkleMapLeafGroupByPayload<T extends MerkleMapLeafGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerkleMapLeafGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerkleMapLeafGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerkleMapLeafGroupByOutputType[P]>
            : GetScalarType<T[P], MerkleMapLeafGroupByOutputType[P]>
        }
      >
    >


  export type MerkleMapLeafSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    mapId?: boolean
    index?: boolean
    key?: boolean
    hash?: boolean
    data?: boolean
    createdUtc?: boolean
    updatedUtc?: boolean
    map?: boolean | MerkleMapArgs<ExtArgs>
  }, ExtArgs["result"]["merkleMapLeaf"]>

  export type MerkleMapLeafSelectScalar = {
    uid?: boolean
    mapId?: boolean
    index?: boolean
    key?: boolean
    hash?: boolean
    data?: boolean
    createdUtc?: boolean
    updatedUtc?: boolean
  }

  export type MerkleMapLeafInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    map?: boolean | MerkleMapArgs<ExtArgs>
  }


  type MerkleMapLeafGetPayload<S extends boolean | null | undefined | MerkleMapLeafArgs> = $Types.GetResult<MerkleMapLeafPayload, S>

  type MerkleMapLeafCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MerkleMapLeafFindManyArgs, 'select' | 'include'> & {
      select?: MerkleMapLeafCountAggregateInputType | true
    }

  export interface MerkleMapLeafDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MerkleMapLeaf'], meta: { name: 'MerkleMapLeaf' } }
    /**
     * Find zero or one MerkleMapLeaf that matches the filter.
     * @param {MerkleMapLeafFindUniqueArgs} args - Arguments to find a MerkleMapLeaf
     * @example
     * // Get one MerkleMapLeaf
     * const merkleMapLeaf = await prisma.merkleMapLeaf.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MerkleMapLeafFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapLeafFindUniqueArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MerkleMapLeaf that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MerkleMapLeafFindUniqueOrThrowArgs} args - Arguments to find a MerkleMapLeaf
     * @example
     * // Get one MerkleMapLeaf
     * const merkleMapLeaf = await prisma.merkleMapLeaf.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MerkleMapLeafFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapLeafFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MerkleMapLeaf that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapLeafFindFirstArgs} args - Arguments to find a MerkleMapLeaf
     * @example
     * // Get one MerkleMapLeaf
     * const merkleMapLeaf = await prisma.merkleMapLeaf.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MerkleMapLeafFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapLeafFindFirstArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MerkleMapLeaf that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapLeafFindFirstOrThrowArgs} args - Arguments to find a MerkleMapLeaf
     * @example
     * // Get one MerkleMapLeaf
     * const merkleMapLeaf = await prisma.merkleMapLeaf.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MerkleMapLeafFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapLeafFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MerkleMapLeaves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapLeafFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MerkleMapLeaves
     * const merkleMapLeaves = await prisma.merkleMapLeaf.findMany()
     * 
     * // Get first 10 MerkleMapLeaves
     * const merkleMapLeaves = await prisma.merkleMapLeaf.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const merkleMapLeafWithUidOnly = await prisma.merkleMapLeaf.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends MerkleMapLeafFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapLeafFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MerkleMapLeaf.
     * @param {MerkleMapLeafCreateArgs} args - Arguments to create a MerkleMapLeaf.
     * @example
     * // Create one MerkleMapLeaf
     * const MerkleMapLeaf = await prisma.merkleMapLeaf.create({
     *   data: {
     *     // ... data to create a MerkleMapLeaf
     *   }
     * })
     * 
    **/
    create<T extends MerkleMapLeafCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapLeafCreateArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MerkleMapLeaves.
     *     @param {MerkleMapLeafCreateManyArgs} args - Arguments to create many MerkleMapLeaves.
     *     @example
     *     // Create many MerkleMapLeaves
     *     const merkleMapLeaf = await prisma.merkleMapLeaf.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MerkleMapLeafCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapLeafCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MerkleMapLeaf.
     * @param {MerkleMapLeafDeleteArgs} args - Arguments to delete one MerkleMapLeaf.
     * @example
     * // Delete one MerkleMapLeaf
     * const MerkleMapLeaf = await prisma.merkleMapLeaf.delete({
     *   where: {
     *     // ... filter to delete one MerkleMapLeaf
     *   }
     * })
     * 
    **/
    delete<T extends MerkleMapLeafDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapLeafDeleteArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MerkleMapLeaf.
     * @param {MerkleMapLeafUpdateArgs} args - Arguments to update one MerkleMapLeaf.
     * @example
     * // Update one MerkleMapLeaf
     * const merkleMapLeaf = await prisma.merkleMapLeaf.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MerkleMapLeafUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapLeafUpdateArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MerkleMapLeaves.
     * @param {MerkleMapLeafDeleteManyArgs} args - Arguments to filter MerkleMapLeaves to delete.
     * @example
     * // Delete a few MerkleMapLeaves
     * const { count } = await prisma.merkleMapLeaf.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MerkleMapLeafDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MerkleMapLeafDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MerkleMapLeaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapLeafUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MerkleMapLeaves
     * const merkleMapLeaf = await prisma.merkleMapLeaf.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MerkleMapLeafUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapLeafUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MerkleMapLeaf.
     * @param {MerkleMapLeafUpsertArgs} args - Arguments to update or create a MerkleMapLeaf.
     * @example
     * // Update or create a MerkleMapLeaf
     * const merkleMapLeaf = await prisma.merkleMapLeaf.upsert({
     *   create: {
     *     // ... data to create a MerkleMapLeaf
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MerkleMapLeaf we want to update
     *   }
     * })
    **/
    upsert<T extends MerkleMapLeafUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MerkleMapLeafUpsertArgs<ExtArgs>>
    ): Prisma__MerkleMapLeafClient<$Types.GetResult<MerkleMapLeafPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MerkleMapLeaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapLeafCountArgs} args - Arguments to filter MerkleMapLeaves to count.
     * @example
     * // Count the number of MerkleMapLeaves
     * const count = await prisma.merkleMapLeaf.count({
     *   where: {
     *     // ... the filter for the MerkleMapLeaves we want to count
     *   }
     * })
    **/
    count<T extends MerkleMapLeafCountArgs>(
      args?: Subset<T, MerkleMapLeafCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerkleMapLeafCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MerkleMapLeaf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapLeafAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerkleMapLeafAggregateArgs>(args: Subset<T, MerkleMapLeafAggregateArgs>): Prisma.PrismaPromise<GetMerkleMapLeafAggregateType<T>>

    /**
     * Group by MerkleMapLeaf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerkleMapLeafGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerkleMapLeafGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerkleMapLeafGroupByArgs['orderBy'] }
        : { orderBy?: MerkleMapLeafGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerkleMapLeafGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerkleMapLeafGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MerkleMapLeaf model
   */
  readonly fields: MerkleMapLeafFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MerkleMapLeaf.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MerkleMapLeafClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    map<T extends MerkleMapArgs<ExtArgs> = {}>(args?: Subset<T, MerkleMapArgs<ExtArgs>>): Prisma__MerkleMapClient<$Types.GetResult<MerkleMapPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the MerkleMapLeaf model
   */ 
  interface MerkleMapLeafFieldRefs {
    readonly uid: FieldRef<"MerkleMapLeaf", 'String'>
    readonly mapId: FieldRef<"MerkleMapLeaf", 'Int'>
    readonly index: FieldRef<"MerkleMapLeaf", 'BigInt'>
    readonly key: FieldRef<"MerkleMapLeaf", 'String'>
    readonly hash: FieldRef<"MerkleMapLeaf", 'String'>
    readonly data: FieldRef<"MerkleMapLeaf", 'String'>
    readonly createdUtc: FieldRef<"MerkleMapLeaf", 'DateTime'>
    readonly updatedUtc: FieldRef<"MerkleMapLeaf", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MerkleMapLeaf findUnique
   */
  export type MerkleMapLeafFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMapLeaf to fetch.
     */
    where: MerkleMapLeafWhereUniqueInput
  }


  /**
   * MerkleMapLeaf findUniqueOrThrow
   */
  export type MerkleMapLeafFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMapLeaf to fetch.
     */
    where: MerkleMapLeafWhereUniqueInput
  }


  /**
   * MerkleMapLeaf findFirst
   */
  export type MerkleMapLeafFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMapLeaf to fetch.
     */
    where?: MerkleMapLeafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMapLeaves to fetch.
     */
    orderBy?: MerkleMapLeafOrderByWithRelationInput | MerkleMapLeafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerkleMapLeaves.
     */
    cursor?: MerkleMapLeafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMapLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMapLeaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerkleMapLeaves.
     */
    distinct?: MerkleMapLeafScalarFieldEnum | MerkleMapLeafScalarFieldEnum[]
  }


  /**
   * MerkleMapLeaf findFirstOrThrow
   */
  export type MerkleMapLeafFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMapLeaf to fetch.
     */
    where?: MerkleMapLeafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMapLeaves to fetch.
     */
    orderBy?: MerkleMapLeafOrderByWithRelationInput | MerkleMapLeafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MerkleMapLeaves.
     */
    cursor?: MerkleMapLeafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMapLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMapLeaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MerkleMapLeaves.
     */
    distinct?: MerkleMapLeafScalarFieldEnum | MerkleMapLeafScalarFieldEnum[]
  }


  /**
   * MerkleMapLeaf findMany
   */
  export type MerkleMapLeafFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * Filter, which MerkleMapLeaves to fetch.
     */
    where?: MerkleMapLeafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MerkleMapLeaves to fetch.
     */
    orderBy?: MerkleMapLeafOrderByWithRelationInput | MerkleMapLeafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MerkleMapLeaves.
     */
    cursor?: MerkleMapLeafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MerkleMapLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MerkleMapLeaves.
     */
    skip?: number
    distinct?: MerkleMapLeafScalarFieldEnum | MerkleMapLeafScalarFieldEnum[]
  }


  /**
   * MerkleMapLeaf create
   */
  export type MerkleMapLeafCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * The data needed to create a MerkleMapLeaf.
     */
    data: XOR<MerkleMapLeafCreateInput, MerkleMapLeafUncheckedCreateInput>
  }


  /**
   * MerkleMapLeaf createMany
   */
  export type MerkleMapLeafCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MerkleMapLeaves.
     */
    data: MerkleMapLeafCreateManyInput | MerkleMapLeafCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MerkleMapLeaf update
   */
  export type MerkleMapLeafUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * The data needed to update a MerkleMapLeaf.
     */
    data: XOR<MerkleMapLeafUpdateInput, MerkleMapLeafUncheckedUpdateInput>
    /**
     * Choose, which MerkleMapLeaf to update.
     */
    where: MerkleMapLeafWhereUniqueInput
  }


  /**
   * MerkleMapLeaf updateMany
   */
  export type MerkleMapLeafUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MerkleMapLeaves.
     */
    data: XOR<MerkleMapLeafUpdateManyMutationInput, MerkleMapLeafUncheckedUpdateManyInput>
    /**
     * Filter which MerkleMapLeaves to update
     */
    where?: MerkleMapLeafWhereInput
  }


  /**
   * MerkleMapLeaf upsert
   */
  export type MerkleMapLeafUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * The filter to search for the MerkleMapLeaf to update in case it exists.
     */
    where: MerkleMapLeafWhereUniqueInput
    /**
     * In case the MerkleMapLeaf found by the `where` argument doesn't exist, create a new MerkleMapLeaf with this data.
     */
    create: XOR<MerkleMapLeafCreateInput, MerkleMapLeafUncheckedCreateInput>
    /**
     * In case the MerkleMapLeaf was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerkleMapLeafUpdateInput, MerkleMapLeafUncheckedUpdateInput>
  }


  /**
   * MerkleMapLeaf delete
   */
  export type MerkleMapLeafDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
    /**
     * Filter which MerkleMapLeaf to delete.
     */
    where: MerkleMapLeafWhereUniqueInput
  }


  /**
   * MerkleMapLeaf deleteMany
   */
  export type MerkleMapLeafDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MerkleMapLeaves to delete
     */
    where?: MerkleMapLeafWhereInput
  }


  /**
   * MerkleMapLeaf without action
   */
  export type MerkleMapLeafArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerkleMapLeaf
     */
    select?: MerkleMapLeafSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MerkleMapLeafInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    uid: string | null
    otp: string | null
    email: string | null
    createdUtc: Date | null
    updatedUtc: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    uid: string | null
    otp: string | null
    email: string | null
    createdUtc: Date | null
    updatedUtc: Date | null
  }

  export type SessionCountAggregateOutputType = {
    uid: number
    otp: number
    email: number
    createdUtc: number
    updatedUtc: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    uid?: true
    otp?: true
    email?: true
    createdUtc?: true
    updatedUtc?: true
  }

  export type SessionMaxAggregateInputType = {
    uid?: true
    otp?: true
    email?: true
    createdUtc?: true
    updatedUtc?: true
  }

  export type SessionCountAggregateInputType = {
    uid?: true
    otp?: true
    email?: true
    createdUtc?: true
    updatedUtc?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    uid: string
    otp: string
    email: string
    createdUtc: Date
    updatedUtc: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    otp?: boolean
    email?: boolean
    createdUtc?: boolean
    updatedUtc?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    uid?: boolean
    otp?: boolean
    email?: boolean
    createdUtc?: boolean
    updatedUtc?: boolean
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> = $Types.GetResult<SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const sessionWithUidOnly = await prisma.session.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly uid: FieldRef<"Session", 'String'>
    readonly otp: FieldRef<"Session", 'String'>
    readonly email: FieldRef<"Session", 'String'>
    readonly createdUtc: FieldRef<"Session", 'DateTime'>
    readonly updatedUtc: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }



  /**
   * Model Person
   */


  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonMinAggregateOutputType = {
    uid: string | null
    accountId: string | null
    state: string | null
    fullName: string | null
    description: string | null
    image: string | null
    email: string | null
    phone: string | null
    telegram: string | null
    preferences: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    approvedUTC: Date | null
  }

  export type PersonMaxAggregateOutputType = {
    uid: string | null
    accountId: string | null
    state: string | null
    fullName: string | null
    description: string | null
    image: string | null
    email: string | null
    phone: string | null
    telegram: string | null
    preferences: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    approvedUTC: Date | null
  }

  export type PersonCountAggregateOutputType = {
    uid: number
    accountId: number
    state: number
    fullName: number
    description: number
    image: number
    email: number
    phone: number
    telegram: number
    preferences: number
    createdUTC: number
    updatedUTC: number
    approvedUTC: number
    _all: number
  }


  export type PersonMinAggregateInputType = {
    uid?: true
    accountId?: true
    state?: true
    fullName?: true
    description?: true
    image?: true
    email?: true
    phone?: true
    telegram?: true
    preferences?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
  }

  export type PersonMaxAggregateInputType = {
    uid?: true
    accountId?: true
    state?: true
    fullName?: true
    description?: true
    image?: true
    email?: true
    phone?: true
    telegram?: true
    preferences?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
  }

  export type PersonCountAggregateInputType = {
    uid?: true
    accountId?: true
    state?: true
    fullName?: true
    description?: true
    image?: true
    email?: true
    phone?: true
    telegram?: true
    preferences?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }


  export type PersonGroupByOutputType = {
    uid: string
    accountId: string | null
    state: string
    fullName: string
    description: string | null
    image: string | null
    email: string
    phone: string | null
    telegram: string | null
    preferences: string | null
    createdUTC: Date
    updatedUTC: Date | null
    approvedUTC: Date | null
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    accountId?: boolean
    state?: boolean
    fullName?: boolean
    description?: boolean
    image?: boolean
    email?: boolean
    phone?: boolean
    telegram?: boolean
    preferences?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    approvedUTC?: boolean
  }, ExtArgs["result"]["person"]>

  export type PersonSelectScalar = {
    uid?: boolean
    accountId?: boolean
    state?: boolean
    fullName?: boolean
    description?: boolean
    image?: boolean
    email?: boolean
    phone?: boolean
    telegram?: boolean
    preferences?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    approvedUTC?: boolean
  }


  type PersonGetPayload<S extends boolean | null | undefined | PersonArgs> = $Types.GetResult<PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PersonFindManyArgs, 'select' | 'include'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Person that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const personWithUidOnly = await prisma.person.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends PersonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PersonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
    **/
    create<T extends PersonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonCreateArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many People.
     *     @param {PersonCreateManyArgs} args - Arguments to create many People.
     *     @example
     *     // Create many People
     *     const person = await prisma.person.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PersonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
    **/
    delete<T extends PersonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
    **/
    upsert<T extends PersonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>
    ): Prisma__PersonClient<$Types.GetResult<PersonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Person model
   */ 
  interface PersonFieldRefs {
    readonly uid: FieldRef<"Person", 'String'>
    readonly accountId: FieldRef<"Person", 'String'>
    readonly state: FieldRef<"Person", 'String'>
    readonly fullName: FieldRef<"Person", 'String'>
    readonly description: FieldRef<"Person", 'String'>
    readonly image: FieldRef<"Person", 'String'>
    readonly email: FieldRef<"Person", 'String'>
    readonly phone: FieldRef<"Person", 'String'>
    readonly telegram: FieldRef<"Person", 'String'>
    readonly preferences: FieldRef<"Person", 'String'>
    readonly createdUTC: FieldRef<"Person", 'DateTime'>
    readonly updatedUTC: FieldRef<"Person", 'DateTime'>
    readonly approvedUTC: FieldRef<"Person", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }


  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }


  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }


  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }


  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
  }


  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }


  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
  }


  /**
   * Person without action
   */
  export type PersonArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
  }



  /**
   * Model Community
   */


  export type AggregateCommunity = {
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  export type CommunityMinAggregateOutputType = {
    uid: string | null
    accountId: string | null
    adminUid: string | null
    state: string | null
    name: string | null
    description: string | null
    image: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    approvedUTC: Date | null
    xadmins: string | null
  }

  export type CommunityMaxAggregateOutputType = {
    uid: string | null
    accountId: string | null
    adminUid: string | null
    state: string | null
    name: string | null
    description: string | null
    image: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    approvedUTC: Date | null
    xadmins: string | null
  }

  export type CommunityCountAggregateOutputType = {
    uid: number
    accountId: number
    adminUid: number
    state: number
    name: number
    description: number
    image: number
    createdUTC: number
    updatedUTC: number
    approvedUTC: number
    xadmins: number
    _all: number
  }


  export type CommunityMinAggregateInputType = {
    uid?: true
    accountId?: true
    adminUid?: true
    state?: true
    name?: true
    description?: true
    image?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
    xadmins?: true
  }

  export type CommunityMaxAggregateInputType = {
    uid?: true
    accountId?: true
    adminUid?: true
    state?: true
    name?: true
    description?: true
    image?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
    xadmins?: true
  }

  export type CommunityCountAggregateInputType = {
    uid?: true
    accountId?: true
    adminUid?: true
    state?: true
    name?: true
    description?: true
    image?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
    xadmins?: true
    _all?: true
  }

  export type CommunityAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Community to aggregate.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communities
    **/
    _count?: true | CommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMaxAggregateInputType
  }

  export type GetCommunityAggregateType<T extends CommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunity[P]>
      : GetScalarType<T[P], AggregateCommunity[P]>
  }




  export type CommunityGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommunityWhereInput
    orderBy?: CommunityOrderByWithAggregationInput | CommunityOrderByWithAggregationInput[]
    by: CommunityScalarFieldEnum[] | CommunityScalarFieldEnum
    having?: CommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityCountAggregateInputType | true
    _min?: CommunityMinAggregateInputType
    _max?: CommunityMaxAggregateInputType
  }


  export type CommunityGroupByOutputType = {
    uid: string
    accountId: string | null
    adminUid: string
    state: string
    name: string
    description: string | null
    image: string | null
    createdUTC: Date
    updatedUTC: Date
    approvedUTC: Date | null
    xadmins: string | null
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  type GetCommunityGroupByPayload<T extends CommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityGroupByOutputType[P]>
        }
      >
    >


  export type CommunitySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    accountId?: boolean
    adminUid?: boolean
    state?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    approvedUTC?: boolean
    xadmins?: boolean
  }, ExtArgs["result"]["community"]>

  export type CommunitySelectScalar = {
    uid?: boolean
    accountId?: boolean
    adminUid?: boolean
    state?: boolean
    name?: boolean
    description?: boolean
    image?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    approvedUTC?: boolean
    xadmins?: boolean
  }


  type CommunityGetPayload<S extends boolean | null | undefined | CommunityArgs> = $Types.GetResult<CommunityPayload, S>

  type CommunityCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CommunityFindManyArgs, 'select' | 'include'> & {
      select?: CommunityCountAggregateInputType | true
    }

  export interface CommunityDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Community'], meta: { name: 'Community' } }
    /**
     * Find zero or one Community that matches the filter.
     * @param {CommunityFindUniqueArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommunityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityFindUniqueArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Community that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommunityFindUniqueOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommunityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommunityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindFirstArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Community that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommunityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communities
     * const communities = await prisma.community.findMany()
     * 
     * // Get first 10 Communities
     * const communities = await prisma.community.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const communityWithUidOnly = await prisma.community.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends CommunityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Community.
     * @param {CommunityCreateArgs} args - Arguments to create a Community.
     * @example
     * // Create one Community
     * const Community = await prisma.community.create({
     *   data: {
     *     // ... data to create a Community
     *   }
     * })
     * 
    **/
    create<T extends CommunityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityCreateArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Communities.
     *     @param {CommunityCreateManyArgs} args - Arguments to create many Communities.
     *     @example
     *     // Create many Communities
     *     const community = await prisma.community.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommunityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Community.
     * @param {CommunityDeleteArgs} args - Arguments to delete one Community.
     * @example
     * // Delete one Community
     * const Community = await prisma.community.delete({
     *   where: {
     *     // ... filter to delete one Community
     *   }
     * })
     * 
    **/
    delete<T extends CommunityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityDeleteArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Community.
     * @param {CommunityUpdateArgs} args - Arguments to update one Community.
     * @example
     * // Update one Community
     * const community = await prisma.community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommunityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityUpdateArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Communities.
     * @param {CommunityDeleteManyArgs} args - Arguments to filter Communities to delete.
     * @example
     * // Delete a few Communities
     * const { count } = await prisma.community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommunityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommunityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Community.
     * @param {CommunityUpsertArgs} args - Arguments to update or create a Community.
     * @example
     * // Update or create a Community
     * const community = await prisma.community.upsert({
     *   create: {
     *     // ... data to create a Community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Community we want to update
     *   }
     * })
    **/
    upsert<T extends CommunityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityUpsertArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Types.GetResult<CommunityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityCountArgs} args - Arguments to filter Communities to count.
     * @example
     * // Count the number of Communities
     * const count = await prisma.community.count({
     *   where: {
     *     // ... the filter for the Communities we want to count
     *   }
     * })
    **/
    count<T extends CommunityCountArgs>(
      args?: Subset<T, CommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAggregateArgs>(args: Subset<T, CommunityAggregateArgs>): Prisma.PrismaPromise<GetCommunityAggregateType<T>>

    /**
     * Group by Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityGroupByArgs['orderBy'] }
        : { orderBy?: CommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Community model
   */
  readonly fields: CommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommunityClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Community model
   */ 
  interface CommunityFieldRefs {
    readonly uid: FieldRef<"Community", 'String'>
    readonly accountId: FieldRef<"Community", 'String'>
    readonly adminUid: FieldRef<"Community", 'String'>
    readonly state: FieldRef<"Community", 'String'>
    readonly name: FieldRef<"Community", 'String'>
    readonly description: FieldRef<"Community", 'String'>
    readonly image: FieldRef<"Community", 'String'>
    readonly createdUTC: FieldRef<"Community", 'DateTime'>
    readonly updatedUTC: FieldRef<"Community", 'DateTime'>
    readonly approvedUTC: FieldRef<"Community", 'DateTime'>
    readonly xadmins: FieldRef<"Community", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Community findUnique
   */
  export type CommunityFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }


  /**
   * Community findUniqueOrThrow
   */
  export type CommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }


  /**
   * Community findFirst
   */
  export type CommunityFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }


  /**
   * Community findFirstOrThrow
   */
  export type CommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }


  /**
   * Community findMany
   */
  export type CommunityFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Filter, which Communities to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }


  /**
   * Community create
   */
  export type CommunityCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * The data needed to create a Community.
     */
    data: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
  }


  /**
   * Community createMany
   */
  export type CommunityCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Communities.
     */
    data: CommunityCreateManyInput | CommunityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Community update
   */
  export type CommunityUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * The data needed to update a Community.
     */
    data: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
    /**
     * Choose, which Community to update.
     */
    where: CommunityWhereUniqueInput
  }


  /**
   * Community updateMany
   */
  export type CommunityUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Communities.
     */
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyInput>
    /**
     * Filter which Communities to update
     */
    where?: CommunityWhereInput
  }


  /**
   * Community upsert
   */
  export type CommunityUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * The filter to search for the Community to update in case it exists.
     */
    where: CommunityWhereUniqueInput
    /**
     * In case the Community found by the `where` argument doesn't exist, create a new Community with this data.
     */
    create: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
    /**
     * In case the Community was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
  }


  /**
   * Community delete
   */
  export type CommunityDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Filter which Community to delete.
     */
    where: CommunityWhereUniqueInput
  }


  /**
   * Community deleteMany
   */
  export type CommunityDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communities to delete
     */
    where?: CommunityWhereInput
  }


  /**
   * Community without action
   */
  export type CommunityArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
  }



  /**
   * Model Members
   */


  export type AggregateMembers = {
    _count: MembersCountAggregateOutputType | null
    _min: MembersMinAggregateOutputType | null
    _max: MembersMaxAggregateOutputType | null
  }

  export type MembersMinAggregateOutputType = {
    uid: string | null
    communityUid: string | null
    personUid: string | null
    role: string | null
    createdUTC: Date | null
    approvedUTC: Date | null
  }

  export type MembersMaxAggregateOutputType = {
    uid: string | null
    communityUid: string | null
    personUid: string | null
    role: string | null
    createdUTC: Date | null
    approvedUTC: Date | null
  }

  export type MembersCountAggregateOutputType = {
    uid: number
    communityUid: number
    personUid: number
    role: number
    createdUTC: number
    approvedUTC: number
    _all: number
  }


  export type MembersMinAggregateInputType = {
    uid?: true
    communityUid?: true
    personUid?: true
    role?: true
    createdUTC?: true
    approvedUTC?: true
  }

  export type MembersMaxAggregateInputType = {
    uid?: true
    communityUid?: true
    personUid?: true
    role?: true
    createdUTC?: true
    approvedUTC?: true
  }

  export type MembersCountAggregateInputType = {
    uid?: true
    communityUid?: true
    personUid?: true
    role?: true
    createdUTC?: true
    approvedUTC?: true
    _all?: true
  }

  export type MembersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to aggregate.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembersMaxAggregateInputType
  }

  export type GetMembersAggregateType<T extends MembersAggregateArgs> = {
        [P in keyof T & keyof AggregateMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembers[P]>
      : GetScalarType<T[P], AggregateMembers[P]>
  }




  export type MembersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MembersWhereInput
    orderBy?: MembersOrderByWithAggregationInput | MembersOrderByWithAggregationInput[]
    by: MembersScalarFieldEnum[] | MembersScalarFieldEnum
    having?: MembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembersCountAggregateInputType | true
    _min?: MembersMinAggregateInputType
    _max?: MembersMaxAggregateInputType
  }


  export type MembersGroupByOutputType = {
    uid: string
    communityUid: string
    personUid: string
    role: string
    createdUTC: Date
    approvedUTC: Date | null
    _count: MembersCountAggregateOutputType | null
    _min: MembersMinAggregateOutputType | null
    _max: MembersMaxAggregateOutputType | null
  }

  type GetMembersGroupByPayload<T extends MembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembersGroupByOutputType[P]>
            : GetScalarType<T[P], MembersGroupByOutputType[P]>
        }
      >
    >


  export type MembersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    communityUid?: boolean
    personUid?: boolean
    role?: boolean
    createdUTC?: boolean
    approvedUTC?: boolean
  }, ExtArgs["result"]["members"]>

  export type MembersSelectScalar = {
    uid?: boolean
    communityUid?: boolean
    personUid?: boolean
    role?: boolean
    createdUTC?: boolean
    approvedUTC?: boolean
  }


  type MembersGetPayload<S extends boolean | null | undefined | MembersArgs> = $Types.GetResult<MembersPayload, S>

  type MembersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MembersFindManyArgs, 'select' | 'include'> & {
      select?: MembersCountAggregateInputType | true
    }

  export interface MembersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Members'], meta: { name: 'Members' } }
    /**
     * Find zero or one Members that matches the filter.
     * @param {MembersFindUniqueArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MembersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MembersFindUniqueArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Members that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MembersFindUniqueOrThrowArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MembersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindFirstArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MembersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindFirstArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Members that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindFirstOrThrowArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MembersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.members.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.members.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const membersWithUidOnly = await prisma.members.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends MembersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MembersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Members.
     * @param {MembersCreateArgs} args - Arguments to create a Members.
     * @example
     * // Create one Members
     * const Members = await prisma.members.create({
     *   data: {
     *     // ... data to create a Members
     *   }
     * })
     * 
    **/
    create<T extends MembersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MembersCreateArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Members.
     *     @param {MembersCreateManyArgs} args - Arguments to create many Members.
     *     @example
     *     // Create many Members
     *     const members = await prisma.members.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MembersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Members.
     * @param {MembersDeleteArgs} args - Arguments to delete one Members.
     * @example
     * // Delete one Members
     * const Members = await prisma.members.delete({
     *   where: {
     *     // ... filter to delete one Members
     *   }
     * })
     * 
    **/
    delete<T extends MembersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MembersDeleteArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Members.
     * @param {MembersUpdateArgs} args - Arguments to update one Members.
     * @example
     * // Update one Members
     * const members = await prisma.members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MembersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MembersUpdateArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Members.
     * @param {MembersDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MembersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const members = await prisma.members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MembersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MembersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Members.
     * @param {MembersUpsertArgs} args - Arguments to update or create a Members.
     * @example
     * // Update or create a Members
     * const members = await prisma.members.upsert({
     *   create: {
     *     // ... data to create a Members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Members we want to update
     *   }
     * })
    **/
    upsert<T extends MembersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MembersUpsertArgs<ExtArgs>>
    ): Prisma__MembersClient<$Types.GetResult<MembersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.members.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MembersCountArgs>(
      args?: Subset<T, MembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembersAggregateArgs>(args: Subset<T, MembersAggregateArgs>): Prisma.PrismaPromise<GetMembersAggregateType<T>>

    /**
     * Group by Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembersGroupByArgs['orderBy'] }
        : { orderBy?: MembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Members model
   */
  readonly fields: MembersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MembersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Members model
   */ 
  interface MembersFieldRefs {
    readonly uid: FieldRef<"Members", 'String'>
    readonly communityUid: FieldRef<"Members", 'String'>
    readonly personUid: FieldRef<"Members", 'String'>
    readonly role: FieldRef<"Members", 'String'>
    readonly createdUTC: FieldRef<"Members", 'DateTime'>
    readonly approvedUTC: FieldRef<"Members", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Members findUnique
   */
  export type MembersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members findUniqueOrThrow
   */
  export type MembersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members findFirst
   */
  export type MembersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }


  /**
   * Members findFirstOrThrow
   */
  export type MembersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }


  /**
   * Members findMany
   */
  export type MembersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }


  /**
   * Members create
   */
  export type MembersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * The data needed to create a Members.
     */
    data: XOR<MembersCreateInput, MembersUncheckedCreateInput>
  }


  /**
   * Members createMany
   */
  export type MembersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MembersCreateManyInput | MembersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Members update
   */
  export type MembersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * The data needed to update a Members.
     */
    data: XOR<MembersUpdateInput, MembersUncheckedUpdateInput>
    /**
     * Choose, which Members to update.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members updateMany
   */
  export type MembersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MembersUpdateManyMutationInput, MembersUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MembersWhereInput
  }


  /**
   * Members upsert
   */
  export type MembersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * The filter to search for the Members to update in case it exists.
     */
    where: MembersWhereUniqueInput
    /**
     * In case the Members found by the `where` argument doesn't exist, create a new Members with this data.
     */
    create: XOR<MembersCreateInput, MembersUncheckedCreateInput>
    /**
     * In case the Members was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MembersUpdateInput, MembersUncheckedUpdateInput>
  }


  /**
   * Members delete
   */
  export type MembersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Filter which Members to delete.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members deleteMany
   */
  export type MembersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MembersWhereInput
  }


  /**
   * Members without action
   */
  export type MembersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
  }



  /**
   * Model Claim
   */


  export type AggregateClaim = {
    _count: ClaimCountAggregateOutputType | null
    _avg: ClaimAvgAggregateOutputType | null
    _sum: ClaimSumAggregateOutputType | null
    _min: ClaimMinAggregateOutputType | null
    _max: ClaimMaxAggregateOutputType | null
  }

  export type ClaimAvgAggregateOutputType = {
    state: number | null
    requiredVotes: number | null
    requiredPositives: number | null
    positiveVotes: number | null
    negativeVotes: number | null
    ignoredVotes: number | null
  }

  export type ClaimSumAggregateOutputType = {
    state: number | null
    requiredVotes: number | null
    requiredPositives: number | null
    positiveVotes: number | null
    negativeVotes: number | null
    ignoredVotes: number | null
  }

  export type ClaimMinAggregateOutputType = {
    uid: string | null
    communityUid: string | null
    applicantUid: string | null
    planUid: string | null
    state: number | null
    accountId: string | null
    alias: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    votedUTC: Date | null
    issuedUTC: Date | null
    dueUTC: Date | null
    requiredVotes: number | null
    requiredPositives: number | null
    positiveVotes: number | null
    negativeVotes: number | null
    ignoredVotes: number | null
    evidenceData: string | null
  }

  export type ClaimMaxAggregateOutputType = {
    uid: string | null
    communityUid: string | null
    applicantUid: string | null
    planUid: string | null
    state: number | null
    accountId: string | null
    alias: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    votedUTC: Date | null
    issuedUTC: Date | null
    dueUTC: Date | null
    requiredVotes: number | null
    requiredPositives: number | null
    positiveVotes: number | null
    negativeVotes: number | null
    ignoredVotes: number | null
    evidenceData: string | null
  }

  export type ClaimCountAggregateOutputType = {
    uid: number
    communityUid: number
    applicantUid: number
    planUid: number
    state: number
    accountId: number
    alias: number
    createdUTC: number
    updatedUTC: number
    votedUTC: number
    issuedUTC: number
    dueUTC: number
    requiredVotes: number
    requiredPositives: number
    positiveVotes: number
    negativeVotes: number
    ignoredVotes: number
    evidenceData: number
    _all: number
  }


  export type ClaimAvgAggregateInputType = {
    state?: true
    requiredVotes?: true
    requiredPositives?: true
    positiveVotes?: true
    negativeVotes?: true
    ignoredVotes?: true
  }

  export type ClaimSumAggregateInputType = {
    state?: true
    requiredVotes?: true
    requiredPositives?: true
    positiveVotes?: true
    negativeVotes?: true
    ignoredVotes?: true
  }

  export type ClaimMinAggregateInputType = {
    uid?: true
    communityUid?: true
    applicantUid?: true
    planUid?: true
    state?: true
    accountId?: true
    alias?: true
    createdUTC?: true
    updatedUTC?: true
    votedUTC?: true
    issuedUTC?: true
    dueUTC?: true
    requiredVotes?: true
    requiredPositives?: true
    positiveVotes?: true
    negativeVotes?: true
    ignoredVotes?: true
    evidenceData?: true
  }

  export type ClaimMaxAggregateInputType = {
    uid?: true
    communityUid?: true
    applicantUid?: true
    planUid?: true
    state?: true
    accountId?: true
    alias?: true
    createdUTC?: true
    updatedUTC?: true
    votedUTC?: true
    issuedUTC?: true
    dueUTC?: true
    requiredVotes?: true
    requiredPositives?: true
    positiveVotes?: true
    negativeVotes?: true
    ignoredVotes?: true
    evidenceData?: true
  }

  export type ClaimCountAggregateInputType = {
    uid?: true
    communityUid?: true
    applicantUid?: true
    planUid?: true
    state?: true
    accountId?: true
    alias?: true
    createdUTC?: true
    updatedUTC?: true
    votedUTC?: true
    issuedUTC?: true
    dueUTC?: true
    requiredVotes?: true
    requiredPositives?: true
    positiveVotes?: true
    negativeVotes?: true
    ignoredVotes?: true
    evidenceData?: true
    _all?: true
  }

  export type ClaimAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Claim to aggregate.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Claims
    **/
    _count?: true | ClaimCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClaimAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClaimSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClaimMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClaimMaxAggregateInputType
  }

  export type GetClaimAggregateType<T extends ClaimAggregateArgs> = {
        [P in keyof T & keyof AggregateClaim]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClaim[P]>
      : GetScalarType<T[P], AggregateClaim[P]>
  }




  export type ClaimGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClaimWhereInput
    orderBy?: ClaimOrderByWithAggregationInput | ClaimOrderByWithAggregationInput[]
    by: ClaimScalarFieldEnum[] | ClaimScalarFieldEnum
    having?: ClaimScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClaimCountAggregateInputType | true
    _avg?: ClaimAvgAggregateInputType
    _sum?: ClaimSumAggregateInputType
    _min?: ClaimMinAggregateInputType
    _max?: ClaimMaxAggregateInputType
  }


  export type ClaimGroupByOutputType = {
    uid: string
    communityUid: string
    applicantUid: string
    planUid: string
    state: number
    accountId: string | null
    alias: string | null
    createdUTC: Date
    updatedUTC: Date
    votedUTC: Date | null
    issuedUTC: Date | null
    dueUTC: Date | null
    requiredVotes: number | null
    requiredPositives: number | null
    positiveVotes: number | null
    negativeVotes: number | null
    ignoredVotes: number | null
    evidenceData: string | null
    _count: ClaimCountAggregateOutputType | null
    _avg: ClaimAvgAggregateOutputType | null
    _sum: ClaimSumAggregateOutputType | null
    _min: ClaimMinAggregateOutputType | null
    _max: ClaimMaxAggregateOutputType | null
  }

  type GetClaimGroupByPayload<T extends ClaimGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClaimGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClaimGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClaimGroupByOutputType[P]>
            : GetScalarType<T[P], ClaimGroupByOutputType[P]>
        }
      >
    >


  export type ClaimSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    communityUid?: boolean
    applicantUid?: boolean
    planUid?: boolean
    state?: boolean
    accountId?: boolean
    alias?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    votedUTC?: boolean
    issuedUTC?: boolean
    dueUTC?: boolean
    requiredVotes?: boolean
    requiredPositives?: boolean
    positiveVotes?: boolean
    negativeVotes?: boolean
    ignoredVotes?: boolean
    evidenceData?: boolean
  }, ExtArgs["result"]["claim"]>

  export type ClaimSelectScalar = {
    uid?: boolean
    communityUid?: boolean
    applicantUid?: boolean
    planUid?: boolean
    state?: boolean
    accountId?: boolean
    alias?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    votedUTC?: boolean
    issuedUTC?: boolean
    dueUTC?: boolean
    requiredVotes?: boolean
    requiredPositives?: boolean
    positiveVotes?: boolean
    negativeVotes?: boolean
    ignoredVotes?: boolean
    evidenceData?: boolean
  }


  type ClaimGetPayload<S extends boolean | null | undefined | ClaimArgs> = $Types.GetResult<ClaimPayload, S>

  type ClaimCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClaimFindManyArgs, 'select' | 'include'> & {
      select?: ClaimCountAggregateInputType | true
    }

  export interface ClaimDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Claim'], meta: { name: 'Claim' } }
    /**
     * Find zero or one Claim that matches the filter.
     * @param {ClaimFindUniqueArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClaimFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClaimFindUniqueArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Claim that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClaimFindUniqueOrThrowArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClaimFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClaimFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Claim that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimFindFirstArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClaimFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClaimFindFirstArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Claim that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimFindFirstOrThrowArgs} args - Arguments to find a Claim
     * @example
     * // Get one Claim
     * const claim = await prisma.claim.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClaimFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClaimFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Claims that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Claims
     * const claims = await prisma.claim.findMany()
     * 
     * // Get first 10 Claims
     * const claims = await prisma.claim.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const claimWithUidOnly = await prisma.claim.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends ClaimFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClaimFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Claim.
     * @param {ClaimCreateArgs} args - Arguments to create a Claim.
     * @example
     * // Create one Claim
     * const Claim = await prisma.claim.create({
     *   data: {
     *     // ... data to create a Claim
     *   }
     * })
     * 
    **/
    create<T extends ClaimCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClaimCreateArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Claims.
     *     @param {ClaimCreateManyArgs} args - Arguments to create many Claims.
     *     @example
     *     // Create many Claims
     *     const claim = await prisma.claim.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClaimCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClaimCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Claim.
     * @param {ClaimDeleteArgs} args - Arguments to delete one Claim.
     * @example
     * // Delete one Claim
     * const Claim = await prisma.claim.delete({
     *   where: {
     *     // ... filter to delete one Claim
     *   }
     * })
     * 
    **/
    delete<T extends ClaimDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClaimDeleteArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Claim.
     * @param {ClaimUpdateArgs} args - Arguments to update one Claim.
     * @example
     * // Update one Claim
     * const claim = await prisma.claim.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClaimUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClaimUpdateArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Claims.
     * @param {ClaimDeleteManyArgs} args - Arguments to filter Claims to delete.
     * @example
     * // Delete a few Claims
     * const { count } = await prisma.claim.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClaimDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClaimDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Claims
     * const claim = await prisma.claim.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClaimUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClaimUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Claim.
     * @param {ClaimUpsertArgs} args - Arguments to update or create a Claim.
     * @example
     * // Update or create a Claim
     * const claim = await prisma.claim.upsert({
     *   create: {
     *     // ... data to create a Claim
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Claim we want to update
     *   }
     * })
    **/
    upsert<T extends ClaimUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClaimUpsertArgs<ExtArgs>>
    ): Prisma__ClaimClient<$Types.GetResult<ClaimPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimCountArgs} args - Arguments to filter Claims to count.
     * @example
     * // Count the number of Claims
     * const count = await prisma.claim.count({
     *   where: {
     *     // ... the filter for the Claims we want to count
     *   }
     * })
    **/
    count<T extends ClaimCountArgs>(
      args?: Subset<T, ClaimCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClaimCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Claim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClaimAggregateArgs>(args: Subset<T, ClaimAggregateArgs>): Prisma.PrismaPromise<GetClaimAggregateType<T>>

    /**
     * Group by Claim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaimGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClaimGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClaimGroupByArgs['orderBy'] }
        : { orderBy?: ClaimGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClaimGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClaimGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Claim model
   */
  readonly fields: ClaimFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Claim.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClaimClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Claim model
   */ 
  interface ClaimFieldRefs {
    readonly uid: FieldRef<"Claim", 'String'>
    readonly communityUid: FieldRef<"Claim", 'String'>
    readonly applicantUid: FieldRef<"Claim", 'String'>
    readonly planUid: FieldRef<"Claim", 'String'>
    readonly state: FieldRef<"Claim", 'Int'>
    readonly accountId: FieldRef<"Claim", 'String'>
    readonly alias: FieldRef<"Claim", 'String'>
    readonly createdUTC: FieldRef<"Claim", 'DateTime'>
    readonly updatedUTC: FieldRef<"Claim", 'DateTime'>
    readonly votedUTC: FieldRef<"Claim", 'DateTime'>
    readonly issuedUTC: FieldRef<"Claim", 'DateTime'>
    readonly dueUTC: FieldRef<"Claim", 'DateTime'>
    readonly requiredVotes: FieldRef<"Claim", 'Int'>
    readonly requiredPositives: FieldRef<"Claim", 'Int'>
    readonly positiveVotes: FieldRef<"Claim", 'Int'>
    readonly negativeVotes: FieldRef<"Claim", 'Int'>
    readonly ignoredVotes: FieldRef<"Claim", 'Int'>
    readonly evidenceData: FieldRef<"Claim", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Claim findUnique
   */
  export type ClaimFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where: ClaimWhereUniqueInput
  }


  /**
   * Claim findUniqueOrThrow
   */
  export type ClaimFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where: ClaimWhereUniqueInput
  }


  /**
   * Claim findFirst
   */
  export type ClaimFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Claims.
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Claims.
     */
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }


  /**
   * Claim findFirstOrThrow
   */
  export type ClaimFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Filter, which Claim to fetch.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Claims.
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Claims.
     */
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }


  /**
   * Claim findMany
   */
  export type ClaimFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Filter, which Claims to fetch.
     */
    where?: ClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claims to fetch.
     */
    orderBy?: ClaimOrderByWithRelationInput | ClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Claims.
     */
    cursor?: ClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claims.
     */
    skip?: number
    distinct?: ClaimScalarFieldEnum | ClaimScalarFieldEnum[]
  }


  /**
   * Claim create
   */
  export type ClaimCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * The data needed to create a Claim.
     */
    data: XOR<ClaimCreateInput, ClaimUncheckedCreateInput>
  }


  /**
   * Claim createMany
   */
  export type ClaimCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Claims.
     */
    data: ClaimCreateManyInput | ClaimCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Claim update
   */
  export type ClaimUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * The data needed to update a Claim.
     */
    data: XOR<ClaimUpdateInput, ClaimUncheckedUpdateInput>
    /**
     * Choose, which Claim to update.
     */
    where: ClaimWhereUniqueInput
  }


  /**
   * Claim updateMany
   */
  export type ClaimUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Claims.
     */
    data: XOR<ClaimUpdateManyMutationInput, ClaimUncheckedUpdateManyInput>
    /**
     * Filter which Claims to update
     */
    where?: ClaimWhereInput
  }


  /**
   * Claim upsert
   */
  export type ClaimUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * The filter to search for the Claim to update in case it exists.
     */
    where: ClaimWhereUniqueInput
    /**
     * In case the Claim found by the `where` argument doesn't exist, create a new Claim with this data.
     */
    create: XOR<ClaimCreateInput, ClaimUncheckedCreateInput>
    /**
     * In case the Claim was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClaimUpdateInput, ClaimUncheckedUpdateInput>
  }


  /**
   * Claim delete
   */
  export type ClaimDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
    /**
     * Filter which Claim to delete.
     */
    where: ClaimWhereUniqueInput
  }


  /**
   * Claim deleteMany
   */
  export type ClaimDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Claims to delete
     */
    where?: ClaimWhereInput
  }


  /**
   * Claim without action
   */
  export type ClaimArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Claim
     */
    select?: ClaimSelect<ExtArgs> | null
  }



  /**
   * Model Plan
   */


  export type AggregatePlan = {
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  export type PlanAvgAggregateOutputType = {
    state: number | null
    fee: number | null
    rewardsShare: number | null
    communityShare: number | null
    protocolShare: number | null
    total: number | null
    available: number | null
    expiration: number | null
  }

  export type PlanSumAggregateOutputType = {
    state: number | null
    fee: number | null
    rewardsShare: number | null
    communityShare: number | null
    protocolShare: number | null
    total: number | null
    available: number | null
    expiration: number | null
  }

  export type PlanMinAggregateOutputType = {
    uid: string | null
    communityUid: string | null
    state: number | null
    name: string | null
    alias: string | null
    description: string | null
    image: string | null
    template: string | null
    evidence: string | null
    strategy: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    approvedUTC: Date | null
    fee: number | null
    rewardsShare: number | null
    communityShare: number | null
    protocolShare: number | null
    total: number | null
    available: number | null
    expiration: number | null
    revocable: boolean | null
    startsUTC: Date | null
    endsUTC: Date | null
  }

  export type PlanMaxAggregateOutputType = {
    uid: string | null
    communityUid: string | null
    state: number | null
    name: string | null
    alias: string | null
    description: string | null
    image: string | null
    template: string | null
    evidence: string | null
    strategy: string | null
    createdUTC: Date | null
    updatedUTC: Date | null
    approvedUTC: Date | null
    fee: number | null
    rewardsShare: number | null
    communityShare: number | null
    protocolShare: number | null
    total: number | null
    available: number | null
    expiration: number | null
    revocable: boolean | null
    startsUTC: Date | null
    endsUTC: Date | null
  }

  export type PlanCountAggregateOutputType = {
    uid: number
    communityUid: number
    state: number
    name: number
    alias: number
    description: number
    image: number
    template: number
    evidence: number
    strategy: number
    createdUTC: number
    updatedUTC: number
    approvedUTC: number
    fee: number
    rewardsShare: number
    communityShare: number
    protocolShare: number
    total: number
    available: number
    expiration: number
    revocable: number
    startsUTC: number
    endsUTC: number
    _all: number
  }


  export type PlanAvgAggregateInputType = {
    state?: true
    fee?: true
    rewardsShare?: true
    communityShare?: true
    protocolShare?: true
    total?: true
    available?: true
    expiration?: true
  }

  export type PlanSumAggregateInputType = {
    state?: true
    fee?: true
    rewardsShare?: true
    communityShare?: true
    protocolShare?: true
    total?: true
    available?: true
    expiration?: true
  }

  export type PlanMinAggregateInputType = {
    uid?: true
    communityUid?: true
    state?: true
    name?: true
    alias?: true
    description?: true
    image?: true
    template?: true
    evidence?: true
    strategy?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
    fee?: true
    rewardsShare?: true
    communityShare?: true
    protocolShare?: true
    total?: true
    available?: true
    expiration?: true
    revocable?: true
    startsUTC?: true
    endsUTC?: true
  }

  export type PlanMaxAggregateInputType = {
    uid?: true
    communityUid?: true
    state?: true
    name?: true
    alias?: true
    description?: true
    image?: true
    template?: true
    evidence?: true
    strategy?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
    fee?: true
    rewardsShare?: true
    communityShare?: true
    protocolShare?: true
    total?: true
    available?: true
    expiration?: true
    revocable?: true
    startsUTC?: true
    endsUTC?: true
  }

  export type PlanCountAggregateInputType = {
    uid?: true
    communityUid?: true
    state?: true
    name?: true
    alias?: true
    description?: true
    image?: true
    template?: true
    evidence?: true
    strategy?: true
    createdUTC?: true
    updatedUTC?: true
    approvedUTC?: true
    fee?: true
    rewardsShare?: true
    communityShare?: true
    protocolShare?: true
    total?: true
    available?: true
    expiration?: true
    revocable?: true
    startsUTC?: true
    endsUTC?: true
    _all?: true
  }

  export type PlanAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plan to aggregate.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plans
    **/
    _count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }




  export type PlanGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithAggregationInput | PlanOrderByWithAggregationInput[]
    by: PlanScalarFieldEnum[] | PlanScalarFieldEnum
    having?: PlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCountAggregateInputType | true
    _avg?: PlanAvgAggregateInputType
    _sum?: PlanSumAggregateInputType
    _min?: PlanMinAggregateInputType
    _max?: PlanMaxAggregateInputType
  }


  export type PlanGroupByOutputType = {
    uid: string
    communityUid: string
    state: number
    name: string
    alias: string | null
    description: string | null
    image: string | null
    template: string | null
    evidence: string | null
    strategy: string | null
    createdUTC: Date
    updatedUTC: Date
    approvedUTC: Date | null
    fee: number | null
    rewardsShare: number | null
    communityShare: number | null
    protocolShare: number | null
    total: number | null
    available: number | null
    expiration: number | null
    revocable: boolean | null
    startsUTC: Date | null
    endsUTC: Date | null
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  type GetPlanGroupByPayload<T extends PlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupByOutputType[P]>
        }
      >
    >


  export type PlanSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    communityUid?: boolean
    state?: boolean
    name?: boolean
    alias?: boolean
    description?: boolean
    image?: boolean
    template?: boolean
    evidence?: boolean
    strategy?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    approvedUTC?: boolean
    fee?: boolean
    rewardsShare?: boolean
    communityShare?: boolean
    protocolShare?: boolean
    total?: boolean
    available?: boolean
    expiration?: boolean
    revocable?: boolean
    startsUTC?: boolean
    endsUTC?: boolean
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectScalar = {
    uid?: boolean
    communityUid?: boolean
    state?: boolean
    name?: boolean
    alias?: boolean
    description?: boolean
    image?: boolean
    template?: boolean
    evidence?: boolean
    strategy?: boolean
    createdUTC?: boolean
    updatedUTC?: boolean
    approvedUTC?: boolean
    fee?: boolean
    rewardsShare?: boolean
    communityShare?: boolean
    protocolShare?: boolean
    total?: boolean
    available?: boolean
    expiration?: boolean
    revocable?: boolean
    startsUTC?: boolean
    endsUTC?: boolean
  }


  type PlanGetPayload<S extends boolean | null | undefined | PlanArgs> = $Types.GetResult<PlanPayload, S>

  type PlanCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PlanFindManyArgs, 'select' | 'include'> & {
      select?: PlanCountAggregateInputType | true
    }

  export interface PlanDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plan'], meta: { name: 'Plan' } }
    /**
     * Find zero or one Plan that matches the filter.
     * @param {PlanFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlanFindUniqueArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Plan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlanFindUniqueOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindFirstArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Plan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const planWithUidOnly = await prisma.plan.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends PlanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PlanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Plan.
     * @param {PlanCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
    **/
    create<T extends PlanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCreateArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Plans.
     *     @param {PlanCreateManyArgs} args - Arguments to create many Plans.
     *     @example
     *     // Create many Plans
     *     const plan = await prisma.plan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Plan.
     * @param {PlanDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
    **/
    delete<T extends PlanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlanDeleteArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Plan.
     * @param {PlanUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanUpdateArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Plans.
     * @param {PlanDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plan.
     * @param {PlanUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
    **/
    upsert<T extends PlanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlanUpsertArgs<ExtArgs>>
    ): Prisma__PlanClient<$Types.GetResult<PlanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends PlanCountArgs>(
      args?: Subset<T, PlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): Prisma.PrismaPromise<GetPlanAggregateType<T>>

    /**
     * Group by Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plan model
   */
  readonly fields: PlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlanClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Plan model
   */ 
  interface PlanFieldRefs {
    readonly uid: FieldRef<"Plan", 'String'>
    readonly communityUid: FieldRef<"Plan", 'String'>
    readonly state: FieldRef<"Plan", 'Int'>
    readonly name: FieldRef<"Plan", 'String'>
    readonly alias: FieldRef<"Plan", 'String'>
    readonly description: FieldRef<"Plan", 'String'>
    readonly image: FieldRef<"Plan", 'String'>
    readonly template: FieldRef<"Plan", 'String'>
    readonly evidence: FieldRef<"Plan", 'String'>
    readonly strategy: FieldRef<"Plan", 'String'>
    readonly createdUTC: FieldRef<"Plan", 'DateTime'>
    readonly updatedUTC: FieldRef<"Plan", 'DateTime'>
    readonly approvedUTC: FieldRef<"Plan", 'DateTime'>
    readonly fee: FieldRef<"Plan", 'Int'>
    readonly rewardsShare: FieldRef<"Plan", 'Int'>
    readonly communityShare: FieldRef<"Plan", 'Int'>
    readonly protocolShare: FieldRef<"Plan", 'Int'>
    readonly total: FieldRef<"Plan", 'Int'>
    readonly available: FieldRef<"Plan", 'Int'>
    readonly expiration: FieldRef<"Plan", 'Int'>
    readonly revocable: FieldRef<"Plan", 'Boolean'>
    readonly startsUTC: FieldRef<"Plan", 'DateTime'>
    readonly endsUTC: FieldRef<"Plan", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Plan findUnique
   */
  export type PlanFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan findUniqueOrThrow
   */
  export type PlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan findFirst
   */
  export type PlanFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }


  /**
   * Plan findFirstOrThrow
   */
  export type PlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }


  /**
   * Plan findMany
   */
  export type PlanFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Filter, which Plans to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }


  /**
   * Plan create
   */
  export type PlanCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * The data needed to create a Plan.
     */
    data: XOR<PlanCreateInput, PlanUncheckedCreateInput>
  }


  /**
   * Plan createMany
   */
  export type PlanCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Plan update
   */
  export type PlanUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * The data needed to update a Plan.
     */
    data: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
    /**
     * Choose, which Plan to update.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan updateMany
   */
  export type PlanUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
  }


  /**
   * Plan upsert
   */
  export type PlanUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * The filter to search for the Plan to update in case it exists.
     */
    where: PlanWhereUniqueInput
    /**
     * In case the Plan found by the `where` argument doesn't exist, create a new Plan with this data.
     */
    create: XOR<PlanCreateInput, PlanUncheckedCreateInput>
    /**
     * In case the Plan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
  }


  /**
   * Plan delete
   */
  export type PlanDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Filter which Plan to delete.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan deleteMany
   */
  export type PlanDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plans to delete
     */
    where?: PlanWhereInput
  }


  /**
   * Plan without action
   */
  export type PlanArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
  }



  /**
   * Model Credential
   */


  export type AggregateCredential = {
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  export type CredentialAvgAggregateOutputType = {
    stars: number | null
  }

  export type CredentialSumAggregateOutputType = {
    stars: number | null
  }

  export type CredentialMinAggregateOutputType = {
    uid: string | null
    accountId: string | null
    applicantId: string | null
    claimId: string | null
    applicantUid: string | null
    communityUid: string | null
    claimUid: string | null
    type: string | null
    description: string | null
    community: string | null
    image: string | null
    alias: string | null
    stars: number | null
    metadata: string | null
    revocable: boolean | null
    issuedUTC: Date | null
    expiresUTC: Date | null
  }

  export type CredentialMaxAggregateOutputType = {
    uid: string | null
    accountId: string | null
    applicantId: string | null
    claimId: string | null
    applicantUid: string | null
    communityUid: string | null
    claimUid: string | null
    type: string | null
    description: string | null
    community: string | null
    image: string | null
    alias: string | null
    stars: number | null
    metadata: string | null
    revocable: boolean | null
    issuedUTC: Date | null
    expiresUTC: Date | null
  }

  export type CredentialCountAggregateOutputType = {
    uid: number
    accountId: number
    applicantId: number
    claimId: number
    applicantUid: number
    communityUid: number
    claimUid: number
    type: number
    description: number
    community: number
    image: number
    alias: number
    stars: number
    metadata: number
    revocable: number
    issuedUTC: number
    expiresUTC: number
    _all: number
  }


  export type CredentialAvgAggregateInputType = {
    stars?: true
  }

  export type CredentialSumAggregateInputType = {
    stars?: true
  }

  export type CredentialMinAggregateInputType = {
    uid?: true
    accountId?: true
    applicantId?: true
    claimId?: true
    applicantUid?: true
    communityUid?: true
    claimUid?: true
    type?: true
    description?: true
    community?: true
    image?: true
    alias?: true
    stars?: true
    metadata?: true
    revocable?: true
    issuedUTC?: true
    expiresUTC?: true
  }

  export type CredentialMaxAggregateInputType = {
    uid?: true
    accountId?: true
    applicantId?: true
    claimId?: true
    applicantUid?: true
    communityUid?: true
    claimUid?: true
    type?: true
    description?: true
    community?: true
    image?: true
    alias?: true
    stars?: true
    metadata?: true
    revocable?: true
    issuedUTC?: true
    expiresUTC?: true
  }

  export type CredentialCountAggregateInputType = {
    uid?: true
    accountId?: true
    applicantId?: true
    claimId?: true
    applicantUid?: true
    communityUid?: true
    claimUid?: true
    type?: true
    description?: true
    community?: true
    image?: true
    alias?: true
    stars?: true
    metadata?: true
    revocable?: true
    issuedUTC?: true
    expiresUTC?: true
    _all?: true
  }

  export type CredentialAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credential to aggregate.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Credentials
    **/
    _count?: true | CredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CredentialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CredentialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CredentialMaxAggregateInputType
  }

  export type GetCredentialAggregateType<T extends CredentialAggregateArgs> = {
        [P in keyof T & keyof AggregateCredential]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredential[P]>
      : GetScalarType<T[P], AggregateCredential[P]>
  }




  export type CredentialGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CredentialWhereInput
    orderBy?: CredentialOrderByWithAggregationInput | CredentialOrderByWithAggregationInput[]
    by: CredentialScalarFieldEnum[] | CredentialScalarFieldEnum
    having?: CredentialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CredentialCountAggregateInputType | true
    _avg?: CredentialAvgAggregateInputType
    _sum?: CredentialSumAggregateInputType
    _min?: CredentialMinAggregateInputType
    _max?: CredentialMaxAggregateInputType
  }


  export type CredentialGroupByOutputType = {
    uid: string
    accountId: string
    applicantId: string
    claimId: string
    applicantUid: string
    communityUid: string
    claimUid: string
    type: string | null
    description: string | null
    community: string | null
    image: string | null
    alias: string | null
    stars: number | null
    metadata: string | null
    revocable: boolean | null
    issuedUTC: Date | null
    expiresUTC: Date | null
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  type GetCredentialGroupByPayload<T extends CredentialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CredentialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CredentialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CredentialGroupByOutputType[P]>
            : GetScalarType<T[P], CredentialGroupByOutputType[P]>
        }
      >
    >


  export type CredentialSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    accountId?: boolean
    applicantId?: boolean
    claimId?: boolean
    applicantUid?: boolean
    communityUid?: boolean
    claimUid?: boolean
    type?: boolean
    description?: boolean
    community?: boolean
    image?: boolean
    alias?: boolean
    stars?: boolean
    metadata?: boolean
    revocable?: boolean
    issuedUTC?: boolean
    expiresUTC?: boolean
  }, ExtArgs["result"]["credential"]>

  export type CredentialSelectScalar = {
    uid?: boolean
    accountId?: boolean
    applicantId?: boolean
    claimId?: boolean
    applicantUid?: boolean
    communityUid?: boolean
    claimUid?: boolean
    type?: boolean
    description?: boolean
    community?: boolean
    image?: boolean
    alias?: boolean
    stars?: boolean
    metadata?: boolean
    revocable?: boolean
    issuedUTC?: boolean
    expiresUTC?: boolean
  }


  type CredentialGetPayload<S extends boolean | null | undefined | CredentialArgs> = $Types.GetResult<CredentialPayload, S>

  type CredentialCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CredentialFindManyArgs, 'select' | 'include'> & {
      select?: CredentialCountAggregateInputType | true
    }

  export interface CredentialDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Credential'], meta: { name: 'Credential' } }
    /**
     * Find zero or one Credential that matches the filter.
     * @param {CredentialFindUniqueArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CredentialFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialFindUniqueArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Credential that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CredentialFindUniqueOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CredentialFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Credential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CredentialFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindFirstArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Credential that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CredentialFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credentials
     * const credentials = await prisma.credential.findMany()
     * 
     * // Get first 10 Credentials
     * const credentials = await prisma.credential.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const credentialWithUidOnly = await prisma.credential.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends CredentialFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Credential.
     * @param {CredentialCreateArgs} args - Arguments to create a Credential.
     * @example
     * // Create one Credential
     * const Credential = await prisma.credential.create({
     *   data: {
     *     // ... data to create a Credential
     *   }
     * })
     * 
    **/
    create<T extends CredentialCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialCreateArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Credentials.
     *     @param {CredentialCreateManyArgs} args - Arguments to create many Credentials.
     *     @example
     *     // Create many Credentials
     *     const credential = await prisma.credential.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CredentialCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Credential.
     * @param {CredentialDeleteArgs} args - Arguments to delete one Credential.
     * @example
     * // Delete one Credential
     * const Credential = await prisma.credential.delete({
     *   where: {
     *     // ... filter to delete one Credential
     *   }
     * })
     * 
    **/
    delete<T extends CredentialDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialDeleteArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Credential.
     * @param {CredentialUpdateArgs} args - Arguments to update one Credential.
     * @example
     * // Update one Credential
     * const credential = await prisma.credential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CredentialUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpdateArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Credentials.
     * @param {CredentialDeleteManyArgs} args - Arguments to filter Credentials to delete.
     * @example
     * // Delete a few Credentials
     * const { count } = await prisma.credential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CredentialDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credentials
     * const credential = await prisma.credential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CredentialUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Credential.
     * @param {CredentialUpsertArgs} args - Arguments to update or create a Credential.
     * @example
     * // Update or create a Credential
     * const credential = await prisma.credential.upsert({
     *   create: {
     *     // ... data to create a Credential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credential we want to update
     *   }
     * })
    **/
    upsert<T extends CredentialUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpsertArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Types.GetResult<CredentialPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialCountArgs} args - Arguments to filter Credentials to count.
     * @example
     * // Count the number of Credentials
     * const count = await prisma.credential.count({
     *   where: {
     *     // ... the filter for the Credentials we want to count
     *   }
     * })
    **/
    count<T extends CredentialCountArgs>(
      args?: Subset<T, CredentialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredentialAggregateArgs>(args: Subset<T, CredentialAggregateArgs>): Prisma.PrismaPromise<GetCredentialAggregateType<T>>

    /**
     * Group by Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CredentialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CredentialGroupByArgs['orderBy'] }
        : { orderBy?: CredentialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredentialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Credential model
   */
  readonly fields: CredentialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Credential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CredentialClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Credential model
   */ 
  interface CredentialFieldRefs {
    readonly uid: FieldRef<"Credential", 'String'>
    readonly accountId: FieldRef<"Credential", 'String'>
    readonly applicantId: FieldRef<"Credential", 'String'>
    readonly claimId: FieldRef<"Credential", 'String'>
    readonly applicantUid: FieldRef<"Credential", 'String'>
    readonly communityUid: FieldRef<"Credential", 'String'>
    readonly claimUid: FieldRef<"Credential", 'String'>
    readonly type: FieldRef<"Credential", 'String'>
    readonly description: FieldRef<"Credential", 'String'>
    readonly community: FieldRef<"Credential", 'String'>
    readonly image: FieldRef<"Credential", 'String'>
    readonly alias: FieldRef<"Credential", 'String'>
    readonly stars: FieldRef<"Credential", 'Int'>
    readonly metadata: FieldRef<"Credential", 'String'>
    readonly revocable: FieldRef<"Credential", 'Boolean'>
    readonly issuedUTC: FieldRef<"Credential", 'DateTime'>
    readonly expiresUTC: FieldRef<"Credential", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Credential findUnique
   */
  export type CredentialFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential findUniqueOrThrow
   */
  export type CredentialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential findFirst
   */
  export type CredentialFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }


  /**
   * Credential findFirstOrThrow
   */
  export type CredentialFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }


  /**
   * Credential findMany
   */
  export type CredentialFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Filter, which Credentials to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }


  /**
   * Credential create
   */
  export type CredentialCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * The data needed to create a Credential.
     */
    data: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
  }


  /**
   * Credential createMany
   */
  export type CredentialCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Credentials.
     */
    data: CredentialCreateManyInput | CredentialCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Credential update
   */
  export type CredentialUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * The data needed to update a Credential.
     */
    data: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
    /**
     * Choose, which Credential to update.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential updateMany
   */
  export type CredentialUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Credentials.
     */
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyInput>
    /**
     * Filter which Credentials to update
     */
    where?: CredentialWhereInput
  }


  /**
   * Credential upsert
   */
  export type CredentialUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * The filter to search for the Credential to update in case it exists.
     */
    where: CredentialWhereUniqueInput
    /**
     * In case the Credential found by the `where` argument doesn't exist, create a new Credential with this data.
     */
    create: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
    /**
     * In case the Credential was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
  }


  /**
   * Credential delete
   */
  export type CredentialDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Filter which Credential to delete.
     */
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential deleteMany
   */
  export type CredentialDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credentials to delete
     */
    where?: CredentialWhereInput
  }


  /**
   * Credential without action
   */
  export type CredentialArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
  }



  /**
   * Model Task
   */


  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    state: number | null
    rewarded: number | null
    reason: number | null
  }

  export type TaskSumAggregateOutputType = {
    state: number | null
    rewarded: number | null
    reason: number | null
  }

  export type TaskMinAggregateOutputType = {
    uid: string | null
    claimUid: string | null
    assigneeUid: string | null
    state: number | null
    assignedUTC: Date | null
    completedUTC: Date | null
    dueUTC: Date | null
    rewarded: number | null
    reason: number | null
    result: string | null
  }

  export type TaskMaxAggregateOutputType = {
    uid: string | null
    claimUid: string | null
    assigneeUid: string | null
    state: number | null
    assignedUTC: Date | null
    completedUTC: Date | null
    dueUTC: Date | null
    rewarded: number | null
    reason: number | null
    result: string | null
  }

  export type TaskCountAggregateOutputType = {
    uid: number
    claimUid: number
    assigneeUid: number
    state: number
    assignedUTC: number
    completedUTC: number
    dueUTC: number
    rewarded: number
    reason: number
    result: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    state?: true
    rewarded?: true
    reason?: true
  }

  export type TaskSumAggregateInputType = {
    state?: true
    rewarded?: true
    reason?: true
  }

  export type TaskMinAggregateInputType = {
    uid?: true
    claimUid?: true
    assigneeUid?: true
    state?: true
    assignedUTC?: true
    completedUTC?: true
    dueUTC?: true
    rewarded?: true
    reason?: true
    result?: true
  }

  export type TaskMaxAggregateInputType = {
    uid?: true
    claimUid?: true
    assigneeUid?: true
    state?: true
    assignedUTC?: true
    completedUTC?: true
    dueUTC?: true
    rewarded?: true
    reason?: true
    result?: true
  }

  export type TaskCountAggregateInputType = {
    uid?: true
    claimUid?: true
    assigneeUid?: true
    state?: true
    assignedUTC?: true
    completedUTC?: true
    dueUTC?: true
    rewarded?: true
    reason?: true
    result?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }


  export type TaskGroupByOutputType = {
    uid: string
    claimUid: string
    assigneeUid: string
    state: number
    assignedUTC: Date | null
    completedUTC: Date | null
    dueUTC: Date | null
    rewarded: number | null
    reason: number | null
    result: string | null
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    claimUid?: boolean
    assigneeUid?: boolean
    state?: boolean
    assignedUTC?: boolean
    completedUTC?: boolean
    dueUTC?: boolean
    rewarded?: boolean
    reason?: boolean
    result?: boolean
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    uid?: boolean
    claimUid?: boolean
    assigneeUid?: boolean
    state?: boolean
    assignedUTC?: boolean
    completedUTC?: boolean
    dueUTC?: boolean
    rewarded?: boolean
    reason?: boolean
    result?: boolean
  }


  type TaskGetPayload<S extends boolean | null | undefined | TaskArgs> = $Types.GetResult<TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TaskFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TaskFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const taskWithUidOnly = await prisma.task.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends TaskFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
    **/
    create<T extends TaskCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskCreateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tasks.
     *     @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const task = await prisma.task.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TaskCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
    **/
    delete<T extends TaskDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TaskUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TaskDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TaskUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
    **/
    upsert<T extends TaskUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly uid: FieldRef<"Task", 'String'>
    readonly claimUid: FieldRef<"Task", 'String'>
    readonly assigneeUid: FieldRef<"Task", 'String'>
    readonly state: FieldRef<"Task", 'Int'>
    readonly assignedUTC: FieldRef<"Task", 'DateTime'>
    readonly completedUTC: FieldRef<"Task", 'DateTime'>
    readonly dueUTC: FieldRef<"Task", 'DateTime'>
    readonly rewarded: FieldRef<"Task", 'Int'>
    readonly reason: FieldRef<"Task", 'Int'>
    readonly result: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }


  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }


  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }


  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }


  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }


  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }


  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }


  /**
   * Task without action
   */
  export type TaskArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
  }



  /**
   * Model Proposed
   */


  export type AggregateProposed = {
    _count: ProposedCountAggregateOutputType | null
    _min: ProposedMinAggregateOutputType | null
    _max: ProposedMaxAggregateOutputType | null
  }

  export type ProposedMinAggregateOutputType = {
    uid: string | null
    role: string | null
    personUid: string | null
    communityUid: string | null
    createdUTC: Date | null
  }

  export type ProposedMaxAggregateOutputType = {
    uid: string | null
    role: string | null
    personUid: string | null
    communityUid: string | null
    createdUTC: Date | null
  }

  export type ProposedCountAggregateOutputType = {
    uid: number
    role: number
    personUid: number
    communityUid: number
    createdUTC: number
    _all: number
  }


  export type ProposedMinAggregateInputType = {
    uid?: true
    role?: true
    personUid?: true
    communityUid?: true
    createdUTC?: true
  }

  export type ProposedMaxAggregateInputType = {
    uid?: true
    role?: true
    personUid?: true
    communityUid?: true
    createdUTC?: true
  }

  export type ProposedCountAggregateInputType = {
    uid?: true
    role?: true
    personUid?: true
    communityUid?: true
    createdUTC?: true
    _all?: true
  }

  export type ProposedAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposed to aggregate.
     */
    where?: ProposedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposeds to fetch.
     */
    orderBy?: ProposedOrderByWithRelationInput | ProposedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProposedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proposeds
    **/
    _count?: true | ProposedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProposedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProposedMaxAggregateInputType
  }

  export type GetProposedAggregateType<T extends ProposedAggregateArgs> = {
        [P in keyof T & keyof AggregateProposed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposed[P]>
      : GetScalarType<T[P], AggregateProposed[P]>
  }




  export type ProposedGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProposedWhereInput
    orderBy?: ProposedOrderByWithAggregationInput | ProposedOrderByWithAggregationInput[]
    by: ProposedScalarFieldEnum[] | ProposedScalarFieldEnum
    having?: ProposedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProposedCountAggregateInputType | true
    _min?: ProposedMinAggregateInputType
    _max?: ProposedMaxAggregateInputType
  }


  export type ProposedGroupByOutputType = {
    uid: string
    role: string
    personUid: string
    communityUid: string
    createdUTC: Date
    _count: ProposedCountAggregateOutputType | null
    _min: ProposedMinAggregateOutputType | null
    _max: ProposedMaxAggregateOutputType | null
  }

  type GetProposedGroupByPayload<T extends ProposedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProposedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProposedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProposedGroupByOutputType[P]>
            : GetScalarType<T[P], ProposedGroupByOutputType[P]>
        }
      >
    >


  export type ProposedSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    role?: boolean
    personUid?: boolean
    communityUid?: boolean
    createdUTC?: boolean
  }, ExtArgs["result"]["proposed"]>

  export type ProposedSelectScalar = {
    uid?: boolean
    role?: boolean
    personUid?: boolean
    communityUid?: boolean
    createdUTC?: boolean
  }


  type ProposedGetPayload<S extends boolean | null | undefined | ProposedArgs> = $Types.GetResult<ProposedPayload, S>

  type ProposedCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProposedFindManyArgs, 'select' | 'include'> & {
      select?: ProposedCountAggregateInputType | true
    }

  export interface ProposedDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proposed'], meta: { name: 'Proposed' } }
    /**
     * Find zero or one Proposed that matches the filter.
     * @param {ProposedFindUniqueArgs} args - Arguments to find a Proposed
     * @example
     * // Get one Proposed
     * const proposed = await prisma.proposed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProposedFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProposedFindUniqueArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Proposed that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProposedFindUniqueOrThrowArgs} args - Arguments to find a Proposed
     * @example
     * // Get one Proposed
     * const proposed = await prisma.proposed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProposedFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProposedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Proposed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposedFindFirstArgs} args - Arguments to find a Proposed
     * @example
     * // Get one Proposed
     * const proposed = await prisma.proposed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProposedFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProposedFindFirstArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Proposed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposedFindFirstOrThrowArgs} args - Arguments to find a Proposed
     * @example
     * // Get one Proposed
     * const proposed = await prisma.proposed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProposedFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProposedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Proposeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proposeds
     * const proposeds = await prisma.proposed.findMany()
     * 
     * // Get first 10 Proposeds
     * const proposeds = await prisma.proposed.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const proposedWithUidOnly = await prisma.proposed.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends ProposedFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProposedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Proposed.
     * @param {ProposedCreateArgs} args - Arguments to create a Proposed.
     * @example
     * // Create one Proposed
     * const Proposed = await prisma.proposed.create({
     *   data: {
     *     // ... data to create a Proposed
     *   }
     * })
     * 
    **/
    create<T extends ProposedCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProposedCreateArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Proposeds.
     *     @param {ProposedCreateManyArgs} args - Arguments to create many Proposeds.
     *     @example
     *     // Create many Proposeds
     *     const proposed = await prisma.proposed.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProposedCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProposedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Proposed.
     * @param {ProposedDeleteArgs} args - Arguments to delete one Proposed.
     * @example
     * // Delete one Proposed
     * const Proposed = await prisma.proposed.delete({
     *   where: {
     *     // ... filter to delete one Proposed
     *   }
     * })
     * 
    **/
    delete<T extends ProposedDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProposedDeleteArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Proposed.
     * @param {ProposedUpdateArgs} args - Arguments to update one Proposed.
     * @example
     * // Update one Proposed
     * const proposed = await prisma.proposed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProposedUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProposedUpdateArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Proposeds.
     * @param {ProposedDeleteManyArgs} args - Arguments to filter Proposeds to delete.
     * @example
     * // Delete a few Proposeds
     * const { count } = await prisma.proposed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProposedDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProposedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proposeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proposeds
     * const proposed = await prisma.proposed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProposedUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProposedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proposed.
     * @param {ProposedUpsertArgs} args - Arguments to update or create a Proposed.
     * @example
     * // Update or create a Proposed
     * const proposed = await prisma.proposed.upsert({
     *   create: {
     *     // ... data to create a Proposed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proposed we want to update
     *   }
     * })
    **/
    upsert<T extends ProposedUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProposedUpsertArgs<ExtArgs>>
    ): Prisma__ProposedClient<$Types.GetResult<ProposedPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Proposeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposedCountArgs} args - Arguments to filter Proposeds to count.
     * @example
     * // Count the number of Proposeds
     * const count = await prisma.proposed.count({
     *   where: {
     *     // ... the filter for the Proposeds we want to count
     *   }
     * })
    **/
    count<T extends ProposedCountArgs>(
      args?: Subset<T, ProposedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProposedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proposed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProposedAggregateArgs>(args: Subset<T, ProposedAggregateArgs>): Prisma.PrismaPromise<GetProposedAggregateType<T>>

    /**
     * Group by Proposed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProposedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProposedGroupByArgs['orderBy'] }
        : { orderBy?: ProposedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProposedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proposed model
   */
  readonly fields: ProposedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proposed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProposedClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Proposed model
   */ 
  interface ProposedFieldRefs {
    readonly uid: FieldRef<"Proposed", 'String'>
    readonly role: FieldRef<"Proposed", 'String'>
    readonly personUid: FieldRef<"Proposed", 'String'>
    readonly communityUid: FieldRef<"Proposed", 'String'>
    readonly createdUTC: FieldRef<"Proposed", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Proposed findUnique
   */
  export type ProposedFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * Filter, which Proposed to fetch.
     */
    where: ProposedWhereUniqueInput
  }


  /**
   * Proposed findUniqueOrThrow
   */
  export type ProposedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * Filter, which Proposed to fetch.
     */
    where: ProposedWhereUniqueInput
  }


  /**
   * Proposed findFirst
   */
  export type ProposedFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * Filter, which Proposed to fetch.
     */
    where?: ProposedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposeds to fetch.
     */
    orderBy?: ProposedOrderByWithRelationInput | ProposedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposeds.
     */
    cursor?: ProposedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposeds.
     */
    distinct?: ProposedScalarFieldEnum | ProposedScalarFieldEnum[]
  }


  /**
   * Proposed findFirstOrThrow
   */
  export type ProposedFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * Filter, which Proposed to fetch.
     */
    where?: ProposedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposeds to fetch.
     */
    orderBy?: ProposedOrderByWithRelationInput | ProposedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposeds.
     */
    cursor?: ProposedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposeds.
     */
    distinct?: ProposedScalarFieldEnum | ProposedScalarFieldEnum[]
  }


  /**
   * Proposed findMany
   */
  export type ProposedFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * Filter, which Proposeds to fetch.
     */
    where?: ProposedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposeds to fetch.
     */
    orderBy?: ProposedOrderByWithRelationInput | ProposedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proposeds.
     */
    cursor?: ProposedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposeds.
     */
    skip?: number
    distinct?: ProposedScalarFieldEnum | ProposedScalarFieldEnum[]
  }


  /**
   * Proposed create
   */
  export type ProposedCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * The data needed to create a Proposed.
     */
    data: XOR<ProposedCreateInput, ProposedUncheckedCreateInput>
  }


  /**
   * Proposed createMany
   */
  export type ProposedCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proposeds.
     */
    data: ProposedCreateManyInput | ProposedCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Proposed update
   */
  export type ProposedUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * The data needed to update a Proposed.
     */
    data: XOR<ProposedUpdateInput, ProposedUncheckedUpdateInput>
    /**
     * Choose, which Proposed to update.
     */
    where: ProposedWhereUniqueInput
  }


  /**
   * Proposed updateMany
   */
  export type ProposedUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proposeds.
     */
    data: XOR<ProposedUpdateManyMutationInput, ProposedUncheckedUpdateManyInput>
    /**
     * Filter which Proposeds to update
     */
    where?: ProposedWhereInput
  }


  /**
   * Proposed upsert
   */
  export type ProposedUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * The filter to search for the Proposed to update in case it exists.
     */
    where: ProposedWhereUniqueInput
    /**
     * In case the Proposed found by the `where` argument doesn't exist, create a new Proposed with this data.
     */
    create: XOR<ProposedCreateInput, ProposedUncheckedCreateInput>
    /**
     * In case the Proposed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProposedUpdateInput, ProposedUncheckedUpdateInput>
  }


  /**
   * Proposed delete
   */
  export type ProposedDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
    /**
     * Filter which Proposed to delete.
     */
    where: ProposedWhereUniqueInput
  }


  /**
   * Proposed deleteMany
   */
  export type ProposedDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposeds to delete
     */
    where?: ProposedWhereInput
  }


  /**
   * Proposed without action
   */
  export type ProposedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposed
     */
    select?: ProposedSelect<ExtArgs> | null
  }



  /**
   * Model Batch
   */


  export type AggregateBatch = {
    _count: BatchCountAggregateOutputType | null
    _avg: BatchAvgAggregateOutputType | null
    _sum: BatchSumAggregateOutputType | null
    _min: BatchMinAggregateOutputType | null
    _max: BatchMaxAggregateOutputType | null
  }

  export type BatchAvgAggregateOutputType = {
    sequence: number | null
    size: number | null
    state: number | null
  }

  export type BatchSumAggregateOutputType = {
    sequence: number | null
    size: number | null
    state: number | null
  }

  export type BatchMinAggregateOutputType = {
    uid: string | null
    sequence: number | null
    type: string | null
    metadata: string | null
    signerAccountId: string | null
    signedData: string | null
    signatureField: string | null
    signatureScalar: string | null
    commitment: string | null
    size: number | null
    state: number | null
    submitedUTC: Date | null
    doneUTC: Date | null
    BatchesAccountId: string | null
    BatchReceivedTxnUid: string | null
    BatchesCommitedTxnUid: string | null
  }

  export type BatchMaxAggregateOutputType = {
    uid: string | null
    sequence: number | null
    type: string | null
    metadata: string | null
    signerAccountId: string | null
    signedData: string | null
    signatureField: string | null
    signatureScalar: string | null
    commitment: string | null
    size: number | null
    state: number | null
    submitedUTC: Date | null
    doneUTC: Date | null
    BatchesAccountId: string | null
    BatchReceivedTxnUid: string | null
    BatchesCommitedTxnUid: string | null
  }

  export type BatchCountAggregateOutputType = {
    uid: number
    sequence: number
    type: number
    metadata: number
    signerAccountId: number
    signedData: number
    signatureField: number
    signatureScalar: number
    commitment: number
    size: number
    state: number
    submitedUTC: number
    doneUTC: number
    BatchesAccountId: number
    BatchReceivedTxnUid: number
    BatchesCommitedTxnUid: number
    _all: number
  }


  export type BatchAvgAggregateInputType = {
    sequence?: true
    size?: true
    state?: true
  }

  export type BatchSumAggregateInputType = {
    sequence?: true
    size?: true
    state?: true
  }

  export type BatchMinAggregateInputType = {
    uid?: true
    sequence?: true
    type?: true
    metadata?: true
    signerAccountId?: true
    signedData?: true
    signatureField?: true
    signatureScalar?: true
    commitment?: true
    size?: true
    state?: true
    submitedUTC?: true
    doneUTC?: true
    BatchesAccountId?: true
    BatchReceivedTxnUid?: true
    BatchesCommitedTxnUid?: true
  }

  export type BatchMaxAggregateInputType = {
    uid?: true
    sequence?: true
    type?: true
    metadata?: true
    signerAccountId?: true
    signedData?: true
    signatureField?: true
    signatureScalar?: true
    commitment?: true
    size?: true
    state?: true
    submitedUTC?: true
    doneUTC?: true
    BatchesAccountId?: true
    BatchReceivedTxnUid?: true
    BatchesCommitedTxnUid?: true
  }

  export type BatchCountAggregateInputType = {
    uid?: true
    sequence?: true
    type?: true
    metadata?: true
    signerAccountId?: true
    signedData?: true
    signatureField?: true
    signatureScalar?: true
    commitment?: true
    size?: true
    state?: true
    submitedUTC?: true
    doneUTC?: true
    BatchesAccountId?: true
    BatchReceivedTxnUid?: true
    BatchesCommitedTxnUid?: true
    _all?: true
  }

  export type BatchAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Batch to aggregate.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Batches
    **/
    _count?: true | BatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BatchMaxAggregateInputType
  }

  export type GetBatchAggregateType<T extends BatchAggregateArgs> = {
        [P in keyof T & keyof AggregateBatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBatch[P]>
      : GetScalarType<T[P], AggregateBatch[P]>
  }




  export type BatchGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BatchWhereInput
    orderBy?: BatchOrderByWithAggregationInput | BatchOrderByWithAggregationInput[]
    by: BatchScalarFieldEnum[] | BatchScalarFieldEnum
    having?: BatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BatchCountAggregateInputType | true
    _avg?: BatchAvgAggregateInputType
    _sum?: BatchSumAggregateInputType
    _min?: BatchMinAggregateInputType
    _max?: BatchMaxAggregateInputType
  }


  export type BatchGroupByOutputType = {
    uid: string
    sequence: number
    type: string
    metadata: string
    signerAccountId: string
    signedData: string
    signatureField: string
    signatureScalar: string
    commitment: string
    size: number
    state: number
    submitedUTC: Date
    doneUTC: Date | null
    BatchesAccountId: string | null
    BatchReceivedTxnUid: string | null
    BatchesCommitedTxnUid: string | null
    _count: BatchCountAggregateOutputType | null
    _avg: BatchAvgAggregateOutputType | null
    _sum: BatchSumAggregateOutputType | null
    _min: BatchMinAggregateOutputType | null
    _max: BatchMaxAggregateOutputType | null
  }

  type GetBatchGroupByPayload<T extends BatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BatchGroupByOutputType[P]>
            : GetScalarType<T[P], BatchGroupByOutputType[P]>
        }
      >
    >


  export type BatchSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    sequence?: boolean
    type?: boolean
    metadata?: boolean
    signerAccountId?: boolean
    signedData?: boolean
    signatureField?: boolean
    signatureScalar?: boolean
    commitment?: boolean
    size?: boolean
    state?: boolean
    submitedUTC?: boolean
    doneUTC?: boolean
    BatchesAccountId?: boolean
    BatchReceivedTxnUid?: boolean
    BatchesCommitedTxnUid?: boolean
  }, ExtArgs["result"]["batch"]>

  export type BatchSelectScalar = {
    uid?: boolean
    sequence?: boolean
    type?: boolean
    metadata?: boolean
    signerAccountId?: boolean
    signedData?: boolean
    signatureField?: boolean
    signatureScalar?: boolean
    commitment?: boolean
    size?: boolean
    state?: boolean
    submitedUTC?: boolean
    doneUTC?: boolean
    BatchesAccountId?: boolean
    BatchReceivedTxnUid?: boolean
    BatchesCommitedTxnUid?: boolean
  }


  type BatchGetPayload<S extends boolean | null | undefined | BatchArgs> = $Types.GetResult<BatchPayload, S>

  type BatchCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BatchFindManyArgs, 'select' | 'include'> & {
      select?: BatchCountAggregateInputType | true
    }

  export interface BatchDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Batch'], meta: { name: 'Batch' } }
    /**
     * Find zero or one Batch that matches the filter.
     * @param {BatchFindUniqueArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BatchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BatchFindUniqueArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Batch that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BatchFindUniqueOrThrowArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BatchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Batch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindFirstArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BatchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchFindFirstArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Batch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindFirstOrThrowArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BatchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Batches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Batches
     * const batches = await prisma.batch.findMany()
     * 
     * // Get first 10 Batches
     * const batches = await prisma.batch.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const batchWithUidOnly = await prisma.batch.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends BatchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Batch.
     * @param {BatchCreateArgs} args - Arguments to create a Batch.
     * @example
     * // Create one Batch
     * const Batch = await prisma.batch.create({
     *   data: {
     *     // ... data to create a Batch
     *   }
     * })
     * 
    **/
    create<T extends BatchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BatchCreateArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Batches.
     *     @param {BatchCreateManyArgs} args - Arguments to create many Batches.
     *     @example
     *     // Create many Batches
     *     const batch = await prisma.batch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BatchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Batch.
     * @param {BatchDeleteArgs} args - Arguments to delete one Batch.
     * @example
     * // Delete one Batch
     * const Batch = await prisma.batch.delete({
     *   where: {
     *     // ... filter to delete one Batch
     *   }
     * })
     * 
    **/
    delete<T extends BatchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BatchDeleteArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Batch.
     * @param {BatchUpdateArgs} args - Arguments to update one Batch.
     * @example
     * // Update one Batch
     * const batch = await prisma.batch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BatchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BatchUpdateArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Batches.
     * @param {BatchDeleteManyArgs} args - Arguments to filter Batches to delete.
     * @example
     * // Delete a few Batches
     * const { count } = await prisma.batch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BatchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Batches
     * const batch = await prisma.batch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BatchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BatchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Batch.
     * @param {BatchUpsertArgs} args - Arguments to update or create a Batch.
     * @example
     * // Update or create a Batch
     * const batch = await prisma.batch.upsert({
     *   create: {
     *     // ... data to create a Batch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Batch we want to update
     *   }
     * })
    **/
    upsert<T extends BatchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BatchUpsertArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchCountArgs} args - Arguments to filter Batches to count.
     * @example
     * // Count the number of Batches
     * const count = await prisma.batch.count({
     *   where: {
     *     // ... the filter for the Batches we want to count
     *   }
     * })
    **/
    count<T extends BatchCountArgs>(
      args?: Subset<T, BatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Batch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BatchAggregateArgs>(args: Subset<T, BatchAggregateArgs>): Prisma.PrismaPromise<GetBatchAggregateType<T>>

    /**
     * Group by Batch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BatchGroupByArgs['orderBy'] }
        : { orderBy?: BatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Batch model
   */
  readonly fields: BatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Batch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BatchClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Batch model
   */ 
  interface BatchFieldRefs {
    readonly uid: FieldRef<"Batch", 'String'>
    readonly sequence: FieldRef<"Batch", 'Int'>
    readonly type: FieldRef<"Batch", 'String'>
    readonly metadata: FieldRef<"Batch", 'String'>
    readonly signerAccountId: FieldRef<"Batch", 'String'>
    readonly signedData: FieldRef<"Batch", 'String'>
    readonly signatureField: FieldRef<"Batch", 'String'>
    readonly signatureScalar: FieldRef<"Batch", 'String'>
    readonly commitment: FieldRef<"Batch", 'String'>
    readonly size: FieldRef<"Batch", 'Int'>
    readonly state: FieldRef<"Batch", 'Int'>
    readonly submitedUTC: FieldRef<"Batch", 'DateTime'>
    readonly doneUTC: FieldRef<"Batch", 'DateTime'>
    readonly BatchesAccountId: FieldRef<"Batch", 'String'>
    readonly BatchReceivedTxnUid: FieldRef<"Batch", 'String'>
    readonly BatchesCommitedTxnUid: FieldRef<"Batch", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Batch findUnique
   */
  export type BatchFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where: BatchWhereUniqueInput
  }


  /**
   * Batch findUniqueOrThrow
   */
  export type BatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where: BatchWhereUniqueInput
  }


  /**
   * Batch findFirst
   */
  export type BatchFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Batches.
     */
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }


  /**
   * Batch findFirstOrThrow
   */
  export type BatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Batches.
     */
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }


  /**
   * Batch findMany
   */
  export type BatchFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Filter, which Batches to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }


  /**
   * Batch create
   */
  export type BatchCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * The data needed to create a Batch.
     */
    data: XOR<BatchCreateInput, BatchUncheckedCreateInput>
  }


  /**
   * Batch createMany
   */
  export type BatchCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Batches.
     */
    data: BatchCreateManyInput | BatchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Batch update
   */
  export type BatchUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * The data needed to update a Batch.
     */
    data: XOR<BatchUpdateInput, BatchUncheckedUpdateInput>
    /**
     * Choose, which Batch to update.
     */
    where: BatchWhereUniqueInput
  }


  /**
   * Batch updateMany
   */
  export type BatchUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Batches.
     */
    data: XOR<BatchUpdateManyMutationInput, BatchUncheckedUpdateManyInput>
    /**
     * Filter which Batches to update
     */
    where?: BatchWhereInput
  }


  /**
   * Batch upsert
   */
  export type BatchUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * The filter to search for the Batch to update in case it exists.
     */
    where: BatchWhereUniqueInput
    /**
     * In case the Batch found by the `where` argument doesn't exist, create a new Batch with this data.
     */
    create: XOR<BatchCreateInput, BatchUncheckedCreateInput>
    /**
     * In case the Batch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BatchUpdateInput, BatchUncheckedUpdateInput>
  }


  /**
   * Batch delete
   */
  export type BatchDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Filter which Batch to delete.
     */
    where: BatchWhereUniqueInput
  }


  /**
   * Batch deleteMany
   */
  export type BatchDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Batches to delete
     */
    where?: BatchWhereInput
  }


  /**
   * Batch without action
   */
  export type BatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
  }



  /**
   * Model State
   */


  export type AggregateState = {
    _count: StateCountAggregateOutputType | null
    _avg: StateAvgAggregateOutputType | null
    _sum: StateSumAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  export type StateAvgAggregateOutputType = {
    id: number | null
  }

  export type StateSumAggregateOutputType = {
    id: number | null
  }

  export type StateMinAggregateOutputType = {
    id: number | null
    label: string | null
  }

  export type StateMaxAggregateOutputType = {
    id: number | null
    label: string | null
  }

  export type StateCountAggregateOutputType = {
    id: number
    label: number
    _all: number
  }


  export type StateAvgAggregateInputType = {
    id?: true
  }

  export type StateSumAggregateInputType = {
    id?: true
  }

  export type StateMinAggregateInputType = {
    id?: true
    label?: true
  }

  export type StateMaxAggregateInputType = {
    id?: true
    label?: true
  }

  export type StateCountAggregateInputType = {
    id?: true
    label?: true
    _all?: true
  }

  export type StateAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which State to aggregate.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned States
    **/
    _count?: true | StateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StateMaxAggregateInputType
  }

  export type GetStateAggregateType<T extends StateAggregateArgs> = {
        [P in keyof T & keyof AggregateState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateState[P]>
      : GetScalarType<T[P], AggregateState[P]>
  }




  export type StateGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: StateWhereInput
    orderBy?: StateOrderByWithAggregationInput | StateOrderByWithAggregationInput[]
    by: StateScalarFieldEnum[] | StateScalarFieldEnum
    having?: StateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StateCountAggregateInputType | true
    _avg?: StateAvgAggregateInputType
    _sum?: StateSumAggregateInputType
    _min?: StateMinAggregateInputType
    _max?: StateMaxAggregateInputType
  }


  export type StateGroupByOutputType = {
    id: number
    label: string
    _count: StateCountAggregateOutputType | null
    _avg: StateAvgAggregateOutputType | null
    _sum: StateSumAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  type GetStateGroupByPayload<T extends StateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StateGroupByOutputType[P]>
            : GetScalarType<T[P], StateGroupByOutputType[P]>
        }
      >
    >


  export type StateSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
  }, ExtArgs["result"]["state"]>

  export type StateSelectScalar = {
    id?: boolean
    label?: boolean
  }


  type StateGetPayload<S extends boolean | null | undefined | StateArgs> = $Types.GetResult<StatePayload, S>

  type StateCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<StateFindManyArgs, 'select' | 'include'> & {
      select?: StateCountAggregateInputType | true
    }

  export interface StateDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['State'], meta: { name: 'State' } }
    /**
     * Find zero or one State that matches the filter.
     * @param {StateFindUniqueArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StateFindUniqueArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one State that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StateFindUniqueOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first State that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StateFindFirstArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first State that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more States that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all States
     * const states = await prisma.state.findMany()
     * 
     * // Get first 10 States
     * const states = await prisma.state.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stateWithIdOnly = await prisma.state.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<StatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a State.
     * @param {StateCreateArgs} args - Arguments to create a State.
     * @example
     * // Create one State
     * const State = await prisma.state.create({
     *   data: {
     *     // ... data to create a State
     *   }
     * })
     * 
    **/
    create<T extends StateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StateCreateArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many States.
     *     @param {StateCreateManyArgs} args - Arguments to create many States.
     *     @example
     *     // Create many States
     *     const state = await prisma.state.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a State.
     * @param {StateDeleteArgs} args - Arguments to delete one State.
     * @example
     * // Delete one State
     * const State = await prisma.state.delete({
     *   where: {
     *     // ... filter to delete one State
     *   }
     * })
     * 
    **/
    delete<T extends StateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StateDeleteArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one State.
     * @param {StateUpdateArgs} args - Arguments to update one State.
     * @example
     * // Update one State
     * const state = await prisma.state.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StateUpdateArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more States.
     * @param {StateDeleteManyArgs} args - Arguments to filter States to delete.
     * @example
     * // Delete a few States
     * const { count } = await prisma.state.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many States
     * const state = await prisma.state.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one State.
     * @param {StateUpsertArgs} args - Arguments to update or create a State.
     * @example
     * // Update or create a State
     * const state = await prisma.state.upsert({
     *   create: {
     *     // ... data to create a State
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the State we want to update
     *   }
     * })
    **/
    upsert<T extends StateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StateUpsertArgs<ExtArgs>>
    ): Prisma__StateClient<$Types.GetResult<StatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateCountArgs} args - Arguments to filter States to count.
     * @example
     * // Count the number of States
     * const count = await prisma.state.count({
     *   where: {
     *     // ... the filter for the States we want to count
     *   }
     * })
    **/
    count<T extends StateCountArgs>(
      args?: Subset<T, StateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StateAggregateArgs>(args: Subset<T, StateAggregateArgs>): Prisma.PrismaPromise<GetStateAggregateType<T>>

    /**
     * Group by State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StateGroupByArgs['orderBy'] }
        : { orderBy?: StateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the State model
   */
  readonly fields: StateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for State.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StateClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the State model
   */ 
  interface StateFieldRefs {
    readonly id: FieldRef<"State", 'Int'>
    readonly label: FieldRef<"State", 'String'>
  }
    

  // Custom InputTypes

  /**
   * State findUnique
   */
  export type StateFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }


  /**
   * State findUniqueOrThrow
   */
  export type StateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }


  /**
   * State findFirst
   */
  export type StateFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }


  /**
   * State findFirstOrThrow
   */
  export type StateFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }


  /**
   * State findMany
   */
  export type StateFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Filter, which States to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }


  /**
   * State create
   */
  export type StateCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * The data needed to create a State.
     */
    data: XOR<StateCreateInput, StateUncheckedCreateInput>
  }


  /**
   * State createMany
   */
  export type StateCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many States.
     */
    data: StateCreateManyInput | StateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * State update
   */
  export type StateUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * The data needed to update a State.
     */
    data: XOR<StateUpdateInput, StateUncheckedUpdateInput>
    /**
     * Choose, which State to update.
     */
    where: StateWhereUniqueInput
  }


  /**
   * State updateMany
   */
  export type StateUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update States.
     */
    data: XOR<StateUpdateManyMutationInput, StateUncheckedUpdateManyInput>
    /**
     * Filter which States to update
     */
    where?: StateWhereInput
  }


  /**
   * State upsert
   */
  export type StateUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * The filter to search for the State to update in case it exists.
     */
    where: StateWhereUniqueInput
    /**
     * In case the State found by the `where` argument doesn't exist, create a new State with this data.
     */
    create: XOR<StateCreateInput, StateUncheckedCreateInput>
    /**
     * In case the State was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StateUpdateInput, StateUncheckedUpdateInput>
  }


  /**
   * State delete
   */
  export type StateDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Filter which State to delete.
     */
    where: StateWhereUniqueInput
  }


  /**
   * State deleteMany
   */
  export type StateDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which States to delete
     */
    where?: StateWhereInput
  }


  /**
   * State without action
   */
  export type StateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
  }



  /**
   * Model TransactionQueue
   */


  export type AggregateTransactionQueue = {
    _count: TransactionQueueCountAggregateOutputType | null
    _avg: TransactionQueueAvgAggregateOutputType | null
    _sum: TransactionQueueSumAggregateOutputType | null
    _min: TransactionQueueMinAggregateOutputType | null
    _max: TransactionQueueMaxAggregateOutputType | null
  }

  export type TransactionQueueAvgAggregateOutputType = {
    sequence: number | null
    state: number | null
    retries: number | null
  }

  export type TransactionQueueSumAggregateOutputType = {
    sequence: number | null
    state: number | null
    retries: number | null
  }

  export type TransactionQueueMinAggregateOutputType = {
    uid: string | null
    sequence: number | null
    queue: string | null
    type: string | null
    data: string | null
    state: number | null
    receivedUTC: Date | null
    submitedUTC: Date | null
    doneUTC: Date | null
    retries: number | null
    hash: string | null
    done: string | null
    error: string | null
  }

  export type TransactionQueueMaxAggregateOutputType = {
    uid: string | null
    sequence: number | null
    queue: string | null
    type: string | null
    data: string | null
    state: number | null
    receivedUTC: Date | null
    submitedUTC: Date | null
    doneUTC: Date | null
    retries: number | null
    hash: string | null
    done: string | null
    error: string | null
  }

  export type TransactionQueueCountAggregateOutputType = {
    uid: number
    sequence: number
    queue: number
    type: number
    data: number
    state: number
    receivedUTC: number
    submitedUTC: number
    doneUTC: number
    retries: number
    hash: number
    done: number
    error: number
    _all: number
  }


  export type TransactionQueueAvgAggregateInputType = {
    sequence?: true
    state?: true
    retries?: true
  }

  export type TransactionQueueSumAggregateInputType = {
    sequence?: true
    state?: true
    retries?: true
  }

  export type TransactionQueueMinAggregateInputType = {
    uid?: true
    sequence?: true
    queue?: true
    type?: true
    data?: true
    state?: true
    receivedUTC?: true
    submitedUTC?: true
    doneUTC?: true
    retries?: true
    hash?: true
    done?: true
    error?: true
  }

  export type TransactionQueueMaxAggregateInputType = {
    uid?: true
    sequence?: true
    queue?: true
    type?: true
    data?: true
    state?: true
    receivedUTC?: true
    submitedUTC?: true
    doneUTC?: true
    retries?: true
    hash?: true
    done?: true
    error?: true
  }

  export type TransactionQueueCountAggregateInputType = {
    uid?: true
    sequence?: true
    queue?: true
    type?: true
    data?: true
    state?: true
    receivedUTC?: true
    submitedUTC?: true
    doneUTC?: true
    retries?: true
    hash?: true
    done?: true
    error?: true
    _all?: true
  }

  export type TransactionQueueAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionQueue to aggregate.
     */
    where?: TransactionQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionQueues to fetch.
     */
    orderBy?: TransactionQueueOrderByWithRelationInput | TransactionQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionQueues
    **/
    _count?: true | TransactionQueueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionQueueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionQueueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionQueueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionQueueMaxAggregateInputType
  }

  export type GetTransactionQueueAggregateType<T extends TransactionQueueAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionQueue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionQueue[P]>
      : GetScalarType<T[P], AggregateTransactionQueue[P]>
  }




  export type TransactionQueueGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransactionQueueWhereInput
    orderBy?: TransactionQueueOrderByWithAggregationInput | TransactionQueueOrderByWithAggregationInput[]
    by: TransactionQueueScalarFieldEnum[] | TransactionQueueScalarFieldEnum
    having?: TransactionQueueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionQueueCountAggregateInputType | true
    _avg?: TransactionQueueAvgAggregateInputType
    _sum?: TransactionQueueSumAggregateInputType
    _min?: TransactionQueueMinAggregateInputType
    _max?: TransactionQueueMaxAggregateInputType
  }


  export type TransactionQueueGroupByOutputType = {
    uid: string
    sequence: number
    queue: string
    type: string
    data: string
    state: number
    receivedUTC: Date
    submitedUTC: Date
    doneUTC: Date | null
    retries: number
    hash: string
    done: string
    error: string
    _count: TransactionQueueCountAggregateOutputType | null
    _avg: TransactionQueueAvgAggregateOutputType | null
    _sum: TransactionQueueSumAggregateOutputType | null
    _min: TransactionQueueMinAggregateOutputType | null
    _max: TransactionQueueMaxAggregateOutputType | null
  }

  type GetTransactionQueueGroupByPayload<T extends TransactionQueueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionQueueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionQueueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionQueueGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionQueueGroupByOutputType[P]>
        }
      >
    >


  export type TransactionQueueSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    sequence?: boolean
    queue?: boolean
    type?: boolean
    data?: boolean
    state?: boolean
    receivedUTC?: boolean
    submitedUTC?: boolean
    doneUTC?: boolean
    retries?: boolean
    hash?: boolean
    done?: boolean
    error?: boolean
  }, ExtArgs["result"]["transactionQueue"]>

  export type TransactionQueueSelectScalar = {
    uid?: boolean
    sequence?: boolean
    queue?: boolean
    type?: boolean
    data?: boolean
    state?: boolean
    receivedUTC?: boolean
    submitedUTC?: boolean
    doneUTC?: boolean
    retries?: boolean
    hash?: boolean
    done?: boolean
    error?: boolean
  }


  type TransactionQueueGetPayload<S extends boolean | null | undefined | TransactionQueueArgs> = $Types.GetResult<TransactionQueuePayload, S>

  type TransactionQueueCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TransactionQueueFindManyArgs, 'select' | 'include'> & {
      select?: TransactionQueueCountAggregateInputType | true
    }

  export interface TransactionQueueDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionQueue'], meta: { name: 'TransactionQueue' } }
    /**
     * Find zero or one TransactionQueue that matches the filter.
     * @param {TransactionQueueFindUniqueArgs} args - Arguments to find a TransactionQueue
     * @example
     * // Get one TransactionQueue
     * const transactionQueue = await prisma.transactionQueue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionQueueFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionQueueFindUniqueArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TransactionQueue that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransactionQueueFindUniqueOrThrowArgs} args - Arguments to find a TransactionQueue
     * @example
     * // Get one TransactionQueue
     * const transactionQueue = await prisma.transactionQueue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionQueueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionQueueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TransactionQueue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionQueueFindFirstArgs} args - Arguments to find a TransactionQueue
     * @example
     * // Get one TransactionQueue
     * const transactionQueue = await prisma.transactionQueue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionQueueFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionQueueFindFirstArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TransactionQueue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionQueueFindFirstOrThrowArgs} args - Arguments to find a TransactionQueue
     * @example
     * // Get one TransactionQueue
     * const transactionQueue = await prisma.transactionQueue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionQueueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionQueueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TransactionQueues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionQueueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionQueues
     * const transactionQueues = await prisma.transactionQueue.findMany()
     * 
     * // Get first 10 TransactionQueues
     * const transactionQueues = await prisma.transactionQueue.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const transactionQueueWithUidOnly = await prisma.transactionQueue.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends TransactionQueueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionQueueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TransactionQueue.
     * @param {TransactionQueueCreateArgs} args - Arguments to create a TransactionQueue.
     * @example
     * // Create one TransactionQueue
     * const TransactionQueue = await prisma.transactionQueue.create({
     *   data: {
     *     // ... data to create a TransactionQueue
     *   }
     * })
     * 
    **/
    create<T extends TransactionQueueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionQueueCreateArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TransactionQueues.
     *     @param {TransactionQueueCreateManyArgs} args - Arguments to create many TransactionQueues.
     *     @example
     *     // Create many TransactionQueues
     *     const transactionQueue = await prisma.transactionQueue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionQueueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionQueueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TransactionQueue.
     * @param {TransactionQueueDeleteArgs} args - Arguments to delete one TransactionQueue.
     * @example
     * // Delete one TransactionQueue
     * const TransactionQueue = await prisma.transactionQueue.delete({
     *   where: {
     *     // ... filter to delete one TransactionQueue
     *   }
     * })
     * 
    **/
    delete<T extends TransactionQueueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionQueueDeleteArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TransactionQueue.
     * @param {TransactionQueueUpdateArgs} args - Arguments to update one TransactionQueue.
     * @example
     * // Update one TransactionQueue
     * const transactionQueue = await prisma.transactionQueue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionQueueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionQueueUpdateArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TransactionQueues.
     * @param {TransactionQueueDeleteManyArgs} args - Arguments to filter TransactionQueues to delete.
     * @example
     * // Delete a few TransactionQueues
     * const { count } = await prisma.transactionQueue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionQueueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionQueueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionQueueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionQueues
     * const transactionQueue = await prisma.transactionQueue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionQueueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionQueueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransactionQueue.
     * @param {TransactionQueueUpsertArgs} args - Arguments to update or create a TransactionQueue.
     * @example
     * // Update or create a TransactionQueue
     * const transactionQueue = await prisma.transactionQueue.upsert({
     *   create: {
     *     // ... data to create a TransactionQueue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionQueue we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionQueueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionQueueUpsertArgs<ExtArgs>>
    ): Prisma__TransactionQueueClient<$Types.GetResult<TransactionQueuePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TransactionQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionQueueCountArgs} args - Arguments to filter TransactionQueues to count.
     * @example
     * // Count the number of TransactionQueues
     * const count = await prisma.transactionQueue.count({
     *   where: {
     *     // ... the filter for the TransactionQueues we want to count
     *   }
     * })
    **/
    count<T extends TransactionQueueCountArgs>(
      args?: Subset<T, TransactionQueueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionQueueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionQueueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionQueueAggregateArgs>(args: Subset<T, TransactionQueueAggregateArgs>): Prisma.PrismaPromise<GetTransactionQueueAggregateType<T>>

    /**
     * Group by TransactionQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionQueueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionQueueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionQueueGroupByArgs['orderBy'] }
        : { orderBy?: TransactionQueueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionQueueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionQueueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionQueue model
   */
  readonly fields: TransactionQueueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionQueue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionQueueClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the TransactionQueue model
   */ 
  interface TransactionQueueFieldRefs {
    readonly uid: FieldRef<"TransactionQueue", 'String'>
    readonly sequence: FieldRef<"TransactionQueue", 'Int'>
    readonly queue: FieldRef<"TransactionQueue", 'String'>
    readonly type: FieldRef<"TransactionQueue", 'String'>
    readonly data: FieldRef<"TransactionQueue", 'String'>
    readonly state: FieldRef<"TransactionQueue", 'Int'>
    readonly receivedUTC: FieldRef<"TransactionQueue", 'DateTime'>
    readonly submitedUTC: FieldRef<"TransactionQueue", 'DateTime'>
    readonly doneUTC: FieldRef<"TransactionQueue", 'DateTime'>
    readonly retries: FieldRef<"TransactionQueue", 'Int'>
    readonly hash: FieldRef<"TransactionQueue", 'String'>
    readonly done: FieldRef<"TransactionQueue", 'String'>
    readonly error: FieldRef<"TransactionQueue", 'String'>
  }
    

  // Custom InputTypes

  /**
   * TransactionQueue findUnique
   */
  export type TransactionQueueFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * Filter, which TransactionQueue to fetch.
     */
    where: TransactionQueueWhereUniqueInput
  }


  /**
   * TransactionQueue findUniqueOrThrow
   */
  export type TransactionQueueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * Filter, which TransactionQueue to fetch.
     */
    where: TransactionQueueWhereUniqueInput
  }


  /**
   * TransactionQueue findFirst
   */
  export type TransactionQueueFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * Filter, which TransactionQueue to fetch.
     */
    where?: TransactionQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionQueues to fetch.
     */
    orderBy?: TransactionQueueOrderByWithRelationInput | TransactionQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionQueues.
     */
    cursor?: TransactionQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionQueues.
     */
    distinct?: TransactionQueueScalarFieldEnum | TransactionQueueScalarFieldEnum[]
  }


  /**
   * TransactionQueue findFirstOrThrow
   */
  export type TransactionQueueFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * Filter, which TransactionQueue to fetch.
     */
    where?: TransactionQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionQueues to fetch.
     */
    orderBy?: TransactionQueueOrderByWithRelationInput | TransactionQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionQueues.
     */
    cursor?: TransactionQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionQueues.
     */
    distinct?: TransactionQueueScalarFieldEnum | TransactionQueueScalarFieldEnum[]
  }


  /**
   * TransactionQueue findMany
   */
  export type TransactionQueueFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * Filter, which TransactionQueues to fetch.
     */
    where?: TransactionQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionQueues to fetch.
     */
    orderBy?: TransactionQueueOrderByWithRelationInput | TransactionQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionQueues.
     */
    cursor?: TransactionQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionQueues.
     */
    skip?: number
    distinct?: TransactionQueueScalarFieldEnum | TransactionQueueScalarFieldEnum[]
  }


  /**
   * TransactionQueue create
   */
  export type TransactionQueueCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * The data needed to create a TransactionQueue.
     */
    data: XOR<TransactionQueueCreateInput, TransactionQueueUncheckedCreateInput>
  }


  /**
   * TransactionQueue createMany
   */
  export type TransactionQueueCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionQueues.
     */
    data: TransactionQueueCreateManyInput | TransactionQueueCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TransactionQueue update
   */
  export type TransactionQueueUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * The data needed to update a TransactionQueue.
     */
    data: XOR<TransactionQueueUpdateInput, TransactionQueueUncheckedUpdateInput>
    /**
     * Choose, which TransactionQueue to update.
     */
    where: TransactionQueueWhereUniqueInput
  }


  /**
   * TransactionQueue updateMany
   */
  export type TransactionQueueUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionQueues.
     */
    data: XOR<TransactionQueueUpdateManyMutationInput, TransactionQueueUncheckedUpdateManyInput>
    /**
     * Filter which TransactionQueues to update
     */
    where?: TransactionQueueWhereInput
  }


  /**
   * TransactionQueue upsert
   */
  export type TransactionQueueUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * The filter to search for the TransactionQueue to update in case it exists.
     */
    where: TransactionQueueWhereUniqueInput
    /**
     * In case the TransactionQueue found by the `where` argument doesn't exist, create a new TransactionQueue with this data.
     */
    create: XOR<TransactionQueueCreateInput, TransactionQueueUncheckedCreateInput>
    /**
     * In case the TransactionQueue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionQueueUpdateInput, TransactionQueueUncheckedUpdateInput>
  }


  /**
   * TransactionQueue delete
   */
  export type TransactionQueueDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
    /**
     * Filter which TransactionQueue to delete.
     */
    where: TransactionQueueWhereUniqueInput
  }


  /**
   * TransactionQueue deleteMany
   */
  export type TransactionQueueDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionQueues to delete
     */
    where?: TransactionQueueWhereInput
  }


  /**
   * TransactionQueue without action
   */
  export type TransactionQueueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionQueue
     */
    select?: TransactionQueueSelect<ExtArgs> | null
  }



  /**
   * Model TransactionEvent
   */


  export type AggregateTransactionEvent = {
    _count: TransactionEventCountAggregateOutputType | null
    _avg: TransactionEventAvgAggregateOutputType | null
    _sum: TransactionEventSumAggregateOutputType | null
    _min: TransactionEventMinAggregateOutputType | null
    _max: TransactionEventMaxAggregateOutputType | null
  }

  export type TransactionEventAvgAggregateOutputType = {
    sequence: number | null
    state: number | null
  }

  export type TransactionEventSumAggregateOutputType = {
    sequence: number | null
    state: number | null
  }

  export type TransactionEventMinAggregateOutputType = {
    sequence: number | null
    type: string | null
    subject: string | null
    payload: string | null
    state: number | null
    emittedUTC: Date | null
  }

  export type TransactionEventMaxAggregateOutputType = {
    sequence: number | null
    type: string | null
    subject: string | null
    payload: string | null
    state: number | null
    emittedUTC: Date | null
  }

  export type TransactionEventCountAggregateOutputType = {
    sequence: number
    type: number
    subject: number
    payload: number
    state: number
    emittedUTC: number
    _all: number
  }


  export type TransactionEventAvgAggregateInputType = {
    sequence?: true
    state?: true
  }

  export type TransactionEventSumAggregateInputType = {
    sequence?: true
    state?: true
  }

  export type TransactionEventMinAggregateInputType = {
    sequence?: true
    type?: true
    subject?: true
    payload?: true
    state?: true
    emittedUTC?: true
  }

  export type TransactionEventMaxAggregateInputType = {
    sequence?: true
    type?: true
    subject?: true
    payload?: true
    state?: true
    emittedUTC?: true
  }

  export type TransactionEventCountAggregateInputType = {
    sequence?: true
    type?: true
    subject?: true
    payload?: true
    state?: true
    emittedUTC?: true
    _all?: true
  }

  export type TransactionEventAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionEvent to aggregate.
     */
    where?: TransactionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionEvents to fetch.
     */
    orderBy?: TransactionEventOrderByWithRelationInput | TransactionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionEvents
    **/
    _count?: true | TransactionEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionEventMaxAggregateInputType
  }

  export type GetTransactionEventAggregateType<T extends TransactionEventAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionEvent[P]>
      : GetScalarType<T[P], AggregateTransactionEvent[P]>
  }




  export type TransactionEventGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TransactionEventWhereInput
    orderBy?: TransactionEventOrderByWithAggregationInput | TransactionEventOrderByWithAggregationInput[]
    by: TransactionEventScalarFieldEnum[] | TransactionEventScalarFieldEnum
    having?: TransactionEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionEventCountAggregateInputType | true
    _avg?: TransactionEventAvgAggregateInputType
    _sum?: TransactionEventSumAggregateInputType
    _min?: TransactionEventMinAggregateInputType
    _max?: TransactionEventMaxAggregateInputType
  }


  export type TransactionEventGroupByOutputType = {
    sequence: number
    type: string
    subject: string
    payload: string
    state: number | null
    emittedUTC: Date | null
    _count: TransactionEventCountAggregateOutputType | null
    _avg: TransactionEventAvgAggregateOutputType | null
    _sum: TransactionEventSumAggregateOutputType | null
    _min: TransactionEventMinAggregateOutputType | null
    _max: TransactionEventMaxAggregateOutputType | null
  }

  type GetTransactionEventGroupByPayload<T extends TransactionEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionEventGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionEventGroupByOutputType[P]>
        }
      >
    >


  export type TransactionEventSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sequence?: boolean
    type?: boolean
    subject?: boolean
    payload?: boolean
    state?: boolean
    emittedUTC?: boolean
  }, ExtArgs["result"]["transactionEvent"]>

  export type TransactionEventSelectScalar = {
    sequence?: boolean
    type?: boolean
    subject?: boolean
    payload?: boolean
    state?: boolean
    emittedUTC?: boolean
  }


  type TransactionEventGetPayload<S extends boolean | null | undefined | TransactionEventArgs> = $Types.GetResult<TransactionEventPayload, S>

  type TransactionEventCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TransactionEventFindManyArgs, 'select' | 'include'> & {
      select?: TransactionEventCountAggregateInputType | true
    }

  export interface TransactionEventDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionEvent'], meta: { name: 'TransactionEvent' } }
    /**
     * Find zero or one TransactionEvent that matches the filter.
     * @param {TransactionEventFindUniqueArgs} args - Arguments to find a TransactionEvent
     * @example
     * // Get one TransactionEvent
     * const transactionEvent = await prisma.transactionEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionEventFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionEventFindUniqueArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TransactionEvent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransactionEventFindUniqueOrThrowArgs} args - Arguments to find a TransactionEvent
     * @example
     * // Get one TransactionEvent
     * const transactionEvent = await prisma.transactionEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionEventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionEventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TransactionEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionEventFindFirstArgs} args - Arguments to find a TransactionEvent
     * @example
     * // Get one TransactionEvent
     * const transactionEvent = await prisma.transactionEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionEventFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionEventFindFirstArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TransactionEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionEventFindFirstOrThrowArgs} args - Arguments to find a TransactionEvent
     * @example
     * // Get one TransactionEvent
     * const transactionEvent = await prisma.transactionEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionEventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionEventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TransactionEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionEventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionEvents
     * const transactionEvents = await prisma.transactionEvent.findMany()
     * 
     * // Get first 10 TransactionEvents
     * const transactionEvents = await prisma.transactionEvent.findMany({ take: 10 })
     * 
     * // Only select the `sequence`
     * const transactionEventWithSequenceOnly = await prisma.transactionEvent.findMany({ select: { sequence: true } })
     * 
    **/
    findMany<T extends TransactionEventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionEventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TransactionEvent.
     * @param {TransactionEventCreateArgs} args - Arguments to create a TransactionEvent.
     * @example
     * // Create one TransactionEvent
     * const TransactionEvent = await prisma.transactionEvent.create({
     *   data: {
     *     // ... data to create a TransactionEvent
     *   }
     * })
     * 
    **/
    create<T extends TransactionEventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionEventCreateArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TransactionEvents.
     *     @param {TransactionEventCreateManyArgs} args - Arguments to create many TransactionEvents.
     *     @example
     *     // Create many TransactionEvents
     *     const transactionEvent = await prisma.transactionEvent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionEventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionEventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TransactionEvent.
     * @param {TransactionEventDeleteArgs} args - Arguments to delete one TransactionEvent.
     * @example
     * // Delete one TransactionEvent
     * const TransactionEvent = await prisma.transactionEvent.delete({
     *   where: {
     *     // ... filter to delete one TransactionEvent
     *   }
     * })
     * 
    **/
    delete<T extends TransactionEventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionEventDeleteArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TransactionEvent.
     * @param {TransactionEventUpdateArgs} args - Arguments to update one TransactionEvent.
     * @example
     * // Update one TransactionEvent
     * const transactionEvent = await prisma.transactionEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionEventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionEventUpdateArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TransactionEvents.
     * @param {TransactionEventDeleteManyArgs} args - Arguments to filter TransactionEvents to delete.
     * @example
     * // Delete a few TransactionEvents
     * const { count } = await prisma.transactionEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionEventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionEventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionEvents
     * const transactionEvent = await prisma.transactionEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionEventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionEventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransactionEvent.
     * @param {TransactionEventUpsertArgs} args - Arguments to update or create a TransactionEvent.
     * @example
     * // Update or create a TransactionEvent
     * const transactionEvent = await prisma.transactionEvent.upsert({
     *   create: {
     *     // ... data to create a TransactionEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionEvent we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionEventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionEventUpsertArgs<ExtArgs>>
    ): Prisma__TransactionEventClient<$Types.GetResult<TransactionEventPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TransactionEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionEventCountArgs} args - Arguments to filter TransactionEvents to count.
     * @example
     * // Count the number of TransactionEvents
     * const count = await prisma.transactionEvent.count({
     *   where: {
     *     // ... the filter for the TransactionEvents we want to count
     *   }
     * })
    **/
    count<T extends TransactionEventCountArgs>(
      args?: Subset<T, TransactionEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionEventAggregateArgs>(args: Subset<T, TransactionEventAggregateArgs>): Prisma.PrismaPromise<GetTransactionEventAggregateType<T>>

    /**
     * Group by TransactionEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionEventGroupByArgs['orderBy'] }
        : { orderBy?: TransactionEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionEvent model
   */
  readonly fields: TransactionEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionEventClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the TransactionEvent model
   */ 
  interface TransactionEventFieldRefs {
    readonly sequence: FieldRef<"TransactionEvent", 'Int'>
    readonly type: FieldRef<"TransactionEvent", 'String'>
    readonly subject: FieldRef<"TransactionEvent", 'String'>
    readonly payload: FieldRef<"TransactionEvent", 'String'>
    readonly state: FieldRef<"TransactionEvent", 'Int'>
    readonly emittedUTC: FieldRef<"TransactionEvent", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * TransactionEvent findUnique
   */
  export type TransactionEventFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * Filter, which TransactionEvent to fetch.
     */
    where: TransactionEventWhereUniqueInput
  }


  /**
   * TransactionEvent findUniqueOrThrow
   */
  export type TransactionEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * Filter, which TransactionEvent to fetch.
     */
    where: TransactionEventWhereUniqueInput
  }


  /**
   * TransactionEvent findFirst
   */
  export type TransactionEventFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * Filter, which TransactionEvent to fetch.
     */
    where?: TransactionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionEvents to fetch.
     */
    orderBy?: TransactionEventOrderByWithRelationInput | TransactionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionEvents.
     */
    cursor?: TransactionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionEvents.
     */
    distinct?: TransactionEventScalarFieldEnum | TransactionEventScalarFieldEnum[]
  }


  /**
   * TransactionEvent findFirstOrThrow
   */
  export type TransactionEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * Filter, which TransactionEvent to fetch.
     */
    where?: TransactionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionEvents to fetch.
     */
    orderBy?: TransactionEventOrderByWithRelationInput | TransactionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionEvents.
     */
    cursor?: TransactionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionEvents.
     */
    distinct?: TransactionEventScalarFieldEnum | TransactionEventScalarFieldEnum[]
  }


  /**
   * TransactionEvent findMany
   */
  export type TransactionEventFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * Filter, which TransactionEvents to fetch.
     */
    where?: TransactionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionEvents to fetch.
     */
    orderBy?: TransactionEventOrderByWithRelationInput | TransactionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionEvents.
     */
    cursor?: TransactionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionEvents.
     */
    skip?: number
    distinct?: TransactionEventScalarFieldEnum | TransactionEventScalarFieldEnum[]
  }


  /**
   * TransactionEvent create
   */
  export type TransactionEventCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * The data needed to create a TransactionEvent.
     */
    data?: XOR<TransactionEventCreateInput, TransactionEventUncheckedCreateInput>
  }


  /**
   * TransactionEvent createMany
   */
  export type TransactionEventCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionEvents.
     */
    data: TransactionEventCreateManyInput | TransactionEventCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TransactionEvent update
   */
  export type TransactionEventUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * The data needed to update a TransactionEvent.
     */
    data: XOR<TransactionEventUpdateInput, TransactionEventUncheckedUpdateInput>
    /**
     * Choose, which TransactionEvent to update.
     */
    where: TransactionEventWhereUniqueInput
  }


  /**
   * TransactionEvent updateMany
   */
  export type TransactionEventUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionEvents.
     */
    data: XOR<TransactionEventUpdateManyMutationInput, TransactionEventUncheckedUpdateManyInput>
    /**
     * Filter which TransactionEvents to update
     */
    where?: TransactionEventWhereInput
  }


  /**
   * TransactionEvent upsert
   */
  export type TransactionEventUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * The filter to search for the TransactionEvent to update in case it exists.
     */
    where: TransactionEventWhereUniqueInput
    /**
     * In case the TransactionEvent found by the `where` argument doesn't exist, create a new TransactionEvent with this data.
     */
    create: XOR<TransactionEventCreateInput, TransactionEventUncheckedCreateInput>
    /**
     * In case the TransactionEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionEventUpdateInput, TransactionEventUncheckedUpdateInput>
  }


  /**
   * TransactionEvent delete
   */
  export type TransactionEventDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
    /**
     * Filter which TransactionEvent to delete.
     */
    where: TransactionEventWhereUniqueInput
  }


  /**
   * TransactionEvent deleteMany
   */
  export type TransactionEventDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionEvents to delete
     */
    where?: TransactionEventWhereInput
  }


  /**
   * TransactionEvent without action
   */
  export type TransactionEventArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionEvent
     */
    select?: TransactionEventSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MerkleMapScalarFieldEnum: {
    id: 'id',
    name: 'name',
    root: 'root',
    size: 'size',
    height: 'height',
    createdUtc: 'createdUtc',
    updatedUtc: 'updatedUtc'
  };

  export type MerkleMapScalarFieldEnum = (typeof MerkleMapScalarFieldEnum)[keyof typeof MerkleMapScalarFieldEnum]


  export const MerkleMapLeafScalarFieldEnum: {
    uid: 'uid',
    mapId: 'mapId',
    index: 'index',
    key: 'key',
    hash: 'hash',
    data: 'data',
    createdUtc: 'createdUtc',
    updatedUtc: 'updatedUtc'
  };

  export type MerkleMapLeafScalarFieldEnum = (typeof MerkleMapLeafScalarFieldEnum)[keyof typeof MerkleMapLeafScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    uid: 'uid',
    otp: 'otp',
    email: 'email',
    createdUtc: 'createdUtc',
    updatedUtc: 'updatedUtc'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const PersonScalarFieldEnum: {
    uid: 'uid',
    accountId: 'accountId',
    state: 'state',
    fullName: 'fullName',
    description: 'description',
    image: 'image',
    email: 'email',
    phone: 'phone',
    telegram: 'telegram',
    preferences: 'preferences',
    createdUTC: 'createdUTC',
    updatedUTC: 'updatedUTC',
    approvedUTC: 'approvedUTC'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const CommunityScalarFieldEnum: {
    uid: 'uid',
    accountId: 'accountId',
    adminUid: 'adminUid',
    state: 'state',
    name: 'name',
    description: 'description',
    image: 'image',
    createdUTC: 'createdUTC',
    updatedUTC: 'updatedUTC',
    approvedUTC: 'approvedUTC',
    xadmins: 'xadmins'
  };

  export type CommunityScalarFieldEnum = (typeof CommunityScalarFieldEnum)[keyof typeof CommunityScalarFieldEnum]


  export const MembersScalarFieldEnum: {
    uid: 'uid',
    communityUid: 'communityUid',
    personUid: 'personUid',
    role: 'role',
    createdUTC: 'createdUTC',
    approvedUTC: 'approvedUTC'
  };

  export type MembersScalarFieldEnum = (typeof MembersScalarFieldEnum)[keyof typeof MembersScalarFieldEnum]


  export const ClaimScalarFieldEnum: {
    uid: 'uid',
    communityUid: 'communityUid',
    applicantUid: 'applicantUid',
    planUid: 'planUid',
    state: 'state',
    accountId: 'accountId',
    alias: 'alias',
    createdUTC: 'createdUTC',
    updatedUTC: 'updatedUTC',
    votedUTC: 'votedUTC',
    issuedUTC: 'issuedUTC',
    dueUTC: 'dueUTC',
    requiredVotes: 'requiredVotes',
    requiredPositives: 'requiredPositives',
    positiveVotes: 'positiveVotes',
    negativeVotes: 'negativeVotes',
    ignoredVotes: 'ignoredVotes',
    evidenceData: 'evidenceData'
  };

  export type ClaimScalarFieldEnum = (typeof ClaimScalarFieldEnum)[keyof typeof ClaimScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    uid: 'uid',
    communityUid: 'communityUid',
    state: 'state',
    name: 'name',
    alias: 'alias',
    description: 'description',
    image: 'image',
    template: 'template',
    evidence: 'evidence',
    strategy: 'strategy',
    createdUTC: 'createdUTC',
    updatedUTC: 'updatedUTC',
    approvedUTC: 'approvedUTC',
    fee: 'fee',
    rewardsShare: 'rewardsShare',
    communityShare: 'communityShare',
    protocolShare: 'protocolShare',
    total: 'total',
    available: 'available',
    expiration: 'expiration',
    revocable: 'revocable',
    startsUTC: 'startsUTC',
    endsUTC: 'endsUTC'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const CredentialScalarFieldEnum: {
    uid: 'uid',
    accountId: 'accountId',
    applicantId: 'applicantId',
    claimId: 'claimId',
    applicantUid: 'applicantUid',
    communityUid: 'communityUid',
    claimUid: 'claimUid',
    type: 'type',
    description: 'description',
    community: 'community',
    image: 'image',
    alias: 'alias',
    stars: 'stars',
    metadata: 'metadata',
    revocable: 'revocable',
    issuedUTC: 'issuedUTC',
    expiresUTC: 'expiresUTC'
  };

  export type CredentialScalarFieldEnum = (typeof CredentialScalarFieldEnum)[keyof typeof CredentialScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    uid: 'uid',
    claimUid: 'claimUid',
    assigneeUid: 'assigneeUid',
    state: 'state',
    assignedUTC: 'assignedUTC',
    completedUTC: 'completedUTC',
    dueUTC: 'dueUTC',
    rewarded: 'rewarded',
    reason: 'reason',
    result: 'result'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const ProposedScalarFieldEnum: {
    uid: 'uid',
    role: 'role',
    personUid: 'personUid',
    communityUid: 'communityUid',
    createdUTC: 'createdUTC'
  };

  export type ProposedScalarFieldEnum = (typeof ProposedScalarFieldEnum)[keyof typeof ProposedScalarFieldEnum]


  export const BatchScalarFieldEnum: {
    uid: 'uid',
    sequence: 'sequence',
    type: 'type',
    metadata: 'metadata',
    signerAccountId: 'signerAccountId',
    signedData: 'signedData',
    signatureField: 'signatureField',
    signatureScalar: 'signatureScalar',
    commitment: 'commitment',
    size: 'size',
    state: 'state',
    submitedUTC: 'submitedUTC',
    doneUTC: 'doneUTC',
    BatchesAccountId: 'BatchesAccountId',
    BatchReceivedTxnUid: 'BatchReceivedTxnUid',
    BatchesCommitedTxnUid: 'BatchesCommitedTxnUid'
  };

  export type BatchScalarFieldEnum = (typeof BatchScalarFieldEnum)[keyof typeof BatchScalarFieldEnum]


  export const StateScalarFieldEnum: {
    id: 'id',
    label: 'label'
  };

  export type StateScalarFieldEnum = (typeof StateScalarFieldEnum)[keyof typeof StateScalarFieldEnum]


  export const TransactionQueueScalarFieldEnum: {
    uid: 'uid',
    sequence: 'sequence',
    queue: 'queue',
    type: 'type',
    data: 'data',
    state: 'state',
    receivedUTC: 'receivedUTC',
    submitedUTC: 'submitedUTC',
    doneUTC: 'doneUTC',
    retries: 'retries',
    hash: 'hash',
    done: 'done',
    error: 'error'
  };

  export type TransactionQueueScalarFieldEnum = (typeof TransactionQueueScalarFieldEnum)[keyof typeof TransactionQueueScalarFieldEnum]


  export const TransactionEventScalarFieldEnum: {
    sequence: 'sequence',
    type: 'type',
    subject: 'subject',
    payload: 'payload',
    state: 'state',
    emittedUTC: 'emittedUTC'
  };

  export type TransactionEventScalarFieldEnum = (typeof TransactionEventScalarFieldEnum)[keyof typeof TransactionEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MerkleMapWhereInput = {
    AND?: MerkleMapWhereInput | MerkleMapWhereInput[]
    OR?: MerkleMapWhereInput[]
    NOT?: MerkleMapWhereInput | MerkleMapWhereInput[]
    id?: IntFilter<"MerkleMap"> | number
    name?: StringFilter<"MerkleMap"> | string
    root?: BigIntFilter<"MerkleMap"> | bigint | number
    size?: IntFilter<"MerkleMap"> | number
    height?: IntFilter<"MerkleMap"> | number
    createdUtc?: DateTimeFilter<"MerkleMap"> | Date | string
    updatedUtc?: DateTimeFilter<"MerkleMap"> | Date | string
    leafs?: MerkleMapLeafListRelationFilter
  }

  export type MerkleMapOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    root?: SortOrder
    size?: SortOrder
    height?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
    leafs?: MerkleMapLeafOrderByRelationAggregateInput
  }

  export type MerkleMapWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MerkleMapWhereInput | MerkleMapWhereInput[]
    OR?: MerkleMapWhereInput[]
    NOT?: MerkleMapWhereInput | MerkleMapWhereInput[]
    name?: StringFilter<"MerkleMap"> | string
    root?: BigIntFilter<"MerkleMap"> | bigint | number
    size?: IntFilter<"MerkleMap"> | number
    height?: IntFilter<"MerkleMap"> | number
    createdUtc?: DateTimeFilter<"MerkleMap"> | Date | string
    updatedUtc?: DateTimeFilter<"MerkleMap"> | Date | string
    leafs?: MerkleMapLeafListRelationFilter
  }, "id">

  export type MerkleMapOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    root?: SortOrder
    size?: SortOrder
    height?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
    _count?: MerkleMapCountOrderByAggregateInput
    _avg?: MerkleMapAvgOrderByAggregateInput
    _max?: MerkleMapMaxOrderByAggregateInput
    _min?: MerkleMapMinOrderByAggregateInput
    _sum?: MerkleMapSumOrderByAggregateInput
  }

  export type MerkleMapScalarWhereWithAggregatesInput = {
    AND?: MerkleMapScalarWhereWithAggregatesInput | MerkleMapScalarWhereWithAggregatesInput[]
    OR?: MerkleMapScalarWhereWithAggregatesInput[]
    NOT?: MerkleMapScalarWhereWithAggregatesInput | MerkleMapScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MerkleMap"> | number
    name?: StringWithAggregatesFilter<"MerkleMap"> | string
    root?: BigIntWithAggregatesFilter<"MerkleMap"> | bigint | number
    size?: IntWithAggregatesFilter<"MerkleMap"> | number
    height?: IntWithAggregatesFilter<"MerkleMap"> | number
    createdUtc?: DateTimeWithAggregatesFilter<"MerkleMap"> | Date | string
    updatedUtc?: DateTimeWithAggregatesFilter<"MerkleMap"> | Date | string
  }

  export type MerkleMapLeafWhereInput = {
    AND?: MerkleMapLeafWhereInput | MerkleMapLeafWhereInput[]
    OR?: MerkleMapLeafWhereInput[]
    NOT?: MerkleMapLeafWhereInput | MerkleMapLeafWhereInput[]
    uid?: StringFilter<"MerkleMapLeaf"> | string
    mapId?: IntFilter<"MerkleMapLeaf"> | number
    index?: BigIntFilter<"MerkleMapLeaf"> | bigint | number
    key?: StringFilter<"MerkleMapLeaf"> | string
    hash?: StringFilter<"MerkleMapLeaf"> | string
    data?: StringNullableFilter<"MerkleMapLeaf"> | string | null
    createdUtc?: DateTimeFilter<"MerkleMapLeaf"> | Date | string
    updatedUtc?: DateTimeFilter<"MerkleMapLeaf"> | Date | string
    map?: XOR<MerkleMapRelationFilter, MerkleMapWhereInput>
  }

  export type MerkleMapLeafOrderByWithRelationInput = {
    uid?: SortOrder
    mapId?: SortOrder
    index?: SortOrder
    key?: SortOrder
    hash?: SortOrder
    data?: SortOrderInput | SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
    map?: MerkleMapOrderByWithRelationInput
  }

  export type MerkleMapLeafWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: MerkleMapLeafWhereInput | MerkleMapLeafWhereInput[]
    OR?: MerkleMapLeafWhereInput[]
    NOT?: MerkleMapLeafWhereInput | MerkleMapLeafWhereInput[]
    mapId?: IntFilter<"MerkleMapLeaf"> | number
    index?: BigIntFilter<"MerkleMapLeaf"> | bigint | number
    key?: StringFilter<"MerkleMapLeaf"> | string
    hash?: StringFilter<"MerkleMapLeaf"> | string
    data?: StringNullableFilter<"MerkleMapLeaf"> | string | null
    createdUtc?: DateTimeFilter<"MerkleMapLeaf"> | Date | string
    updatedUtc?: DateTimeFilter<"MerkleMapLeaf"> | Date | string
    map?: XOR<MerkleMapRelationFilter, MerkleMapWhereInput>
  }, "uid">

  export type MerkleMapLeafOrderByWithAggregationInput = {
    uid?: SortOrder
    mapId?: SortOrder
    index?: SortOrder
    key?: SortOrder
    hash?: SortOrder
    data?: SortOrderInput | SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
    _count?: MerkleMapLeafCountOrderByAggregateInput
    _avg?: MerkleMapLeafAvgOrderByAggregateInput
    _max?: MerkleMapLeafMaxOrderByAggregateInput
    _min?: MerkleMapLeafMinOrderByAggregateInput
    _sum?: MerkleMapLeafSumOrderByAggregateInput
  }

  export type MerkleMapLeafScalarWhereWithAggregatesInput = {
    AND?: MerkleMapLeafScalarWhereWithAggregatesInput | MerkleMapLeafScalarWhereWithAggregatesInput[]
    OR?: MerkleMapLeafScalarWhereWithAggregatesInput[]
    NOT?: MerkleMapLeafScalarWhereWithAggregatesInput | MerkleMapLeafScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"MerkleMapLeaf"> | string
    mapId?: IntWithAggregatesFilter<"MerkleMapLeaf"> | number
    index?: BigIntWithAggregatesFilter<"MerkleMapLeaf"> | bigint | number
    key?: StringWithAggregatesFilter<"MerkleMapLeaf"> | string
    hash?: StringWithAggregatesFilter<"MerkleMapLeaf"> | string
    data?: StringNullableWithAggregatesFilter<"MerkleMapLeaf"> | string | null
    createdUtc?: DateTimeWithAggregatesFilter<"MerkleMapLeaf"> | Date | string
    updatedUtc?: DateTimeWithAggregatesFilter<"MerkleMapLeaf"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    uid?: StringFilter<"Session"> | string
    otp?: StringFilter<"Session"> | string
    email?: StringFilter<"Session"> | string
    createdUtc?: DateTimeFilter<"Session"> | Date | string
    updatedUtc?: DateTimeFilter<"Session"> | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    uid?: SortOrder
    otp?: SortOrder
    email?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    otp?: StringFilter<"Session"> | string
    email?: StringFilter<"Session"> | string
    createdUtc?: DateTimeFilter<"Session"> | Date | string
    updatedUtc?: DateTimeFilter<"Session"> | Date | string
  }, "uid" | "uid">

  export type SessionOrderByWithAggregationInput = {
    uid?: SortOrder
    otp?: SortOrder
    email?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Session"> | string
    otp?: StringWithAggregatesFilter<"Session"> | string
    email?: StringWithAggregatesFilter<"Session"> | string
    createdUtc?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedUtc?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    uid?: StringFilter<"Person"> | string
    accountId?: StringNullableFilter<"Person"> | string | null
    state?: StringFilter<"Person"> | string
    fullName?: StringFilter<"Person"> | string
    description?: StringNullableFilter<"Person"> | string | null
    image?: StringNullableFilter<"Person"> | string | null
    email?: StringFilter<"Person"> | string
    phone?: StringNullableFilter<"Person"> | string | null
    telegram?: StringNullableFilter<"Person"> | string | null
    preferences?: StringNullableFilter<"Person"> | string | null
    createdUTC?: DateTimeFilter<"Person"> | Date | string
    updatedUTC?: DateTimeNullableFilter<"Person"> | Date | string | null
    approvedUTC?: DateTimeNullableFilter<"Person"> | Date | string | null
  }

  export type PersonOrderByWithRelationInput = {
    uid?: SortOrder
    accountId?: SortOrderInput | SortOrder
    state?: SortOrder
    fullName?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    telegram?: SortOrderInput | SortOrder
    preferences?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrderInput | SortOrder
    approvedUTC?: SortOrderInput | SortOrder
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    email?: string
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    accountId?: StringNullableFilter<"Person"> | string | null
    state?: StringFilter<"Person"> | string
    fullName?: StringFilter<"Person"> | string
    description?: StringNullableFilter<"Person"> | string | null
    image?: StringNullableFilter<"Person"> | string | null
    phone?: StringNullableFilter<"Person"> | string | null
    telegram?: StringNullableFilter<"Person"> | string | null
    preferences?: StringNullableFilter<"Person"> | string | null
    createdUTC?: DateTimeFilter<"Person"> | Date | string
    updatedUTC?: DateTimeNullableFilter<"Person"> | Date | string | null
    approvedUTC?: DateTimeNullableFilter<"Person"> | Date | string | null
  }, "uid" | "uid" | "email">

  export type PersonOrderByWithAggregationInput = {
    uid?: SortOrder
    accountId?: SortOrderInput | SortOrder
    state?: SortOrder
    fullName?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    telegram?: SortOrderInput | SortOrder
    preferences?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrderInput | SortOrder
    approvedUTC?: SortOrderInput | SortOrder
    _count?: PersonCountOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Person"> | string
    accountId?: StringNullableWithAggregatesFilter<"Person"> | string | null
    state?: StringWithAggregatesFilter<"Person"> | string
    fullName?: StringWithAggregatesFilter<"Person"> | string
    description?: StringNullableWithAggregatesFilter<"Person"> | string | null
    image?: StringNullableWithAggregatesFilter<"Person"> | string | null
    email?: StringWithAggregatesFilter<"Person"> | string
    phone?: StringNullableWithAggregatesFilter<"Person"> | string | null
    telegram?: StringNullableWithAggregatesFilter<"Person"> | string | null
    preferences?: StringNullableWithAggregatesFilter<"Person"> | string | null
    createdUTC?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    updatedUTC?: DateTimeNullableWithAggregatesFilter<"Person"> | Date | string | null
    approvedUTC?: DateTimeNullableWithAggregatesFilter<"Person"> | Date | string | null
  }

  export type CommunityWhereInput = {
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    uid?: StringFilter<"Community"> | string
    accountId?: StringNullableFilter<"Community"> | string | null
    adminUid?: StringFilter<"Community"> | string
    state?: StringFilter<"Community"> | string
    name?: StringFilter<"Community"> | string
    description?: StringNullableFilter<"Community"> | string | null
    image?: StringNullableFilter<"Community"> | string | null
    createdUTC?: DateTimeFilter<"Community"> | Date | string
    updatedUTC?: DateTimeFilter<"Community"> | Date | string
    approvedUTC?: DateTimeNullableFilter<"Community"> | Date | string | null
    xadmins?: StringNullableFilter<"Community"> | string | null
  }

  export type CommunityOrderByWithRelationInput = {
    uid?: SortOrder
    accountId?: SortOrderInput | SortOrder
    adminUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrderInput | SortOrder
    xadmins?: SortOrderInput | SortOrder
  }

  export type CommunityWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    accountId?: StringNullableFilter<"Community"> | string | null
    adminUid?: StringFilter<"Community"> | string
    state?: StringFilter<"Community"> | string
    name?: StringFilter<"Community"> | string
    description?: StringNullableFilter<"Community"> | string | null
    image?: StringNullableFilter<"Community"> | string | null
    createdUTC?: DateTimeFilter<"Community"> | Date | string
    updatedUTC?: DateTimeFilter<"Community"> | Date | string
    approvedUTC?: DateTimeNullableFilter<"Community"> | Date | string | null
    xadmins?: StringNullableFilter<"Community"> | string | null
  }, "uid" | "uid">

  export type CommunityOrderByWithAggregationInput = {
    uid?: SortOrder
    accountId?: SortOrderInput | SortOrder
    adminUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrderInput | SortOrder
    xadmins?: SortOrderInput | SortOrder
    _count?: CommunityCountOrderByAggregateInput
    _max?: CommunityMaxOrderByAggregateInput
    _min?: CommunityMinOrderByAggregateInput
  }

  export type CommunityScalarWhereWithAggregatesInput = {
    AND?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    OR?: CommunityScalarWhereWithAggregatesInput[]
    NOT?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Community"> | string
    accountId?: StringNullableWithAggregatesFilter<"Community"> | string | null
    adminUid?: StringWithAggregatesFilter<"Community"> | string
    state?: StringWithAggregatesFilter<"Community"> | string
    name?: StringWithAggregatesFilter<"Community"> | string
    description?: StringNullableWithAggregatesFilter<"Community"> | string | null
    image?: StringNullableWithAggregatesFilter<"Community"> | string | null
    createdUTC?: DateTimeWithAggregatesFilter<"Community"> | Date | string
    updatedUTC?: DateTimeWithAggregatesFilter<"Community"> | Date | string
    approvedUTC?: DateTimeNullableWithAggregatesFilter<"Community"> | Date | string | null
    xadmins?: StringNullableWithAggregatesFilter<"Community"> | string | null
  }

  export type MembersWhereInput = {
    AND?: MembersWhereInput | MembersWhereInput[]
    OR?: MembersWhereInput[]
    NOT?: MembersWhereInput | MembersWhereInput[]
    uid?: StringFilter<"Members"> | string
    communityUid?: StringFilter<"Members"> | string
    personUid?: StringFilter<"Members"> | string
    role?: StringFilter<"Members"> | string
    createdUTC?: DateTimeFilter<"Members"> | Date | string
    approvedUTC?: DateTimeNullableFilter<"Members"> | Date | string | null
  }

  export type MembersOrderByWithRelationInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    personUid?: SortOrder
    role?: SortOrder
    createdUTC?: SortOrder
    approvedUTC?: SortOrderInput | SortOrder
  }

  export type MembersWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: MembersWhereInput | MembersWhereInput[]
    OR?: MembersWhereInput[]
    NOT?: MembersWhereInput | MembersWhereInput[]
    communityUid?: StringFilter<"Members"> | string
    personUid?: StringFilter<"Members"> | string
    role?: StringFilter<"Members"> | string
    createdUTC?: DateTimeFilter<"Members"> | Date | string
    approvedUTC?: DateTimeNullableFilter<"Members"> | Date | string | null
  }, "uid" | "uid">

  export type MembersOrderByWithAggregationInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    personUid?: SortOrder
    role?: SortOrder
    createdUTC?: SortOrder
    approvedUTC?: SortOrderInput | SortOrder
    _count?: MembersCountOrderByAggregateInput
    _max?: MembersMaxOrderByAggregateInput
    _min?: MembersMinOrderByAggregateInput
  }

  export type MembersScalarWhereWithAggregatesInput = {
    AND?: MembersScalarWhereWithAggregatesInput | MembersScalarWhereWithAggregatesInput[]
    OR?: MembersScalarWhereWithAggregatesInput[]
    NOT?: MembersScalarWhereWithAggregatesInput | MembersScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Members"> | string
    communityUid?: StringWithAggregatesFilter<"Members"> | string
    personUid?: StringWithAggregatesFilter<"Members"> | string
    role?: StringWithAggregatesFilter<"Members"> | string
    createdUTC?: DateTimeWithAggregatesFilter<"Members"> | Date | string
    approvedUTC?: DateTimeNullableWithAggregatesFilter<"Members"> | Date | string | null
  }

  export type ClaimWhereInput = {
    AND?: ClaimWhereInput | ClaimWhereInput[]
    OR?: ClaimWhereInput[]
    NOT?: ClaimWhereInput | ClaimWhereInput[]
    uid?: StringFilter<"Claim"> | string
    communityUid?: StringFilter<"Claim"> | string
    applicantUid?: StringFilter<"Claim"> | string
    planUid?: StringFilter<"Claim"> | string
    state?: IntFilter<"Claim"> | number
    accountId?: StringNullableFilter<"Claim"> | string | null
    alias?: StringNullableFilter<"Claim"> | string | null
    createdUTC?: DateTimeFilter<"Claim"> | Date | string
    updatedUTC?: DateTimeFilter<"Claim"> | Date | string
    votedUTC?: DateTimeNullableFilter<"Claim"> | Date | string | null
    issuedUTC?: DateTimeNullableFilter<"Claim"> | Date | string | null
    dueUTC?: DateTimeNullableFilter<"Claim"> | Date | string | null
    requiredVotes?: IntNullableFilter<"Claim"> | number | null
    requiredPositives?: IntNullableFilter<"Claim"> | number | null
    positiveVotes?: IntNullableFilter<"Claim"> | number | null
    negativeVotes?: IntNullableFilter<"Claim"> | number | null
    ignoredVotes?: IntNullableFilter<"Claim"> | number | null
    evidenceData?: StringNullableFilter<"Claim"> | string | null
  }

  export type ClaimOrderByWithRelationInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    applicantUid?: SortOrder
    planUid?: SortOrder
    state?: SortOrder
    accountId?: SortOrderInput | SortOrder
    alias?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    votedUTC?: SortOrderInput | SortOrder
    issuedUTC?: SortOrderInput | SortOrder
    dueUTC?: SortOrderInput | SortOrder
    requiredVotes?: SortOrderInput | SortOrder
    requiredPositives?: SortOrderInput | SortOrder
    positiveVotes?: SortOrderInput | SortOrder
    negativeVotes?: SortOrderInput | SortOrder
    ignoredVotes?: SortOrderInput | SortOrder
    evidenceData?: SortOrderInput | SortOrder
  }

  export type ClaimWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: ClaimWhereInput | ClaimWhereInput[]
    OR?: ClaimWhereInput[]
    NOT?: ClaimWhereInput | ClaimWhereInput[]
    communityUid?: StringFilter<"Claim"> | string
    applicantUid?: StringFilter<"Claim"> | string
    planUid?: StringFilter<"Claim"> | string
    state?: IntFilter<"Claim"> | number
    accountId?: StringNullableFilter<"Claim"> | string | null
    alias?: StringNullableFilter<"Claim"> | string | null
    createdUTC?: DateTimeFilter<"Claim"> | Date | string
    updatedUTC?: DateTimeFilter<"Claim"> | Date | string
    votedUTC?: DateTimeNullableFilter<"Claim"> | Date | string | null
    issuedUTC?: DateTimeNullableFilter<"Claim"> | Date | string | null
    dueUTC?: DateTimeNullableFilter<"Claim"> | Date | string | null
    requiredVotes?: IntNullableFilter<"Claim"> | number | null
    requiredPositives?: IntNullableFilter<"Claim"> | number | null
    positiveVotes?: IntNullableFilter<"Claim"> | number | null
    negativeVotes?: IntNullableFilter<"Claim"> | number | null
    ignoredVotes?: IntNullableFilter<"Claim"> | number | null
    evidenceData?: StringNullableFilter<"Claim"> | string | null
  }, "uid" | "uid">

  export type ClaimOrderByWithAggregationInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    applicantUid?: SortOrder
    planUid?: SortOrder
    state?: SortOrder
    accountId?: SortOrderInput | SortOrder
    alias?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    votedUTC?: SortOrderInput | SortOrder
    issuedUTC?: SortOrderInput | SortOrder
    dueUTC?: SortOrderInput | SortOrder
    requiredVotes?: SortOrderInput | SortOrder
    requiredPositives?: SortOrderInput | SortOrder
    positiveVotes?: SortOrderInput | SortOrder
    negativeVotes?: SortOrderInput | SortOrder
    ignoredVotes?: SortOrderInput | SortOrder
    evidenceData?: SortOrderInput | SortOrder
    _count?: ClaimCountOrderByAggregateInput
    _avg?: ClaimAvgOrderByAggregateInput
    _max?: ClaimMaxOrderByAggregateInput
    _min?: ClaimMinOrderByAggregateInput
    _sum?: ClaimSumOrderByAggregateInput
  }

  export type ClaimScalarWhereWithAggregatesInput = {
    AND?: ClaimScalarWhereWithAggregatesInput | ClaimScalarWhereWithAggregatesInput[]
    OR?: ClaimScalarWhereWithAggregatesInput[]
    NOT?: ClaimScalarWhereWithAggregatesInput | ClaimScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Claim"> | string
    communityUid?: StringWithAggregatesFilter<"Claim"> | string
    applicantUid?: StringWithAggregatesFilter<"Claim"> | string
    planUid?: StringWithAggregatesFilter<"Claim"> | string
    state?: IntWithAggregatesFilter<"Claim"> | number
    accountId?: StringNullableWithAggregatesFilter<"Claim"> | string | null
    alias?: StringNullableWithAggregatesFilter<"Claim"> | string | null
    createdUTC?: DateTimeWithAggregatesFilter<"Claim"> | Date | string
    updatedUTC?: DateTimeWithAggregatesFilter<"Claim"> | Date | string
    votedUTC?: DateTimeNullableWithAggregatesFilter<"Claim"> | Date | string | null
    issuedUTC?: DateTimeNullableWithAggregatesFilter<"Claim"> | Date | string | null
    dueUTC?: DateTimeNullableWithAggregatesFilter<"Claim"> | Date | string | null
    requiredVotes?: IntNullableWithAggregatesFilter<"Claim"> | number | null
    requiredPositives?: IntNullableWithAggregatesFilter<"Claim"> | number | null
    positiveVotes?: IntNullableWithAggregatesFilter<"Claim"> | number | null
    negativeVotes?: IntNullableWithAggregatesFilter<"Claim"> | number | null
    ignoredVotes?: IntNullableWithAggregatesFilter<"Claim"> | number | null
    evidenceData?: StringNullableWithAggregatesFilter<"Claim"> | string | null
  }

  export type PlanWhereInput = {
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    uid?: StringFilter<"Plan"> | string
    communityUid?: StringFilter<"Plan"> | string
    state?: IntFilter<"Plan"> | number
    name?: StringFilter<"Plan"> | string
    alias?: StringNullableFilter<"Plan"> | string | null
    description?: StringNullableFilter<"Plan"> | string | null
    image?: StringNullableFilter<"Plan"> | string | null
    template?: StringNullableFilter<"Plan"> | string | null
    evidence?: StringNullableFilter<"Plan"> | string | null
    strategy?: StringNullableFilter<"Plan"> | string | null
    createdUTC?: DateTimeFilter<"Plan"> | Date | string
    updatedUTC?: DateTimeFilter<"Plan"> | Date | string
    approvedUTC?: DateTimeNullableFilter<"Plan"> | Date | string | null
    fee?: IntNullableFilter<"Plan"> | number | null
    rewardsShare?: IntNullableFilter<"Plan"> | number | null
    communityShare?: IntNullableFilter<"Plan"> | number | null
    protocolShare?: IntNullableFilter<"Plan"> | number | null
    total?: IntNullableFilter<"Plan"> | number | null
    available?: IntNullableFilter<"Plan"> | number | null
    expiration?: IntNullableFilter<"Plan"> | number | null
    revocable?: BoolNullableFilter<"Plan"> | boolean | null
    startsUTC?: DateTimeNullableFilter<"Plan"> | Date | string | null
    endsUTC?: DateTimeNullableFilter<"Plan"> | Date | string | null
  }

  export type PlanOrderByWithRelationInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    alias?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    template?: SortOrderInput | SortOrder
    evidence?: SortOrderInput | SortOrder
    strategy?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrderInput | SortOrder
    fee?: SortOrderInput | SortOrder
    rewardsShare?: SortOrderInput | SortOrder
    communityShare?: SortOrderInput | SortOrder
    protocolShare?: SortOrderInput | SortOrder
    total?: SortOrderInput | SortOrder
    available?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    revocable?: SortOrderInput | SortOrder
    startsUTC?: SortOrderInput | SortOrder
    endsUTC?: SortOrderInput | SortOrder
  }

  export type PlanWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    communityUid?: StringFilter<"Plan"> | string
    state?: IntFilter<"Plan"> | number
    name?: StringFilter<"Plan"> | string
    alias?: StringNullableFilter<"Plan"> | string | null
    description?: StringNullableFilter<"Plan"> | string | null
    image?: StringNullableFilter<"Plan"> | string | null
    template?: StringNullableFilter<"Plan"> | string | null
    evidence?: StringNullableFilter<"Plan"> | string | null
    strategy?: StringNullableFilter<"Plan"> | string | null
    createdUTC?: DateTimeFilter<"Plan"> | Date | string
    updatedUTC?: DateTimeFilter<"Plan"> | Date | string
    approvedUTC?: DateTimeNullableFilter<"Plan"> | Date | string | null
    fee?: IntNullableFilter<"Plan"> | number | null
    rewardsShare?: IntNullableFilter<"Plan"> | number | null
    communityShare?: IntNullableFilter<"Plan"> | number | null
    protocolShare?: IntNullableFilter<"Plan"> | number | null
    total?: IntNullableFilter<"Plan"> | number | null
    available?: IntNullableFilter<"Plan"> | number | null
    expiration?: IntNullableFilter<"Plan"> | number | null
    revocable?: BoolNullableFilter<"Plan"> | boolean | null
    startsUTC?: DateTimeNullableFilter<"Plan"> | Date | string | null
    endsUTC?: DateTimeNullableFilter<"Plan"> | Date | string | null
  }, "uid" | "uid">

  export type PlanOrderByWithAggregationInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    alias?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    template?: SortOrderInput | SortOrder
    evidence?: SortOrderInput | SortOrder
    strategy?: SortOrderInput | SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrderInput | SortOrder
    fee?: SortOrderInput | SortOrder
    rewardsShare?: SortOrderInput | SortOrder
    communityShare?: SortOrderInput | SortOrder
    protocolShare?: SortOrderInput | SortOrder
    total?: SortOrderInput | SortOrder
    available?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    revocable?: SortOrderInput | SortOrder
    startsUTC?: SortOrderInput | SortOrder
    endsUTC?: SortOrderInput | SortOrder
    _count?: PlanCountOrderByAggregateInput
    _avg?: PlanAvgOrderByAggregateInput
    _max?: PlanMaxOrderByAggregateInput
    _min?: PlanMinOrderByAggregateInput
    _sum?: PlanSumOrderByAggregateInput
  }

  export type PlanScalarWhereWithAggregatesInput = {
    AND?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    OR?: PlanScalarWhereWithAggregatesInput[]
    NOT?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Plan"> | string
    communityUid?: StringWithAggregatesFilter<"Plan"> | string
    state?: IntWithAggregatesFilter<"Plan"> | number
    name?: StringWithAggregatesFilter<"Plan"> | string
    alias?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    description?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    image?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    template?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    evidence?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    strategy?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    createdUTC?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    updatedUTC?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    approvedUTC?: DateTimeNullableWithAggregatesFilter<"Plan"> | Date | string | null
    fee?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    rewardsShare?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    communityShare?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    protocolShare?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    total?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    available?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    expiration?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    revocable?: BoolNullableWithAggregatesFilter<"Plan"> | boolean | null
    startsUTC?: DateTimeNullableWithAggregatesFilter<"Plan"> | Date | string | null
    endsUTC?: DateTimeNullableWithAggregatesFilter<"Plan"> | Date | string | null
  }

  export type CredentialWhereInput = {
    AND?: CredentialWhereInput | CredentialWhereInput[]
    OR?: CredentialWhereInput[]
    NOT?: CredentialWhereInput | CredentialWhereInput[]
    uid?: StringFilter<"Credential"> | string
    accountId?: StringFilter<"Credential"> | string
    applicantId?: StringFilter<"Credential"> | string
    claimId?: StringFilter<"Credential"> | string
    applicantUid?: StringFilter<"Credential"> | string
    communityUid?: StringFilter<"Credential"> | string
    claimUid?: StringFilter<"Credential"> | string
    type?: StringNullableFilter<"Credential"> | string | null
    description?: StringNullableFilter<"Credential"> | string | null
    community?: StringNullableFilter<"Credential"> | string | null
    image?: StringNullableFilter<"Credential"> | string | null
    alias?: StringNullableFilter<"Credential"> | string | null
    stars?: IntNullableFilter<"Credential"> | number | null
    metadata?: StringNullableFilter<"Credential"> | string | null
    revocable?: BoolNullableFilter<"Credential"> | boolean | null
    issuedUTC?: DateTimeNullableFilter<"Credential"> | Date | string | null
    expiresUTC?: DateTimeNullableFilter<"Credential"> | Date | string | null
  }

  export type CredentialOrderByWithRelationInput = {
    uid?: SortOrder
    accountId?: SortOrder
    applicantId?: SortOrder
    claimId?: SortOrder
    applicantUid?: SortOrder
    communityUid?: SortOrder
    claimUid?: SortOrder
    type?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    community?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    alias?: SortOrderInput | SortOrder
    stars?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    revocable?: SortOrderInput | SortOrder
    issuedUTC?: SortOrderInput | SortOrder
    expiresUTC?: SortOrderInput | SortOrder
  }

  export type CredentialWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: CredentialWhereInput | CredentialWhereInput[]
    OR?: CredentialWhereInput[]
    NOT?: CredentialWhereInput | CredentialWhereInput[]
    accountId?: StringFilter<"Credential"> | string
    applicantId?: StringFilter<"Credential"> | string
    claimId?: StringFilter<"Credential"> | string
    applicantUid?: StringFilter<"Credential"> | string
    communityUid?: StringFilter<"Credential"> | string
    claimUid?: StringFilter<"Credential"> | string
    type?: StringNullableFilter<"Credential"> | string | null
    description?: StringNullableFilter<"Credential"> | string | null
    community?: StringNullableFilter<"Credential"> | string | null
    image?: StringNullableFilter<"Credential"> | string | null
    alias?: StringNullableFilter<"Credential"> | string | null
    stars?: IntNullableFilter<"Credential"> | number | null
    metadata?: StringNullableFilter<"Credential"> | string | null
    revocable?: BoolNullableFilter<"Credential"> | boolean | null
    issuedUTC?: DateTimeNullableFilter<"Credential"> | Date | string | null
    expiresUTC?: DateTimeNullableFilter<"Credential"> | Date | string | null
  }, "uid" | "uid">

  export type CredentialOrderByWithAggregationInput = {
    uid?: SortOrder
    accountId?: SortOrder
    applicantId?: SortOrder
    claimId?: SortOrder
    applicantUid?: SortOrder
    communityUid?: SortOrder
    claimUid?: SortOrder
    type?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    community?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    alias?: SortOrderInput | SortOrder
    stars?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    revocable?: SortOrderInput | SortOrder
    issuedUTC?: SortOrderInput | SortOrder
    expiresUTC?: SortOrderInput | SortOrder
    _count?: CredentialCountOrderByAggregateInput
    _avg?: CredentialAvgOrderByAggregateInput
    _max?: CredentialMaxOrderByAggregateInput
    _min?: CredentialMinOrderByAggregateInput
    _sum?: CredentialSumOrderByAggregateInput
  }

  export type CredentialScalarWhereWithAggregatesInput = {
    AND?: CredentialScalarWhereWithAggregatesInput | CredentialScalarWhereWithAggregatesInput[]
    OR?: CredentialScalarWhereWithAggregatesInput[]
    NOT?: CredentialScalarWhereWithAggregatesInput | CredentialScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Credential"> | string
    accountId?: StringWithAggregatesFilter<"Credential"> | string
    applicantId?: StringWithAggregatesFilter<"Credential"> | string
    claimId?: StringWithAggregatesFilter<"Credential"> | string
    applicantUid?: StringWithAggregatesFilter<"Credential"> | string
    communityUid?: StringWithAggregatesFilter<"Credential"> | string
    claimUid?: StringWithAggregatesFilter<"Credential"> | string
    type?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    description?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    community?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    image?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    alias?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    stars?: IntNullableWithAggregatesFilter<"Credential"> | number | null
    metadata?: StringNullableWithAggregatesFilter<"Credential"> | string | null
    revocable?: BoolNullableWithAggregatesFilter<"Credential"> | boolean | null
    issuedUTC?: DateTimeNullableWithAggregatesFilter<"Credential"> | Date | string | null
    expiresUTC?: DateTimeNullableWithAggregatesFilter<"Credential"> | Date | string | null
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    uid?: StringFilter<"Task"> | string
    claimUid?: StringFilter<"Task"> | string
    assigneeUid?: StringFilter<"Task"> | string
    state?: IntFilter<"Task"> | number
    assignedUTC?: DateTimeNullableFilter<"Task"> | Date | string | null
    completedUTC?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueUTC?: DateTimeNullableFilter<"Task"> | Date | string | null
    rewarded?: IntNullableFilter<"Task"> | number | null
    reason?: IntNullableFilter<"Task"> | number | null
    result?: StringNullableFilter<"Task"> | string | null
  }

  export type TaskOrderByWithRelationInput = {
    uid?: SortOrder
    claimUid?: SortOrder
    assigneeUid?: SortOrder
    state?: SortOrder
    assignedUTC?: SortOrderInput | SortOrder
    completedUTC?: SortOrderInput | SortOrder
    dueUTC?: SortOrderInput | SortOrder
    rewarded?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    result?: SortOrderInput | SortOrder
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    claimUid?: StringFilter<"Task"> | string
    assigneeUid?: StringFilter<"Task"> | string
    state?: IntFilter<"Task"> | number
    assignedUTC?: DateTimeNullableFilter<"Task"> | Date | string | null
    completedUTC?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueUTC?: DateTimeNullableFilter<"Task"> | Date | string | null
    rewarded?: IntNullableFilter<"Task"> | number | null
    reason?: IntNullableFilter<"Task"> | number | null
    result?: StringNullableFilter<"Task"> | string | null
  }, "uid" | "uid">

  export type TaskOrderByWithAggregationInput = {
    uid?: SortOrder
    claimUid?: SortOrder
    assigneeUid?: SortOrder
    state?: SortOrder
    assignedUTC?: SortOrderInput | SortOrder
    completedUTC?: SortOrderInput | SortOrder
    dueUTC?: SortOrderInput | SortOrder
    rewarded?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    result?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Task"> | string
    claimUid?: StringWithAggregatesFilter<"Task"> | string
    assigneeUid?: StringWithAggregatesFilter<"Task"> | string
    state?: IntWithAggregatesFilter<"Task"> | number
    assignedUTC?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    completedUTC?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    dueUTC?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    rewarded?: IntNullableWithAggregatesFilter<"Task"> | number | null
    reason?: IntNullableWithAggregatesFilter<"Task"> | number | null
    result?: StringNullableWithAggregatesFilter<"Task"> | string | null
  }

  export type ProposedWhereInput = {
    AND?: ProposedWhereInput | ProposedWhereInput[]
    OR?: ProposedWhereInput[]
    NOT?: ProposedWhereInput | ProposedWhereInput[]
    uid?: StringFilter<"Proposed"> | string
    role?: StringFilter<"Proposed"> | string
    personUid?: StringFilter<"Proposed"> | string
    communityUid?: StringFilter<"Proposed"> | string
    createdUTC?: DateTimeFilter<"Proposed"> | Date | string
  }

  export type ProposedOrderByWithRelationInput = {
    uid?: SortOrder
    role?: SortOrder
    personUid?: SortOrder
    communityUid?: SortOrder
    createdUTC?: SortOrder
  }

  export type ProposedWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: ProposedWhereInput | ProposedWhereInput[]
    OR?: ProposedWhereInput[]
    NOT?: ProposedWhereInput | ProposedWhereInput[]
    role?: StringFilter<"Proposed"> | string
    personUid?: StringFilter<"Proposed"> | string
    communityUid?: StringFilter<"Proposed"> | string
    createdUTC?: DateTimeFilter<"Proposed"> | Date | string
  }, "uid" | "uid">

  export type ProposedOrderByWithAggregationInput = {
    uid?: SortOrder
    role?: SortOrder
    personUid?: SortOrder
    communityUid?: SortOrder
    createdUTC?: SortOrder
    _count?: ProposedCountOrderByAggregateInput
    _max?: ProposedMaxOrderByAggregateInput
    _min?: ProposedMinOrderByAggregateInput
  }

  export type ProposedScalarWhereWithAggregatesInput = {
    AND?: ProposedScalarWhereWithAggregatesInput | ProposedScalarWhereWithAggregatesInput[]
    OR?: ProposedScalarWhereWithAggregatesInput[]
    NOT?: ProposedScalarWhereWithAggregatesInput | ProposedScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Proposed"> | string
    role?: StringWithAggregatesFilter<"Proposed"> | string
    personUid?: StringWithAggregatesFilter<"Proposed"> | string
    communityUid?: StringWithAggregatesFilter<"Proposed"> | string
    createdUTC?: DateTimeWithAggregatesFilter<"Proposed"> | Date | string
  }

  export type BatchWhereInput = {
    AND?: BatchWhereInput | BatchWhereInput[]
    OR?: BatchWhereInput[]
    NOT?: BatchWhereInput | BatchWhereInput[]
    uid?: StringFilter<"Batch"> | string
    sequence?: IntFilter<"Batch"> | number
    type?: StringFilter<"Batch"> | string
    metadata?: StringFilter<"Batch"> | string
    signerAccountId?: StringFilter<"Batch"> | string
    signedData?: StringFilter<"Batch"> | string
    signatureField?: StringFilter<"Batch"> | string
    signatureScalar?: StringFilter<"Batch"> | string
    commitment?: StringFilter<"Batch"> | string
    size?: IntFilter<"Batch"> | number
    state?: IntFilter<"Batch"> | number
    submitedUTC?: DateTimeFilter<"Batch"> | Date | string
    doneUTC?: DateTimeNullableFilter<"Batch"> | Date | string | null
    BatchesAccountId?: StringNullableFilter<"Batch"> | string | null
    BatchReceivedTxnUid?: StringNullableFilter<"Batch"> | string | null
    BatchesCommitedTxnUid?: StringNullableFilter<"Batch"> | string | null
  }

  export type BatchOrderByWithRelationInput = {
    uid?: SortOrder
    sequence?: SortOrder
    type?: SortOrder
    metadata?: SortOrder
    signerAccountId?: SortOrder
    signedData?: SortOrder
    signatureField?: SortOrder
    signatureScalar?: SortOrder
    commitment?: SortOrder
    size?: SortOrder
    state?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrderInput | SortOrder
    BatchesAccountId?: SortOrderInput | SortOrder
    BatchReceivedTxnUid?: SortOrderInput | SortOrder
    BatchesCommitedTxnUid?: SortOrderInput | SortOrder
  }

  export type BatchWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: BatchWhereInput | BatchWhereInput[]
    OR?: BatchWhereInput[]
    NOT?: BatchWhereInput | BatchWhereInput[]
    sequence?: IntFilter<"Batch"> | number
    type?: StringFilter<"Batch"> | string
    metadata?: StringFilter<"Batch"> | string
    signerAccountId?: StringFilter<"Batch"> | string
    signedData?: StringFilter<"Batch"> | string
    signatureField?: StringFilter<"Batch"> | string
    signatureScalar?: StringFilter<"Batch"> | string
    commitment?: StringFilter<"Batch"> | string
    size?: IntFilter<"Batch"> | number
    state?: IntFilter<"Batch"> | number
    submitedUTC?: DateTimeFilter<"Batch"> | Date | string
    doneUTC?: DateTimeNullableFilter<"Batch"> | Date | string | null
    BatchesAccountId?: StringNullableFilter<"Batch"> | string | null
    BatchReceivedTxnUid?: StringNullableFilter<"Batch"> | string | null
    BatchesCommitedTxnUid?: StringNullableFilter<"Batch"> | string | null
  }, "uid" | "uid">

  export type BatchOrderByWithAggregationInput = {
    uid?: SortOrder
    sequence?: SortOrder
    type?: SortOrder
    metadata?: SortOrder
    signerAccountId?: SortOrder
    signedData?: SortOrder
    signatureField?: SortOrder
    signatureScalar?: SortOrder
    commitment?: SortOrder
    size?: SortOrder
    state?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrderInput | SortOrder
    BatchesAccountId?: SortOrderInput | SortOrder
    BatchReceivedTxnUid?: SortOrderInput | SortOrder
    BatchesCommitedTxnUid?: SortOrderInput | SortOrder
    _count?: BatchCountOrderByAggregateInput
    _avg?: BatchAvgOrderByAggregateInput
    _max?: BatchMaxOrderByAggregateInput
    _min?: BatchMinOrderByAggregateInput
    _sum?: BatchSumOrderByAggregateInput
  }

  export type BatchScalarWhereWithAggregatesInput = {
    AND?: BatchScalarWhereWithAggregatesInput | BatchScalarWhereWithAggregatesInput[]
    OR?: BatchScalarWhereWithAggregatesInput[]
    NOT?: BatchScalarWhereWithAggregatesInput | BatchScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"Batch"> | string
    sequence?: IntWithAggregatesFilter<"Batch"> | number
    type?: StringWithAggregatesFilter<"Batch"> | string
    metadata?: StringWithAggregatesFilter<"Batch"> | string
    signerAccountId?: StringWithAggregatesFilter<"Batch"> | string
    signedData?: StringWithAggregatesFilter<"Batch"> | string
    signatureField?: StringWithAggregatesFilter<"Batch"> | string
    signatureScalar?: StringWithAggregatesFilter<"Batch"> | string
    commitment?: StringWithAggregatesFilter<"Batch"> | string
    size?: IntWithAggregatesFilter<"Batch"> | number
    state?: IntWithAggregatesFilter<"Batch"> | number
    submitedUTC?: DateTimeWithAggregatesFilter<"Batch"> | Date | string
    doneUTC?: DateTimeNullableWithAggregatesFilter<"Batch"> | Date | string | null
    BatchesAccountId?: StringNullableWithAggregatesFilter<"Batch"> | string | null
    BatchReceivedTxnUid?: StringNullableWithAggregatesFilter<"Batch"> | string | null
    BatchesCommitedTxnUid?: StringNullableWithAggregatesFilter<"Batch"> | string | null
  }

  export type StateWhereInput = {
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    id?: IntFilter<"State"> | number
    label?: StringFilter<"State"> | string
  }

  export type StateOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type StateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    label?: StringFilter<"State"> | string
  }, "id" | "id">

  export type StateOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    _count?: StateCountOrderByAggregateInput
    _avg?: StateAvgOrderByAggregateInput
    _max?: StateMaxOrderByAggregateInput
    _min?: StateMinOrderByAggregateInput
    _sum?: StateSumOrderByAggregateInput
  }

  export type StateScalarWhereWithAggregatesInput = {
    AND?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    OR?: StateScalarWhereWithAggregatesInput[]
    NOT?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"State"> | number
    label?: StringWithAggregatesFilter<"State"> | string
  }

  export type TransactionQueueWhereInput = {
    AND?: TransactionQueueWhereInput | TransactionQueueWhereInput[]
    OR?: TransactionQueueWhereInput[]
    NOT?: TransactionQueueWhereInput | TransactionQueueWhereInput[]
    uid?: StringFilter<"TransactionQueue"> | string
    sequence?: IntFilter<"TransactionQueue"> | number
    queue?: StringFilter<"TransactionQueue"> | string
    type?: StringFilter<"TransactionQueue"> | string
    data?: StringFilter<"TransactionQueue"> | string
    state?: IntFilter<"TransactionQueue"> | number
    receivedUTC?: DateTimeFilter<"TransactionQueue"> | Date | string
    submitedUTC?: DateTimeFilter<"TransactionQueue"> | Date | string
    doneUTC?: DateTimeNullableFilter<"TransactionQueue"> | Date | string | null
    retries?: IntFilter<"TransactionQueue"> | number
    hash?: StringFilter<"TransactionQueue"> | string
    done?: StringFilter<"TransactionQueue"> | string
    error?: StringFilter<"TransactionQueue"> | string
  }

  export type TransactionQueueOrderByWithRelationInput = {
    uid?: SortOrder
    sequence?: SortOrder
    queue?: SortOrder
    type?: SortOrder
    data?: SortOrder
    state?: SortOrder
    receivedUTC?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrderInput | SortOrder
    retries?: SortOrder
    hash?: SortOrder
    done?: SortOrder
    error?: SortOrder
  }

  export type TransactionQueueWhereUniqueInput = Prisma.AtLeast<{
    uid?: string
    AND?: TransactionQueueWhereInput | TransactionQueueWhereInput[]
    OR?: TransactionQueueWhereInput[]
    NOT?: TransactionQueueWhereInput | TransactionQueueWhereInput[]
    sequence?: IntFilter<"TransactionQueue"> | number
    queue?: StringFilter<"TransactionQueue"> | string
    type?: StringFilter<"TransactionQueue"> | string
    data?: StringFilter<"TransactionQueue"> | string
    state?: IntFilter<"TransactionQueue"> | number
    receivedUTC?: DateTimeFilter<"TransactionQueue"> | Date | string
    submitedUTC?: DateTimeFilter<"TransactionQueue"> | Date | string
    doneUTC?: DateTimeNullableFilter<"TransactionQueue"> | Date | string | null
    retries?: IntFilter<"TransactionQueue"> | number
    hash?: StringFilter<"TransactionQueue"> | string
    done?: StringFilter<"TransactionQueue"> | string
    error?: StringFilter<"TransactionQueue"> | string
  }, "uid" | "uid">

  export type TransactionQueueOrderByWithAggregationInput = {
    uid?: SortOrder
    sequence?: SortOrder
    queue?: SortOrder
    type?: SortOrder
    data?: SortOrder
    state?: SortOrder
    receivedUTC?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrderInput | SortOrder
    retries?: SortOrder
    hash?: SortOrder
    done?: SortOrder
    error?: SortOrder
    _count?: TransactionQueueCountOrderByAggregateInput
    _avg?: TransactionQueueAvgOrderByAggregateInput
    _max?: TransactionQueueMaxOrderByAggregateInput
    _min?: TransactionQueueMinOrderByAggregateInput
    _sum?: TransactionQueueSumOrderByAggregateInput
  }

  export type TransactionQueueScalarWhereWithAggregatesInput = {
    AND?: TransactionQueueScalarWhereWithAggregatesInput | TransactionQueueScalarWhereWithAggregatesInput[]
    OR?: TransactionQueueScalarWhereWithAggregatesInput[]
    NOT?: TransactionQueueScalarWhereWithAggregatesInput | TransactionQueueScalarWhereWithAggregatesInput[]
    uid?: StringWithAggregatesFilter<"TransactionQueue"> | string
    sequence?: IntWithAggregatesFilter<"TransactionQueue"> | number
    queue?: StringWithAggregatesFilter<"TransactionQueue"> | string
    type?: StringWithAggregatesFilter<"TransactionQueue"> | string
    data?: StringWithAggregatesFilter<"TransactionQueue"> | string
    state?: IntWithAggregatesFilter<"TransactionQueue"> | number
    receivedUTC?: DateTimeWithAggregatesFilter<"TransactionQueue"> | Date | string
    submitedUTC?: DateTimeWithAggregatesFilter<"TransactionQueue"> | Date | string
    doneUTC?: DateTimeNullableWithAggregatesFilter<"TransactionQueue"> | Date | string | null
    retries?: IntWithAggregatesFilter<"TransactionQueue"> | number
    hash?: StringWithAggregatesFilter<"TransactionQueue"> | string
    done?: StringWithAggregatesFilter<"TransactionQueue"> | string
    error?: StringWithAggregatesFilter<"TransactionQueue"> | string
  }

  export type TransactionEventWhereInput = {
    AND?: TransactionEventWhereInput | TransactionEventWhereInput[]
    OR?: TransactionEventWhereInput[]
    NOT?: TransactionEventWhereInput | TransactionEventWhereInput[]
    sequence?: IntFilter<"TransactionEvent"> | number
    type?: StringFilter<"TransactionEvent"> | string
    subject?: StringFilter<"TransactionEvent"> | string
    payload?: StringFilter<"TransactionEvent"> | string
    state?: IntNullableFilter<"TransactionEvent"> | number | null
    emittedUTC?: DateTimeNullableFilter<"TransactionEvent"> | Date | string | null
  }

  export type TransactionEventOrderByWithRelationInput = {
    sequence?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    payload?: SortOrder
    state?: SortOrderInput | SortOrder
    emittedUTC?: SortOrderInput | SortOrder
  }

  export type TransactionEventWhereUniqueInput = Prisma.AtLeast<{
    sequence?: number
    AND?: TransactionEventWhereInput | TransactionEventWhereInput[]
    OR?: TransactionEventWhereInput[]
    NOT?: TransactionEventWhereInput | TransactionEventWhereInput[]
    type?: StringFilter<"TransactionEvent"> | string
    subject?: StringFilter<"TransactionEvent"> | string
    payload?: StringFilter<"TransactionEvent"> | string
    state?: IntNullableFilter<"TransactionEvent"> | number | null
    emittedUTC?: DateTimeNullableFilter<"TransactionEvent"> | Date | string | null
  }, "sequence" | "sequence">

  export type TransactionEventOrderByWithAggregationInput = {
    sequence?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    payload?: SortOrder
    state?: SortOrderInput | SortOrder
    emittedUTC?: SortOrderInput | SortOrder
    _count?: TransactionEventCountOrderByAggregateInput
    _avg?: TransactionEventAvgOrderByAggregateInput
    _max?: TransactionEventMaxOrderByAggregateInput
    _min?: TransactionEventMinOrderByAggregateInput
    _sum?: TransactionEventSumOrderByAggregateInput
  }

  export type TransactionEventScalarWhereWithAggregatesInput = {
    AND?: TransactionEventScalarWhereWithAggregatesInput | TransactionEventScalarWhereWithAggregatesInput[]
    OR?: TransactionEventScalarWhereWithAggregatesInput[]
    NOT?: TransactionEventScalarWhereWithAggregatesInput | TransactionEventScalarWhereWithAggregatesInput[]
    sequence?: IntWithAggregatesFilter<"TransactionEvent"> | number
    type?: StringWithAggregatesFilter<"TransactionEvent"> | string
    subject?: StringWithAggregatesFilter<"TransactionEvent"> | string
    payload?: StringWithAggregatesFilter<"TransactionEvent"> | string
    state?: IntNullableWithAggregatesFilter<"TransactionEvent"> | number | null
    emittedUTC?: DateTimeNullableWithAggregatesFilter<"TransactionEvent"> | Date | string | null
  }

  export type MerkleMapCreateInput = {
    name: string
    root: bigint | number
    size: number
    height: number
    createdUtc?: Date | string
    updatedUtc?: Date | string
    leafs?: MerkleMapLeafCreateNestedManyWithoutMapInput
  }

  export type MerkleMapUncheckedCreateInput = {
    id?: number
    name: string
    root: bigint | number
    size: number
    height: number
    createdUtc?: Date | string
    updatedUtc?: Date | string
    leafs?: MerkleMapLeafUncheckedCreateNestedManyWithoutMapInput
  }

  export type MerkleMapUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    root?: BigIntFieldUpdateOperationsInput | bigint | number
    size?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    leafs?: MerkleMapLeafUpdateManyWithoutMapNestedInput
  }

  export type MerkleMapUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    root?: BigIntFieldUpdateOperationsInput | bigint | number
    size?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    leafs?: MerkleMapLeafUncheckedUpdateManyWithoutMapNestedInput
  }

  export type MerkleMapCreateManyInput = {
    id?: number
    name: string
    root: bigint | number
    size: number
    height: number
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    root?: BigIntFieldUpdateOperationsInput | bigint | number
    size?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    root?: BigIntFieldUpdateOperationsInput | bigint | number
    size?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapLeafCreateInput = {
    uid?: string
    index: bigint | number
    key: string
    hash: string
    data?: string | null
    createdUtc?: Date | string
    updatedUtc?: Date | string
    map: MerkleMapCreateNestedOneWithoutLeafsInput
  }

  export type MerkleMapLeafUncheckedCreateInput = {
    uid?: string
    mapId: number
    index: bigint | number
    key: string
    hash: string
    data?: string | null
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapLeafUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    key?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: MerkleMapUpdateOneRequiredWithoutLeafsNestedInput
  }

  export type MerkleMapLeafUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    mapId?: IntFieldUpdateOperationsInput | number
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    key?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapLeafCreateManyInput = {
    uid?: string
    mapId: number
    index: bigint | number
    key: string
    hash: string
    data?: string | null
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapLeafUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    key?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapLeafUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    mapId?: IntFieldUpdateOperationsInput | number
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    key?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    uid?: string
    otp: string
    email: string
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type SessionUncheckedCreateInput = {
    uid?: string
    otp: string
    email: string
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type SessionUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    uid?: string
    otp: string
    email: string
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonCreateInput = {
    uid: string
    accountId?: string | null
    state: string
    fullName: string
    description?: string | null
    image?: string | null
    email: string
    phone?: string | null
    telegram?: string | null
    preferences?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string | null
    approvedUTC?: Date | string | null
  }

  export type PersonUncheckedCreateInput = {
    uid: string
    accountId?: string | null
    state: string
    fullName: string
    description?: string | null
    image?: string | null
    email: string
    phone?: string | null
    telegram?: string | null
    preferences?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string | null
    approvedUTC?: Date | string | null
  }

  export type PersonUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PersonUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PersonCreateManyInput = {
    uid: string
    accountId?: string | null
    state: string
    fullName: string
    description?: string | null
    image?: string | null
    email: string
    phone?: string | null
    telegram?: string | null
    preferences?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string | null
    approvedUTC?: Date | string | null
  }

  export type PersonUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PersonUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CommunityCreateInput = {
    uid: string
    accountId?: string | null
    adminUid: string
    state: string
    name: string
    description?: string | null
    image?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    approvedUTC?: Date | string | null
    xadmins?: string | null
  }

  export type CommunityUncheckedCreateInput = {
    uid: string
    accountId?: string | null
    adminUid: string
    state: string
    name: string
    description?: string | null
    image?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    approvedUTC?: Date | string | null
    xadmins?: string | null
  }

  export type CommunityUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    adminUid?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    xadmins?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommunityUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    adminUid?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    xadmins?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommunityCreateManyInput = {
    uid: string
    accountId?: string | null
    adminUid: string
    state: string
    name: string
    description?: string | null
    image?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    approvedUTC?: Date | string | null
    xadmins?: string | null
  }

  export type CommunityUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    adminUid?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    xadmins?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommunityUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    adminUid?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    xadmins?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembersCreateInput = {
    uid: string
    communityUid: string
    personUid: string
    role?: string
    createdUTC?: Date | string
    approvedUTC?: Date | string | null
  }

  export type MembersUncheckedCreateInput = {
    uid: string
    communityUid: string
    personUid: string
    role?: string
    createdUTC?: Date | string
    approvedUTC?: Date | string | null
  }

  export type MembersUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MembersUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MembersCreateManyInput = {
    uid: string
    communityUid: string
    personUid: string
    role?: string
    createdUTC?: Date | string
    approvedUTC?: Date | string | null
  }

  export type MembersUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MembersUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClaimCreateInput = {
    uid: string
    communityUid: string
    applicantUid: string
    planUid: string
    state: number
    accountId?: string | null
    alias?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    votedUTC?: Date | string | null
    issuedUTC?: Date | string | null
    dueUTC?: Date | string | null
    requiredVotes?: number | null
    requiredPositives?: number | null
    positiveVotes?: number | null
    negativeVotes?: number | null
    ignoredVotes?: number | null
    evidenceData?: string | null
  }

  export type ClaimUncheckedCreateInput = {
    uid: string
    communityUid: string
    applicantUid: string
    planUid: string
    state: number
    accountId?: string | null
    alias?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    votedUTC?: Date | string | null
    issuedUTC?: Date | string | null
    dueUTC?: Date | string | null
    requiredVotes?: number | null
    requiredPositives?: number | null
    positiveVotes?: number | null
    negativeVotes?: number | null
    ignoredVotes?: number | null
    evidenceData?: string | null
  }

  export type ClaimUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    planUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    votedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requiredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    requiredPositives?: NullableIntFieldUpdateOperationsInput | number | null
    positiveVotes?: NullableIntFieldUpdateOperationsInput | number | null
    negativeVotes?: NullableIntFieldUpdateOperationsInput | number | null
    ignoredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    evidenceData?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClaimUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    planUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    votedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requiredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    requiredPositives?: NullableIntFieldUpdateOperationsInput | number | null
    positiveVotes?: NullableIntFieldUpdateOperationsInput | number | null
    negativeVotes?: NullableIntFieldUpdateOperationsInput | number | null
    ignoredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    evidenceData?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClaimCreateManyInput = {
    uid: string
    communityUid: string
    applicantUid: string
    planUid: string
    state: number
    accountId?: string | null
    alias?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    votedUTC?: Date | string | null
    issuedUTC?: Date | string | null
    dueUTC?: Date | string | null
    requiredVotes?: number | null
    requiredPositives?: number | null
    positiveVotes?: number | null
    negativeVotes?: number | null
    ignoredVotes?: number | null
    evidenceData?: string | null
  }

  export type ClaimUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    planUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    votedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requiredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    requiredPositives?: NullableIntFieldUpdateOperationsInput | number | null
    positiveVotes?: NullableIntFieldUpdateOperationsInput | number | null
    negativeVotes?: NullableIntFieldUpdateOperationsInput | number | null
    ignoredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    evidenceData?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClaimUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    planUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    votedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    requiredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    requiredPositives?: NullableIntFieldUpdateOperationsInput | number | null
    positiveVotes?: NullableIntFieldUpdateOperationsInput | number | null
    negativeVotes?: NullableIntFieldUpdateOperationsInput | number | null
    ignoredVotes?: NullableIntFieldUpdateOperationsInput | number | null
    evidenceData?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanCreateInput = {
    uid: string
    communityUid: string
    state: number
    name?: string
    alias?: string | null
    description?: string | null
    image?: string | null
    template?: string | null
    evidence?: string | null
    strategy?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    approvedUTC?: Date | string | null
    fee?: number | null
    rewardsShare?: number | null
    communityShare?: number | null
    protocolShare?: number | null
    total?: number | null
    available?: number | null
    expiration?: number | null
    revocable?: boolean | null
    startsUTC?: Date | string | null
    endsUTC?: Date | string | null
  }

  export type PlanUncheckedCreateInput = {
    uid: string
    communityUid: string
    state: number
    name?: string
    alias?: string | null
    description?: string | null
    image?: string | null
    template?: string | null
    evidence?: string | null
    strategy?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    approvedUTC?: Date | string | null
    fee?: number | null
    rewardsShare?: number | null
    communityShare?: number | null
    protocolShare?: number | null
    total?: number | null
    available?: number | null
    expiration?: number | null
    revocable?: boolean | null
    startsUTC?: Date | string | null
    endsUTC?: Date | string | null
  }

  export type PlanUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    evidence?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fee?: NullableIntFieldUpdateOperationsInput | number | null
    rewardsShare?: NullableIntFieldUpdateOperationsInput | number | null
    communityShare?: NullableIntFieldUpdateOperationsInput | number | null
    protocolShare?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableIntFieldUpdateOperationsInput | number | null
    available?: NullableIntFieldUpdateOperationsInput | number | null
    expiration?: NullableIntFieldUpdateOperationsInput | number | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    startsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    evidence?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fee?: NullableIntFieldUpdateOperationsInput | number | null
    rewardsShare?: NullableIntFieldUpdateOperationsInput | number | null
    communityShare?: NullableIntFieldUpdateOperationsInput | number | null
    protocolShare?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableIntFieldUpdateOperationsInput | number | null
    available?: NullableIntFieldUpdateOperationsInput | number | null
    expiration?: NullableIntFieldUpdateOperationsInput | number | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    startsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanCreateManyInput = {
    uid: string
    communityUid: string
    state: number
    name?: string
    alias?: string | null
    description?: string | null
    image?: string | null
    template?: string | null
    evidence?: string | null
    strategy?: string | null
    createdUTC?: Date | string
    updatedUTC?: Date | string
    approvedUTC?: Date | string | null
    fee?: number | null
    rewardsShare?: number | null
    communityShare?: number | null
    protocolShare?: number | null
    total?: number | null
    available?: number | null
    expiration?: number | null
    revocable?: boolean | null
    startsUTC?: Date | string | null
    endsUTC?: Date | string | null
  }

  export type PlanUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    evidence?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fee?: NullableIntFieldUpdateOperationsInput | number | null
    rewardsShare?: NullableIntFieldUpdateOperationsInput | number | null
    communityShare?: NullableIntFieldUpdateOperationsInput | number | null
    protocolShare?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableIntFieldUpdateOperationsInput | number | null
    available?: NullableIntFieldUpdateOperationsInput | number | null
    expiration?: NullableIntFieldUpdateOperationsInput | number | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    startsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    evidence?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fee?: NullableIntFieldUpdateOperationsInput | number | null
    rewardsShare?: NullableIntFieldUpdateOperationsInput | number | null
    communityShare?: NullableIntFieldUpdateOperationsInput | number | null
    protocolShare?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableIntFieldUpdateOperationsInput | number | null
    available?: NullableIntFieldUpdateOperationsInput | number | null
    expiration?: NullableIntFieldUpdateOperationsInput | number | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    startsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CredentialCreateInput = {
    uid: string
    accountId: string
    applicantId: string
    claimId: string
    applicantUid: string
    communityUid: string
    claimUid: string
    type?: string | null
    description?: string | null
    community?: string | null
    image?: string | null
    alias?: string | null
    stars?: number | null
    metadata?: string | null
    revocable?: boolean | null
    issuedUTC?: Date | string | null
    expiresUTC?: Date | string | null
  }

  export type CredentialUncheckedCreateInput = {
    uid: string
    accountId: string
    applicantId: string
    claimId: string
    applicantUid: string
    communityUid: string
    claimUid: string
    type?: string | null
    description?: string | null
    community?: string | null
    image?: string | null
    alias?: string | null
    stars?: number | null
    metadata?: string | null
    revocable?: boolean | null
    issuedUTC?: Date | string | null
    expiresUTC?: Date | string | null
  }

  export type CredentialUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    claimId?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    community?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    stars?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CredentialUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    claimId?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    community?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    stars?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CredentialCreateManyInput = {
    uid: string
    accountId: string
    applicantId: string
    claimId: string
    applicantUid: string
    communityUid: string
    claimUid: string
    type?: string | null
    description?: string | null
    community?: string | null
    image?: string | null
    alias?: string | null
    stars?: number | null
    metadata?: string | null
    revocable?: boolean | null
    issuedUTC?: Date | string | null
    expiresUTC?: Date | string | null
  }

  export type CredentialUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    claimId?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    community?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    stars?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CredentialUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    claimId?: StringFieldUpdateOperationsInput | string
    applicantUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    community?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    stars?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    revocable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    issuedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TaskCreateInput = {
    uid: string
    claimUid: string
    assigneeUid: string
    state?: number
    assignedUTC?: Date | string | null
    completedUTC?: Date | string | null
    dueUTC?: Date | string | null
    rewarded?: number | null
    reason?: number | null
    result?: string | null
  }

  export type TaskUncheckedCreateInput = {
    uid: string
    claimUid: string
    assigneeUid: string
    state?: number
    assignedUTC?: Date | string | null
    completedUTC?: Date | string | null
    dueUTC?: Date | string | null
    rewarded?: number | null
    reason?: number | null
    result?: string | null
  }

  export type TaskUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    assigneeUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    assignedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewarded?: NullableIntFieldUpdateOperationsInput | number | null
    reason?: NullableIntFieldUpdateOperationsInput | number | null
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    assigneeUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    assignedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewarded?: NullableIntFieldUpdateOperationsInput | number | null
    reason?: NullableIntFieldUpdateOperationsInput | number | null
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateManyInput = {
    uid: string
    claimUid: string
    assigneeUid: string
    state?: number
    assignedUTC?: Date | string | null
    completedUTC?: Date | string | null
    dueUTC?: Date | string | null
    rewarded?: number | null
    reason?: number | null
    result?: string | null
  }

  export type TaskUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    assigneeUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    assignedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewarded?: NullableIntFieldUpdateOperationsInput | number | null
    reason?: NullableIntFieldUpdateOperationsInput | number | null
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    claimUid?: StringFieldUpdateOperationsInput | string
    assigneeUid?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    assignedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewarded?: NullableIntFieldUpdateOperationsInput | number | null
    reason?: NullableIntFieldUpdateOperationsInput | number | null
    result?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProposedCreateInput = {
    uid: string
    role: string
    personUid: string
    communityUid: string
    createdUTC?: Date | string
  }

  export type ProposedUncheckedCreateInput = {
    uid: string
    role: string
    personUid: string
    communityUid: string
    createdUTC?: Date | string
  }

  export type ProposedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposedUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposedCreateManyInput = {
    uid: string
    role: string
    personUid: string
    communityUid: string
    createdUTC?: Date | string
  }

  export type ProposedUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposedUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    personUid?: StringFieldUpdateOperationsInput | string
    communityUid?: StringFieldUpdateOperationsInput | string
    createdUTC?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatchCreateInput = {
    uid: string
    sequence?: number
    type?: string
    metadata?: string
    signerAccountId: string
    signedData?: string
    signatureField?: string
    signatureScalar?: string
    commitment?: string
    size?: number
    state?: number
    submitedUTC?: Date | string
    doneUTC?: Date | string | null
    BatchesAccountId?: string | null
    BatchReceivedTxnUid?: string | null
    BatchesCommitedTxnUid?: string | null
  }

  export type BatchUncheckedCreateInput = {
    uid: string
    sequence?: number
    type?: string
    metadata?: string
    signerAccountId: string
    signedData?: string
    signatureField?: string
    signatureScalar?: string
    commitment?: string
    size?: number
    state?: number
    submitedUTC?: Date | string
    doneUTC?: Date | string | null
    BatchesAccountId?: string | null
    BatchReceivedTxnUid?: string | null
    BatchesCommitedTxnUid?: string | null
  }

  export type BatchUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    signerAccountId?: StringFieldUpdateOperationsInput | string
    signedData?: StringFieldUpdateOperationsInput | string
    signatureField?: StringFieldUpdateOperationsInput | string
    signatureScalar?: StringFieldUpdateOperationsInput | string
    commitment?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    state?: IntFieldUpdateOperationsInput | number
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BatchesAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    BatchReceivedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
    BatchesCommitedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BatchUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    signerAccountId?: StringFieldUpdateOperationsInput | string
    signedData?: StringFieldUpdateOperationsInput | string
    signatureField?: StringFieldUpdateOperationsInput | string
    signatureScalar?: StringFieldUpdateOperationsInput | string
    commitment?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    state?: IntFieldUpdateOperationsInput | number
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BatchesAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    BatchReceivedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
    BatchesCommitedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BatchCreateManyInput = {
    uid: string
    sequence?: number
    type?: string
    metadata?: string
    signerAccountId: string
    signedData?: string
    signatureField?: string
    signatureScalar?: string
    commitment?: string
    size?: number
    state?: number
    submitedUTC?: Date | string
    doneUTC?: Date | string | null
    BatchesAccountId?: string | null
    BatchReceivedTxnUid?: string | null
    BatchesCommitedTxnUid?: string | null
  }

  export type BatchUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    signerAccountId?: StringFieldUpdateOperationsInput | string
    signedData?: StringFieldUpdateOperationsInput | string
    signatureField?: StringFieldUpdateOperationsInput | string
    signatureScalar?: StringFieldUpdateOperationsInput | string
    commitment?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    state?: IntFieldUpdateOperationsInput | number
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BatchesAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    BatchReceivedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
    BatchesCommitedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BatchUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    metadata?: StringFieldUpdateOperationsInput | string
    signerAccountId?: StringFieldUpdateOperationsInput | string
    signedData?: StringFieldUpdateOperationsInput | string
    signatureField?: StringFieldUpdateOperationsInput | string
    signatureScalar?: StringFieldUpdateOperationsInput | string
    commitment?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    state?: IntFieldUpdateOperationsInput | number
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    BatchesAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    BatchReceivedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
    BatchesCommitedTxnUid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StateCreateInput = {
    id: number
    label?: string
  }

  export type StateUncheckedCreateInput = {
    id: number
    label?: string
  }

  export type StateUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StateCreateManyInput = {
    id: number
    label?: string
  }

  export type StateUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionQueueCreateInput = {
    uid: string
    sequence?: number
    queue?: string
    type?: string
    data?: string
    state?: number
    receivedUTC?: Date | string
    submitedUTC: Date | string
    doneUTC?: Date | string | null
    retries?: number
    hash?: string
    done?: string
    error?: string
  }

  export type TransactionQueueUncheckedCreateInput = {
    uid: string
    sequence?: number
    queue?: string
    type?: string
    data?: string
    state?: number
    receivedUTC?: Date | string
    submitedUTC: Date | string
    doneUTC?: Date | string | null
    retries?: number
    hash?: string
    done?: string
    error?: string
  }

  export type TransactionQueueUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    queue?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    receivedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    retries?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
    done?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionQueueUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    queue?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    receivedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    retries?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
    done?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionQueueCreateManyInput = {
    uid: string
    sequence?: number
    queue?: string
    type?: string
    data?: string
    state?: number
    receivedUTC?: Date | string
    submitedUTC: Date | string
    doneUTC?: Date | string | null
    retries?: number
    hash?: string
    done?: string
    error?: string
  }

  export type TransactionQueueUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    queue?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    receivedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    retries?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
    done?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionQueueUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    queue?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    receivedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    submitedUTC?: DateTimeFieldUpdateOperationsInput | Date | string
    doneUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    retries?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
    done?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionEventCreateInput = {
    type?: string
    subject?: string
    payload?: string
    state?: number | null
    emittedUTC?: Date | string | null
  }

  export type TransactionEventUncheckedCreateInput = {
    sequence?: number
    type?: string
    subject?: string
    payload?: string
    state?: number | null
    emittedUTC?: Date | string | null
  }

  export type TransactionEventUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    state?: NullableIntFieldUpdateOperationsInput | number | null
    emittedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionEventUncheckedUpdateInput = {
    sequence?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    state?: NullableIntFieldUpdateOperationsInput | number | null
    emittedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionEventCreateManyInput = {
    sequence?: number
    type?: string
    subject?: string
    payload?: string
    state?: number | null
    emittedUTC?: Date | string | null
  }

  export type TransactionEventUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    state?: NullableIntFieldUpdateOperationsInput | number | null
    emittedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionEventUncheckedUpdateManyInput = {
    sequence?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    state?: NullableIntFieldUpdateOperationsInput | number | null
    emittedUTC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MerkleMapLeafListRelationFilter = {
    every?: MerkleMapLeafWhereInput
    some?: MerkleMapLeafWhereInput
    none?: MerkleMapLeafWhereInput
  }

  export type MerkleMapLeafOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MerkleMapCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    root?: SortOrder
    size?: SortOrder
    height?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type MerkleMapAvgOrderByAggregateInput = {
    id?: SortOrder
    root?: SortOrder
    size?: SortOrder
    height?: SortOrder
  }

  export type MerkleMapMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    root?: SortOrder
    size?: SortOrder
    height?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type MerkleMapMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    root?: SortOrder
    size?: SortOrder
    height?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type MerkleMapSumOrderByAggregateInput = {
    id?: SortOrder
    root?: SortOrder
    size?: SortOrder
    height?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type MerkleMapRelationFilter = {
    is?: MerkleMapWhereInput
    isNot?: MerkleMapWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MerkleMapLeafCountOrderByAggregateInput = {
    uid?: SortOrder
    mapId?: SortOrder
    index?: SortOrder
    key?: SortOrder
    hash?: SortOrder
    data?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type MerkleMapLeafAvgOrderByAggregateInput = {
    mapId?: SortOrder
    index?: SortOrder
  }

  export type MerkleMapLeafMaxOrderByAggregateInput = {
    uid?: SortOrder
    mapId?: SortOrder
    index?: SortOrder
    key?: SortOrder
    hash?: SortOrder
    data?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type MerkleMapLeafMinOrderByAggregateInput = {
    uid?: SortOrder
    mapId?: SortOrder
    index?: SortOrder
    key?: SortOrder
    hash?: SortOrder
    data?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type MerkleMapLeafSumOrderByAggregateInput = {
    mapId?: SortOrder
    index?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    uid?: SortOrder
    otp?: SortOrder
    email?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    uid?: SortOrder
    otp?: SortOrder
    email?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    uid?: SortOrder
    otp?: SortOrder
    email?: SortOrder
    createdUtc?: SortOrder
    updatedUtc?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PersonCountOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    state?: SortOrder
    fullName?: SortOrder
    description?: SortOrder
    image?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    telegram?: SortOrder
    preferences?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    state?: SortOrder
    fullName?: SortOrder
    description?: SortOrder
    image?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    telegram?: SortOrder
    preferences?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    state?: SortOrder
    fullName?: SortOrder
    description?: SortOrder
    image?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    telegram?: SortOrder
    preferences?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CommunityCountOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    adminUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
    xadmins?: SortOrder
  }

  export type CommunityMaxOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    adminUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
    xadmins?: SortOrder
  }

  export type CommunityMinOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    adminUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
    xadmins?: SortOrder
  }

  export type MembersCountOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    personUid?: SortOrder
    role?: SortOrder
    createdUTC?: SortOrder
    approvedUTC?: SortOrder
  }

  export type MembersMaxOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    personUid?: SortOrder
    role?: SortOrder
    createdUTC?: SortOrder
    approvedUTC?: SortOrder
  }

  export type MembersMinOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    personUid?: SortOrder
    role?: SortOrder
    createdUTC?: SortOrder
    approvedUTC?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ClaimCountOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    applicantUid?: SortOrder
    planUid?: SortOrder
    state?: SortOrder
    accountId?: SortOrder
    alias?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    votedUTC?: SortOrder
    issuedUTC?: SortOrder
    dueUTC?: SortOrder
    requiredVotes?: SortOrder
    requiredPositives?: SortOrder
    positiveVotes?: SortOrder
    negativeVotes?: SortOrder
    ignoredVotes?: SortOrder
    evidenceData?: SortOrder
  }

  export type ClaimAvgOrderByAggregateInput = {
    state?: SortOrder
    requiredVotes?: SortOrder
    requiredPositives?: SortOrder
    positiveVotes?: SortOrder
    negativeVotes?: SortOrder
    ignoredVotes?: SortOrder
  }

  export type ClaimMaxOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    applicantUid?: SortOrder
    planUid?: SortOrder
    state?: SortOrder
    accountId?: SortOrder
    alias?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    votedUTC?: SortOrder
    issuedUTC?: SortOrder
    dueUTC?: SortOrder
    requiredVotes?: SortOrder
    requiredPositives?: SortOrder
    positiveVotes?: SortOrder
    negativeVotes?: SortOrder
    ignoredVotes?: SortOrder
    evidenceData?: SortOrder
  }

  export type ClaimMinOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    applicantUid?: SortOrder
    planUid?: SortOrder
    state?: SortOrder
    accountId?: SortOrder
    alias?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    votedUTC?: SortOrder
    issuedUTC?: SortOrder
    dueUTC?: SortOrder
    requiredVotes?: SortOrder
    requiredPositives?: SortOrder
    positiveVotes?: SortOrder
    negativeVotes?: SortOrder
    ignoredVotes?: SortOrder
    evidenceData?: SortOrder
  }

  export type ClaimSumOrderByAggregateInput = {
    state?: SortOrder
    requiredVotes?: SortOrder
    requiredPositives?: SortOrder
    positiveVotes?: SortOrder
    negativeVotes?: SortOrder
    ignoredVotes?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type PlanCountOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    description?: SortOrder
    image?: SortOrder
    template?: SortOrder
    evidence?: SortOrder
    strategy?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
    fee?: SortOrder
    rewardsShare?: SortOrder
    communityShare?: SortOrder
    protocolShare?: SortOrder
    total?: SortOrder
    available?: SortOrder
    expiration?: SortOrder
    revocable?: SortOrder
    startsUTC?: SortOrder
    endsUTC?: SortOrder
  }

  export type PlanAvgOrderByAggregateInput = {
    state?: SortOrder
    fee?: SortOrder
    rewardsShare?: SortOrder
    communityShare?: SortOrder
    protocolShare?: SortOrder
    total?: SortOrder
    available?: SortOrder
    expiration?: SortOrder
  }

  export type PlanMaxOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    description?: SortOrder
    image?: SortOrder
    template?: SortOrder
    evidence?: SortOrder
    strategy?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
    fee?: SortOrder
    rewardsShare?: SortOrder
    communityShare?: SortOrder
    protocolShare?: SortOrder
    total?: SortOrder
    available?: SortOrder
    expiration?: SortOrder
    revocable?: SortOrder
    startsUTC?: SortOrder
    endsUTC?: SortOrder
  }

  export type PlanMinOrderByAggregateInput = {
    uid?: SortOrder
    communityUid?: SortOrder
    state?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    description?: SortOrder
    image?: SortOrder
    template?: SortOrder
    evidence?: SortOrder
    strategy?: SortOrder
    createdUTC?: SortOrder
    updatedUTC?: SortOrder
    approvedUTC?: SortOrder
    fee?: SortOrder
    rewardsShare?: SortOrder
    communityShare?: SortOrder
    protocolShare?: SortOrder
    total?: SortOrder
    available?: SortOrder
    expiration?: SortOrder
    revocable?: SortOrder
    startsUTC?: SortOrder
    endsUTC?: SortOrder
  }

  export type PlanSumOrderByAggregateInput = {
    state?: SortOrder
    fee?: SortOrder
    rewardsShare?: SortOrder
    communityShare?: SortOrder
    protocolShare?: SortOrder
    total?: SortOrder
    available?: SortOrder
    expiration?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CredentialCountOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    applicantId?: SortOrder
    claimId?: SortOrder
    applicantUid?: SortOrder
    communityUid?: SortOrder
    claimUid?: SortOrder
    type?: SortOrder
    description?: SortOrder
    community?: SortOrder
    image?: SortOrder
    alias?: SortOrder
    stars?: SortOrder
    metadata?: SortOrder
    revocable?: SortOrder
    issuedUTC?: SortOrder
    expiresUTC?: SortOrder
  }

  export type CredentialAvgOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type CredentialMaxOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    applicantId?: SortOrder
    claimId?: SortOrder
    applicantUid?: SortOrder
    communityUid?: SortOrder
    claimUid?: SortOrder
    type?: SortOrder
    description?: SortOrder
    community?: SortOrder
    image?: SortOrder
    alias?: SortOrder
    stars?: SortOrder
    metadata?: SortOrder
    revocable?: SortOrder
    issuedUTC?: SortOrder
    expiresUTC?: SortOrder
  }

  export type CredentialMinOrderByAggregateInput = {
    uid?: SortOrder
    accountId?: SortOrder
    applicantId?: SortOrder
    claimId?: SortOrder
    applicantUid?: SortOrder
    communityUid?: SortOrder
    claimUid?: SortOrder
    type?: SortOrder
    description?: SortOrder
    community?: SortOrder
    image?: SortOrder
    alias?: SortOrder
    stars?: SortOrder
    metadata?: SortOrder
    revocable?: SortOrder
    issuedUTC?: SortOrder
    expiresUTC?: SortOrder
  }

  export type CredentialSumOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type TaskCountOrderByAggregateInput = {
    uid?: SortOrder
    claimUid?: SortOrder
    assigneeUid?: SortOrder
    state?: SortOrder
    assignedUTC?: SortOrder
    completedUTC?: SortOrder
    dueUTC?: SortOrder
    rewarded?: SortOrder
    reason?: SortOrder
    result?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    state?: SortOrder
    rewarded?: SortOrder
    reason?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    uid?: SortOrder
    claimUid?: SortOrder
    assigneeUid?: SortOrder
    state?: SortOrder
    assignedUTC?: SortOrder
    completedUTC?: SortOrder
    dueUTC?: SortOrder
    rewarded?: SortOrder
    reason?: SortOrder
    result?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    uid?: SortOrder
    claimUid?: SortOrder
    assigneeUid?: SortOrder
    state?: SortOrder
    assignedUTC?: SortOrder
    completedUTC?: SortOrder
    dueUTC?: SortOrder
    rewarded?: SortOrder
    reason?: SortOrder
    result?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    state?: SortOrder
    rewarded?: SortOrder
    reason?: SortOrder
  }

  export type ProposedCountOrderByAggregateInput = {
    uid?: SortOrder
    role?: SortOrder
    personUid?: SortOrder
    communityUid?: SortOrder
    createdUTC?: SortOrder
  }

  export type ProposedMaxOrderByAggregateInput = {
    uid?: SortOrder
    role?: SortOrder
    personUid?: SortOrder
    communityUid?: SortOrder
    createdUTC?: SortOrder
  }

  export type ProposedMinOrderByAggregateInput = {
    uid?: SortOrder
    role?: SortOrder
    personUid?: SortOrder
    communityUid?: SortOrder
    createdUTC?: SortOrder
  }

  export type BatchCountOrderByAggregateInput = {
    uid?: SortOrder
    sequence?: SortOrder
    type?: SortOrder
    metadata?: SortOrder
    signerAccountId?: SortOrder
    signedData?: SortOrder
    signatureField?: SortOrder
    signatureScalar?: SortOrder
    commitment?: SortOrder
    size?: SortOrder
    state?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrder
    BatchesAccountId?: SortOrder
    BatchReceivedTxnUid?: SortOrder
    BatchesCommitedTxnUid?: SortOrder
  }

  export type BatchAvgOrderByAggregateInput = {
    sequence?: SortOrder
    size?: SortOrder
    state?: SortOrder
  }

  export type BatchMaxOrderByAggregateInput = {
    uid?: SortOrder
    sequence?: SortOrder
    type?: SortOrder
    metadata?: SortOrder
    signerAccountId?: SortOrder
    signedData?: SortOrder
    signatureField?: SortOrder
    signatureScalar?: SortOrder
    commitment?: SortOrder
    size?: SortOrder
    state?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrder
    BatchesAccountId?: SortOrder
    BatchReceivedTxnUid?: SortOrder
    BatchesCommitedTxnUid?: SortOrder
  }

  export type BatchMinOrderByAggregateInput = {
    uid?: SortOrder
    sequence?: SortOrder
    type?: SortOrder
    metadata?: SortOrder
    signerAccountId?: SortOrder
    signedData?: SortOrder
    signatureField?: SortOrder
    signatureScalar?: SortOrder
    commitment?: SortOrder
    size?: SortOrder
    state?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrder
    BatchesAccountId?: SortOrder
    BatchReceivedTxnUid?: SortOrder
    BatchesCommitedTxnUid?: SortOrder
  }

  export type BatchSumOrderByAggregateInput = {
    sequence?: SortOrder
    size?: SortOrder
    state?: SortOrder
  }

  export type StateCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type StateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StateMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type StateMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type StateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TransactionQueueCountOrderByAggregateInput = {
    uid?: SortOrder
    sequence?: SortOrder
    queue?: SortOrder
    type?: SortOrder
    data?: SortOrder
    state?: SortOrder
    receivedUTC?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrder
    retries?: SortOrder
    hash?: SortOrder
    done?: SortOrder
    error?: SortOrder
  }

  export type TransactionQueueAvgOrderByAggregateInput = {
    sequence?: SortOrder
    state?: SortOrder
    retries?: SortOrder
  }

  export type TransactionQueueMaxOrderByAggregateInput = {
    uid?: SortOrder
    sequence?: SortOrder
    queue?: SortOrder
    type?: SortOrder
    data?: SortOrder
    state?: SortOrder
    receivedUTC?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrder
    retries?: SortOrder
    hash?: SortOrder
    done?: SortOrder
    error?: SortOrder
  }

  export type TransactionQueueMinOrderByAggregateInput = {
    uid?: SortOrder
    sequence?: SortOrder
    queue?: SortOrder
    type?: SortOrder
    data?: SortOrder
    state?: SortOrder
    receivedUTC?: SortOrder
    submitedUTC?: SortOrder
    doneUTC?: SortOrder
    retries?: SortOrder
    hash?: SortOrder
    done?: SortOrder
    error?: SortOrder
  }

  export type TransactionQueueSumOrderByAggregateInput = {
    sequence?: SortOrder
    state?: SortOrder
    retries?: SortOrder
  }

  export type TransactionEventCountOrderByAggregateInput = {
    sequence?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    payload?: SortOrder
    state?: SortOrder
    emittedUTC?: SortOrder
  }

  export type TransactionEventAvgOrderByAggregateInput = {
    sequence?: SortOrder
    state?: SortOrder
  }

  export type TransactionEventMaxOrderByAggregateInput = {
    sequence?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    payload?: SortOrder
    state?: SortOrder
    emittedUTC?: SortOrder
  }

  export type TransactionEventMinOrderByAggregateInput = {
    sequence?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    payload?: SortOrder
    state?: SortOrder
    emittedUTC?: SortOrder
  }

  export type TransactionEventSumOrderByAggregateInput = {
    sequence?: SortOrder
    state?: SortOrder
  }

  export type MerkleMapLeafCreateNestedManyWithoutMapInput = {
    create?: XOR<MerkleMapLeafCreateWithoutMapInput, MerkleMapLeafUncheckedCreateWithoutMapInput> | MerkleMapLeafCreateWithoutMapInput[] | MerkleMapLeafUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MerkleMapLeafCreateOrConnectWithoutMapInput | MerkleMapLeafCreateOrConnectWithoutMapInput[]
    createMany?: MerkleMapLeafCreateManyMapInputEnvelope
    connect?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
  }

  export type MerkleMapLeafUncheckedCreateNestedManyWithoutMapInput = {
    create?: XOR<MerkleMapLeafCreateWithoutMapInput, MerkleMapLeafUncheckedCreateWithoutMapInput> | MerkleMapLeafCreateWithoutMapInput[] | MerkleMapLeafUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MerkleMapLeafCreateOrConnectWithoutMapInput | MerkleMapLeafCreateOrConnectWithoutMapInput[]
    createMany?: MerkleMapLeafCreateManyMapInputEnvelope
    connect?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MerkleMapLeafUpdateManyWithoutMapNestedInput = {
    create?: XOR<MerkleMapLeafCreateWithoutMapInput, MerkleMapLeafUncheckedCreateWithoutMapInput> | MerkleMapLeafCreateWithoutMapInput[] | MerkleMapLeafUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MerkleMapLeafCreateOrConnectWithoutMapInput | MerkleMapLeafCreateOrConnectWithoutMapInput[]
    upsert?: MerkleMapLeafUpsertWithWhereUniqueWithoutMapInput | MerkleMapLeafUpsertWithWhereUniqueWithoutMapInput[]
    createMany?: MerkleMapLeafCreateManyMapInputEnvelope
    set?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    disconnect?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    delete?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    connect?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    update?: MerkleMapLeafUpdateWithWhereUniqueWithoutMapInput | MerkleMapLeafUpdateWithWhereUniqueWithoutMapInput[]
    updateMany?: MerkleMapLeafUpdateManyWithWhereWithoutMapInput | MerkleMapLeafUpdateManyWithWhereWithoutMapInput[]
    deleteMany?: MerkleMapLeafScalarWhereInput | MerkleMapLeafScalarWhereInput[]
  }

  export type MerkleMapLeafUncheckedUpdateManyWithoutMapNestedInput = {
    create?: XOR<MerkleMapLeafCreateWithoutMapInput, MerkleMapLeafUncheckedCreateWithoutMapInput> | MerkleMapLeafCreateWithoutMapInput[] | MerkleMapLeafUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MerkleMapLeafCreateOrConnectWithoutMapInput | MerkleMapLeafCreateOrConnectWithoutMapInput[]
    upsert?: MerkleMapLeafUpsertWithWhereUniqueWithoutMapInput | MerkleMapLeafUpsertWithWhereUniqueWithoutMapInput[]
    createMany?: MerkleMapLeafCreateManyMapInputEnvelope
    set?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    disconnect?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    delete?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    connect?: MerkleMapLeafWhereUniqueInput | MerkleMapLeafWhereUniqueInput[]
    update?: MerkleMapLeafUpdateWithWhereUniqueWithoutMapInput | MerkleMapLeafUpdateWithWhereUniqueWithoutMapInput[]
    updateMany?: MerkleMapLeafUpdateManyWithWhereWithoutMapInput | MerkleMapLeafUpdateManyWithWhereWithoutMapInput[]
    deleteMany?: MerkleMapLeafScalarWhereInput | MerkleMapLeafScalarWhereInput[]
  }

  export type MerkleMapCreateNestedOneWithoutLeafsInput = {
    create?: XOR<MerkleMapCreateWithoutLeafsInput, MerkleMapUncheckedCreateWithoutLeafsInput>
    connectOrCreate?: MerkleMapCreateOrConnectWithoutLeafsInput
    connect?: MerkleMapWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MerkleMapUpdateOneRequiredWithoutLeafsNestedInput = {
    create?: XOR<MerkleMapCreateWithoutLeafsInput, MerkleMapUncheckedCreateWithoutLeafsInput>
    connectOrCreate?: MerkleMapCreateOrConnectWithoutLeafsInput
    upsert?: MerkleMapUpsertWithoutLeafsInput
    connect?: MerkleMapWhereUniqueInput
    update?: XOR<XOR<MerkleMapUpdateToOneWithWhereWithoutLeafsInput, MerkleMapUpdateWithoutLeafsInput>, MerkleMapUncheckedUpdateWithoutLeafsInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type MerkleMapLeafCreateWithoutMapInput = {
    uid?: string
    index: bigint | number
    key: string
    hash: string
    data?: string | null
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapLeafUncheckedCreateWithoutMapInput = {
    uid?: string
    index: bigint | number
    key: string
    hash: string
    data?: string | null
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapLeafCreateOrConnectWithoutMapInput = {
    where: MerkleMapLeafWhereUniqueInput
    create: XOR<MerkleMapLeafCreateWithoutMapInput, MerkleMapLeafUncheckedCreateWithoutMapInput>
  }

  export type MerkleMapLeafCreateManyMapInputEnvelope = {
    data: MerkleMapLeafCreateManyMapInput | MerkleMapLeafCreateManyMapInput[]
    skipDuplicates?: boolean
  }

  export type MerkleMapLeafUpsertWithWhereUniqueWithoutMapInput = {
    where: MerkleMapLeafWhereUniqueInput
    update: XOR<MerkleMapLeafUpdateWithoutMapInput, MerkleMapLeafUncheckedUpdateWithoutMapInput>
    create: XOR<MerkleMapLeafCreateWithoutMapInput, MerkleMapLeafUncheckedCreateWithoutMapInput>
  }

  export type MerkleMapLeafUpdateWithWhereUniqueWithoutMapInput = {
    where: MerkleMapLeafWhereUniqueInput
    data: XOR<MerkleMapLeafUpdateWithoutMapInput, MerkleMapLeafUncheckedUpdateWithoutMapInput>
  }

  export type MerkleMapLeafUpdateManyWithWhereWithoutMapInput = {
    where: MerkleMapLeafScalarWhereInput
    data: XOR<MerkleMapLeafUpdateManyMutationInput, MerkleMapLeafUncheckedUpdateManyWithoutMapInput>
  }

  export type MerkleMapLeafScalarWhereInput = {
    AND?: MerkleMapLeafScalarWhereInput | MerkleMapLeafScalarWhereInput[]
    OR?: MerkleMapLeafScalarWhereInput[]
    NOT?: MerkleMapLeafScalarWhereInput | MerkleMapLeafScalarWhereInput[]
    uid?: StringFilter<"MerkleMapLeaf"> | string
    mapId?: IntFilter<"MerkleMapLeaf"> | number
    index?: BigIntFilter<"MerkleMapLeaf"> | bigint | number
    key?: StringFilter<"MerkleMapLeaf"> | string
    hash?: StringFilter<"MerkleMapLeaf"> | string
    data?: StringNullableFilter<"MerkleMapLeaf"> | string | null
    createdUtc?: DateTimeFilter<"MerkleMapLeaf"> | Date | string
    updatedUtc?: DateTimeFilter<"MerkleMapLeaf"> | Date | string
  }

  export type MerkleMapCreateWithoutLeafsInput = {
    name: string
    root: bigint | number
    size: number
    height: number
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapUncheckedCreateWithoutLeafsInput = {
    id?: number
    name: string
    root: bigint | number
    size: number
    height: number
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapCreateOrConnectWithoutLeafsInput = {
    where: MerkleMapWhereUniqueInput
    create: XOR<MerkleMapCreateWithoutLeafsInput, MerkleMapUncheckedCreateWithoutLeafsInput>
  }

  export type MerkleMapUpsertWithoutLeafsInput = {
    update: XOR<MerkleMapUpdateWithoutLeafsInput, MerkleMapUncheckedUpdateWithoutLeafsInput>
    create: XOR<MerkleMapCreateWithoutLeafsInput, MerkleMapUncheckedCreateWithoutLeafsInput>
    where?: MerkleMapWhereInput
  }

  export type MerkleMapUpdateToOneWithWhereWithoutLeafsInput = {
    where?: MerkleMapWhereInput
    data: XOR<MerkleMapUpdateWithoutLeafsInput, MerkleMapUncheckedUpdateWithoutLeafsInput>
  }

  export type MerkleMapUpdateWithoutLeafsInput = {
    name?: StringFieldUpdateOperationsInput | string
    root?: BigIntFieldUpdateOperationsInput | bigint | number
    size?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapUncheckedUpdateWithoutLeafsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    root?: BigIntFieldUpdateOperationsInput | bigint | number
    size?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapLeafCreateManyMapInput = {
    uid?: string
    index: bigint | number
    key: string
    hash: string
    data?: string | null
    createdUtc?: Date | string
    updatedUtc?: Date | string
  }

  export type MerkleMapLeafUpdateWithoutMapInput = {
    uid?: StringFieldUpdateOperationsInput | string
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    key?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapLeafUncheckedUpdateWithoutMapInput = {
    uid?: StringFieldUpdateOperationsInput | string
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    key?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerkleMapLeafUncheckedUpdateManyWithoutMapInput = {
    uid?: StringFieldUpdateOperationsInput | string
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    key?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdUtc?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedUtc?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}