export { Tuple, TupleN };
type Tuple<T> = [T, ...T[]] | [];
declare const Tuple: {
    map<T extends Tuple<any>, B>(tuple: T, f: (a: T[number]) => B): [...{ [i in keyof T]: B; }];
};
/**
 * tuple type that has the length as generic parameter
 */
type TupleN<T, N extends number> = N extends N ? number extends N ? [...T[]] : [...TupleRec<T, N, []>] : never;
declare const TupleN: {
    map<T extends Tuple<any>, B>(tuple: T, f: (a: T[number]) => B): [...{ [i in keyof T]: B; }];
    fromArray<T_1, N extends number>(n: N, arr: T_1[]): TupleN<T_1, N>;
};
type TupleRec<T, N extends number, R extends unknown[]> = R['length'] extends N ? R : TupleRec<T, N, [T, ...R]>;
