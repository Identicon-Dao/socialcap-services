import { Snarky } from '../snarky.js';
import { FieldConst } from './field.js';
import { MlArray, MlTuple } from './ml/base.js';
export { rangeCheck0, rangeCheck1, xor, zero, rotate, generic };
function rangeCheck0(x, xLimbs12, xLimbs2, isCompact) {
    Snarky.gates.rangeCheck0(x.value, MlTuple.mapTo(xLimbs12, (x) => x.value), MlTuple.mapTo(xLimbs2, (x) => x.value), isCompact ? FieldConst[1] : FieldConst[0]);
}
/**
 * the rangeCheck1 gate is used in combination with the rangeCheck0,
 * for doing a 3x88-bit range check
 */
function rangeCheck1(v2, v12, vCurr, vNext) {
    Snarky.gates.rangeCheck1(v2.value, v12.value, MlTuple.mapTo(vCurr, (x) => x.value), MlTuple.mapTo(vNext, (x) => x.value));
}
function rotate(field, rotated, excess, limbs, crumbs, two_to_rot) {
    Snarky.gates.rotate(field.value, rotated.value, excess.value, MlArray.to(limbs.map((x) => x.value)), MlArray.to(crumbs.map((x) => x.value)), FieldConst.fromBigint(two_to_rot));
}
/**
 * Asserts that 16 bit limbs of input two elements are the correct XOR output
 */
function xor(input1, input2, outputXor, in1_0, in1_1, in1_2, in1_3, in2_0, in2_1, in2_2, in2_3, out0, out1, out2, out3) {
    Snarky.gates.xor(input1.value, input2.value, outputXor.value, in1_0.value, in1_1.value, in1_2.value, in1_3.value, in2_0.value, in2_1.value, in2_2.value, in2_3.value, out0.value, out1.value, out2.value, out3.value);
}
/**
 * [Generic gate](https://o1-labs.github.io/proof-systems/specs/kimchi.html?highlight=foreignfield#double-generic-gate)
 * The vanilla PLONK gate that allows us to do operations like:
 * * addition of two registers (into an output register)
 * * multiplication of two registers
 * * equality of a register with a constant
 *
 * More generally, the generic gate controls the coefficients (denoted `c_`) in the equation:
 *
 * `c_l*l + c_r*r + c_o*o + c_m*l*r + c_c === 0`
 */
function generic(coefficients, inputs) {
    Snarky.gates.generic(FieldConst.fromBigint(coefficients.left), inputs.left.value, FieldConst.fromBigint(coefficients.right), inputs.right.value, FieldConst.fromBigint(coefficients.out), inputs.out.value, FieldConst.fromBigint(coefficients.mul), FieldConst.fromBigint(coefficients.const));
}
function zero(a, b, c) {
    Snarky.gates.zero(a.value, b.value, c.value);
}
//# sourceMappingURL=gates.js.map