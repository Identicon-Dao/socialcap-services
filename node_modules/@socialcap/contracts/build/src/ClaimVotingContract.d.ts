import { SmartContract, State, PublicKey } from "o1js";
import { Field } from "o1js";
import { MerkleMapWitness } from "o1js";
declare const VoteAction_base: (new (value: {
    isValid: import("o1js/dist/node/lib/bool").Bool;
    positive: import("o1js/dist/node/lib/bool").Bool;
    negative: import("o1js/dist/node/lib/bool").Bool;
    ignore: import("o1js/dist/node/lib/bool").Bool;
}) => {
    isValid: import("o1js/dist/node/lib/bool").Bool;
    positive: import("o1js/dist/node/lib/bool").Bool;
    negative: import("o1js/dist/node/lib/bool").Bool;
    ignore: import("o1js/dist/node/lib/bool").Bool;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky").ProvablePure<{
    isValid: import("o1js/dist/node/lib/bool").Bool;
    positive: import("o1js/dist/node/lib/bool").Bool;
    negative: import("o1js/dist/node/lib/bool").Bool;
    ignore: import("o1js/dist/node/lib/bool").Bool;
}> & {
    toInput: (x: {
        isValid: import("o1js/dist/node/lib/bool").Bool;
        positive: import("o1js/dist/node/lib/bool").Bool;
        negative: import("o1js/dist/node/lib/bool").Bool;
        ignore: import("o1js/dist/node/lib/bool").Bool;
    }) => {
        fields?: import("o1js/dist/node/lib/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        isValid: import("o1js/dist/node/lib/bool").Bool;
        positive: import("o1js/dist/node/lib/bool").Bool;
        negative: import("o1js/dist/node/lib/bool").Bool;
        ignore: import("o1js/dist/node/lib/bool").Bool;
    }) => {
        isValid: boolean;
        positive: boolean;
        negative: boolean;
        ignore: boolean;
    };
    fromJSON: (x: {
        isValid: boolean;
        positive: boolean;
        negative: boolean;
        ignore: boolean;
    }) => {
        isValid: import("o1js/dist/node/lib/bool").Bool;
        positive: import("o1js/dist/node/lib/bool").Bool;
        negative: import("o1js/dist/node/lib/bool").Bool;
        ignore: import("o1js/dist/node/lib/bool").Bool;
    };
};
declare class VoteAction extends VoteAction_base {
}
declare const NullifierProxy_base: (new (value: {
    root: import("o1js/dist/node/lib/field").Field;
    witness: MerkleMapWitness;
}) => {
    root: import("o1js/dist/node/lib/field").Field;
    witness: MerkleMapWitness;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky").ProvablePure<{
    root: import("o1js/dist/node/lib/field").Field;
    witness: MerkleMapWitness;
}> & {
    toInput: (x: {
        root: import("o1js/dist/node/lib/field").Field;
        witness: MerkleMapWitness;
    }) => {
        fields?: import("o1js/dist/node/lib/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        root: import("o1js/dist/node/lib/field").Field;
        witness: MerkleMapWitness;
    }) => {
        root: string;
        witness: any;
    };
    fromJSON: (x: {
        root: string;
        witness: any;
    }) => {
        root: import("o1js/dist/node/lib/field").Field;
        witness: MerkleMapWitness;
    };
};
export declare class NullifierProxy extends NullifierProxy_base {
    static key(electorId: PublicKey, claimUid: Field): Field;
}
declare const VotingStatusEvent_base: (new (value: {
    claimUid: import("o1js/dist/node/lib/field").Field;
    isFinished: import("o1js/dist/node/lib/bool").Bool;
    hasChanged: import("o1js/dist/node/lib/bool").Bool;
    result: import("o1js/dist/node/lib/field").Field;
    total: import("o1js/dist/node/lib/field").Field;
    positive: import("o1js/dist/node/lib/field").Field;
    negative: import("o1js/dist/node/lib/field").Field;
    ignored: import("o1js/dist/node/lib/field").Field;
}) => {
    claimUid: import("o1js/dist/node/lib/field").Field;
    isFinished: import("o1js/dist/node/lib/bool").Bool;
    hasChanged: import("o1js/dist/node/lib/bool").Bool;
    result: import("o1js/dist/node/lib/field").Field;
    total: import("o1js/dist/node/lib/field").Field;
    positive: import("o1js/dist/node/lib/field").Field;
    negative: import("o1js/dist/node/lib/field").Field;
    ignored: import("o1js/dist/node/lib/field").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky").ProvablePure<{
    claimUid: import("o1js/dist/node/lib/field").Field;
    isFinished: import("o1js/dist/node/lib/bool").Bool;
    hasChanged: import("o1js/dist/node/lib/bool").Bool;
    result: import("o1js/dist/node/lib/field").Field;
    total: import("o1js/dist/node/lib/field").Field;
    positive: import("o1js/dist/node/lib/field").Field;
    negative: import("o1js/dist/node/lib/field").Field;
    ignored: import("o1js/dist/node/lib/field").Field;
}> & {
    toInput: (x: {
        claimUid: import("o1js/dist/node/lib/field").Field;
        isFinished: import("o1js/dist/node/lib/bool").Bool;
        hasChanged: import("o1js/dist/node/lib/bool").Bool;
        result: import("o1js/dist/node/lib/field").Field;
        total: import("o1js/dist/node/lib/field").Field;
        positive: import("o1js/dist/node/lib/field").Field;
        negative: import("o1js/dist/node/lib/field").Field;
        ignored: import("o1js/dist/node/lib/field").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        claimUid: import("o1js/dist/node/lib/field").Field;
        isFinished: import("o1js/dist/node/lib/bool").Bool;
        hasChanged: import("o1js/dist/node/lib/bool").Bool;
        result: import("o1js/dist/node/lib/field").Field;
        total: import("o1js/dist/node/lib/field").Field;
        positive: import("o1js/dist/node/lib/field").Field;
        negative: import("o1js/dist/node/lib/field").Field;
        ignored: import("o1js/dist/node/lib/field").Field;
    }) => {
        claimUid: string;
        isFinished: boolean;
        hasChanged: boolean;
        result: string;
        total: string;
        positive: string;
        negative: string;
        ignored: string;
    };
    fromJSON: (x: {
        claimUid: string;
        isFinished: boolean;
        hasChanged: boolean;
        result: string;
        total: string;
        positive: string;
        negative: string;
        ignored: string;
    }) => {
        claimUid: import("o1js/dist/node/lib/field").Field;
        isFinished: import("o1js/dist/node/lib/bool").Bool;
        hasChanged: import("o1js/dist/node/lib/bool").Bool;
        result: import("o1js/dist/node/lib/field").Field;
        total: import("o1js/dist/node/lib/field").Field;
        positive: import("o1js/dist/node/lib/field").Field;
        negative: import("o1js/dist/node/lib/field").Field;
        ignored: import("o1js/dist/node/lib/field").Field;
    };
};
declare class VotingStatusEvent extends VotingStatusEvent_base {
}
export declare class ClaimVotingContract extends SmartContract {
    events: {
        'elector-has-voted': typeof import("o1js/dist/node/lib/field").Field & ((x: string | number | bigint | import("o1js/dist/node/lib/field").Field | import("o1js/dist/node/lib/field").FieldVar | import("o1js/dist/node/lib/field").FieldConst) => import("o1js/dist/node/lib/field").Field);
        'voting-changed': typeof VotingStatusEvent;
    };
    reducer: {
        dispatch(action: VoteAction): void;
        reduce<State_1>(actions: VoteAction[][], stateType: import("o1js/dist/node/lib/provable").Provable<State_1>, reduce: (state: State_1, action: VoteAction) => State_1, initial: {
            state: State_1;
            actionState: import("o1js/dist/node/lib/field").Field;
        }, options?: {
            maxTransactionsWithActions?: number | undefined;
            skipActionStatePrecondition?: boolean | undefined;
        } | undefined): {
            state: State_1;
            actionState: import("o1js/dist/node/lib/field").Field;
        };
        forEach(actions: VoteAction[][], reduce: (action: VoteAction) => void, fromActionState: import("o1js/dist/node/lib/field").Field, options?: {
            maxTransactionsWithActions?: number | undefined;
            skipActionStatePrecondition?: boolean | undefined;
        } | undefined): import("o1js/dist/node/lib/field").Field;
        getActions({ fromActionState, endActionState, }?: {
            fromActionState?: import("o1js/dist/node/lib/field").Field | undefined;
            endActionState?: import("o1js/dist/node/lib/field").Field | undefined;
        } | undefined): VoteAction[][];
        fetchActions({ fromActionState, endActionState, }: {
            fromActionState?: import("o1js/dist/node/lib/field").Field | undefined;
            endActionState?: import("o1js/dist/node/lib/field").Field | undefined;
        }): Promise<VoteAction[][]>;
    };
    claimUid: State<import("o1js/dist/node/lib/field").Field>;
    positive: State<import("o1js/dist/node/lib/field").Field>;
    negative: State<import("o1js/dist/node/lib/field").Field>;
    ignored: State<import("o1js/dist/node/lib/field").Field>;
    requiredVotes: State<import("o1js/dist/node/lib/field").Field>;
    requiredPositives: State<import("o1js/dist/node/lib/field").Field>;
    result: State<import("o1js/dist/node/lib/field").Field>;
    actionsState: State<import("o1js/dist/node/lib/field").Field>;
    init(): void;
    setup(claimUid: Field, requiredVotes: Field, requiredPositives: Field): void;
    assertHasNotVoted(electorPuk: PublicKey, claimUid: Field, nullifier: NullifierProxy): void;
    confirmTaskDone(vote: Field, // +1 positive, -1 negative or 0 ignored
    nullifier: NullifierProxy): void;
    rollupVotes(): void;
}
export {};
