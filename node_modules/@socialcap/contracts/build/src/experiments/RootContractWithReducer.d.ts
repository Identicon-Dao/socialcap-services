import { SmartContract, State, MerkleMapWitness } from "o1js";
import { Field } from "o1js";
import { MerkleMapUpdate, MerkleMapProxy } from "../CommunitiesContract.js";
import { ProvableCommunity } from "../models/provable-community.js";
import { ProvablePerson } from "../models/provable-person.js";
import { ProvableMember } from "../models/provable-member.js";
declare const UpdateRootAction_base: (new (value: {
    updateCommunities: import("o1js/dist/node/lib/bool.js").Bool;
    updatePersons: import("o1js/dist/node/lib/bool.js").Bool;
    updateMembers: import("o1js/dist/node/lib/bool.js").Bool;
    updatePlans: import("o1js/dist/node/lib/bool.js").Bool;
    updateClaims: import("o1js/dist/node/lib/bool.js").Bool;
    updateCredentials: import("o1js/dist/node/lib/bool.js").Bool;
    updateNullifier: import("o1js/dist/node/lib/bool.js").Bool;
    root: import("o1js/dist/node/lib/field.js").Field;
}) => {
    updateCommunities: import("o1js/dist/node/lib/bool.js").Bool;
    updatePersons: import("o1js/dist/node/lib/bool.js").Bool;
    updateMembers: import("o1js/dist/node/lib/bool.js").Bool;
    updatePlans: import("o1js/dist/node/lib/bool.js").Bool;
    updateClaims: import("o1js/dist/node/lib/bool.js").Bool;
    updateCredentials: import("o1js/dist/node/lib/bool.js").Bool;
    updateNullifier: import("o1js/dist/node/lib/bool.js").Bool;
    root: import("o1js/dist/node/lib/field.js").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    updateCommunities: import("o1js/dist/node/lib/bool.js").Bool;
    updatePersons: import("o1js/dist/node/lib/bool.js").Bool;
    updateMembers: import("o1js/dist/node/lib/bool.js").Bool;
    updatePlans: import("o1js/dist/node/lib/bool.js").Bool;
    updateClaims: import("o1js/dist/node/lib/bool.js").Bool;
    updateCredentials: import("o1js/dist/node/lib/bool.js").Bool;
    updateNullifier: import("o1js/dist/node/lib/bool.js").Bool;
    root: import("o1js/dist/node/lib/field.js").Field;
}> & {
    toInput: (x: {
        updateCommunities: import("o1js/dist/node/lib/bool.js").Bool;
        updatePersons: import("o1js/dist/node/lib/bool.js").Bool;
        updateMembers: import("o1js/dist/node/lib/bool.js").Bool;
        updatePlans: import("o1js/dist/node/lib/bool.js").Bool;
        updateClaims: import("o1js/dist/node/lib/bool.js").Bool;
        updateCredentials: import("o1js/dist/node/lib/bool.js").Bool;
        updateNullifier: import("o1js/dist/node/lib/bool.js").Bool;
        root: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        updateCommunities: import("o1js/dist/node/lib/bool.js").Bool;
        updatePersons: import("o1js/dist/node/lib/bool.js").Bool;
        updateMembers: import("o1js/dist/node/lib/bool.js").Bool;
        updatePlans: import("o1js/dist/node/lib/bool.js").Bool;
        updateClaims: import("o1js/dist/node/lib/bool.js").Bool;
        updateCredentials: import("o1js/dist/node/lib/bool.js").Bool;
        updateNullifier: import("o1js/dist/node/lib/bool.js").Bool;
        root: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        updateCommunities: boolean;
        updatePersons: boolean;
        updateMembers: boolean;
        updatePlans: boolean;
        updateClaims: boolean;
        updateCredentials: boolean;
        updateNullifier: boolean;
        root: string;
    };
    fromJSON: (x: {
        updateCommunities: boolean;
        updatePersons: boolean;
        updateMembers: boolean;
        updatePlans: boolean;
        updateClaims: boolean;
        updateCredentials: boolean;
        updateNullifier: boolean;
        root: string;
    }) => {
        updateCommunities: import("o1js/dist/node/lib/bool.js").Bool;
        updatePersons: import("o1js/dist/node/lib/bool.js").Bool;
        updateMembers: import("o1js/dist/node/lib/bool.js").Bool;
        updatePlans: import("o1js/dist/node/lib/bool.js").Bool;
        updateClaims: import("o1js/dist/node/lib/bool.js").Bool;
        updateCredentials: import("o1js/dist/node/lib/bool.js").Bool;
        updateNullifier: import("o1js/dist/node/lib/bool.js").Bool;
        root: import("o1js/dist/node/lib/field.js").Field;
    };
};
declare class UpdateRootAction extends UpdateRootAction_base {
}
export declare class RootsContract extends SmartContract {
    reducer: {
        dispatch(action: UpdateRootAction): void;
        reduce<State_1>(actions: UpdateRootAction[][], stateType: import("o1js/dist/node/lib/provable.js").Provable<State_1>, reduce: (state: State_1, action: UpdateRootAction) => State_1, initial: {
            state: State_1;
            actionState: import("o1js/dist/node/lib/field.js").Field;
        }, options?: {
            maxTransactionsWithActions?: number | undefined;
            skipActionStatePrecondition?: boolean | undefined;
        } | undefined): {
            state: State_1;
            actionState: import("o1js/dist/node/lib/field.js").Field;
        };
        forEach(actions: UpdateRootAction[][], reduce: (action: UpdateRootAction) => void, fromActionState: import("o1js/dist/node/lib/field.js").Field, options?: {
            maxTransactionsWithActions?: number | undefined;
            skipActionStatePrecondition?: boolean | undefined;
        } | undefined): import("o1js/dist/node/lib/field.js").Field;
        getActions({ fromActionState, endActionState, }?: {
            fromActionState?: import("o1js/dist/node/lib/field.js").Field | undefined;
            endActionState?: import("o1js/dist/node/lib/field.js").Field | undefined;
        } | undefined): UpdateRootAction[][];
        fetchActions({ fromActionState, endActionState, }: {
            fromActionState?: import("o1js/dist/node/lib/field.js").Field | undefined;
            endActionState?: import("o1js/dist/node/lib/field.js").Field | undefined;
        }): Promise<UpdateRootAction[][]>;
    };
    communitiesRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    personsRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    membersRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    plansRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    claimsRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    credentialsRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    nullifierRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    actionsState: State<import("o1js/dist/node/lib/field.js").Field>;
    init(): void;
    resetAction(): UpdateRootAction;
    checkMerkleUpdate(key: Field, hashed: Field, map: MerkleMapProxy, witness: MerkleMapWitness, updated: MerkleMapUpdate, currentRoot: Field): void;
    updateCommunity(org: ProvableCommunity, map: MerkleMapProxy, witness: MerkleMapWitness, updated: MerkleMapUpdate): void;
    updatePerson(person: ProvablePerson, map: MerkleMapProxy, witness: MerkleMapWitness, updated: MerkleMapUpdate): void;
    updateMember(member: ProvableMember, map: MerkleMapProxy, witness: MerkleMapWitness, updated: MerkleMapUpdate): void;
    rollupUpdates(): void;
}
export {};
