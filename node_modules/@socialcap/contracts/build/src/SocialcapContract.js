var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { SmartContract, state, State, method } from "o1js";
import { UInt64, AccountUpdate, Permissions, PublicKey } from "o1js";
/**
 * This manages the Socialcapp account used to receive deposits
 * and transfer shares to communities and rewards to validators,
 * and also mantain the FeePayer account funded for transactions
 * started by the API server.
 */
export class SocialcapContract extends SmartContract {
    constructor() {
        super(...arguments);
        // total received from deposits
        this.totalDeposits = State();
        // total payed to communities
        this.totalSharesPayed = State();
        // total paid to validators
        this.totalRewardsPayed = State();
        // total fees payed due to transactions managed 
        this.totalFeesPayed = State();
        // this is the Account owner, only the owner can make payments
        this.owner = State();
    }
    init() {
        // ensure that init() cannot be called again after the zkApp is set up
        // during the initial deployment.
        this.account.provedState.assertEquals(this.account.provedState.get());
        this.account.provedState.get().assertFalse();
        // now we do init
        super.init();
        this.totalDeposits.set(UInt64.from(0));
        this.totalSharesPayed.set(UInt64.from(0));
        this.totalRewardsPayed.set(UInt64.from(0));
        this.totalFeesPayed.set(UInt64.from(0));
        // set the owner, using the account who deployed 
        this.owner.set(this.sender);
    }
    /**
     * Configure this zkApp to be modifiable only by using proofs. It will not
     * be upgradable after it is deployed. After its first deployment, it requires
     * proof authorization and consequently can only be updated by transactions
     * that fulfill the zkApp's smart contract logic.
     * Ref: https://docs.minaprotocol.com/zkapps/tutorials/account-updates#smart-contracts
     */
    deploy(args) {
        super.deploy(args);
        this.account.permissions.set({
            ...Permissions.default(),
            receive: Permissions.proofOrSignature(),
            send: Permissions.proof(),
            setDelegate: Permissions.proof(),
            setPermissions: Permissions.proof(),
            setVerificationKey: Permissions.proof(),
            setZkappUri: Permissions.proof(),
            setTokenSymbol: Permissions.proof(),
            incrementNonce: Permissions.proof(),
            setVotingFor: Permissions.proof(),
            setTiming: Permissions.proof(),
        });
    }
    /**
     * Check that only the owner of the account (the one who originally deployed
     * it) can make transfers from the Socialcap funds to other accounts.
     */
    onlyOwner(sender) {
        let owner = this.owner.getAndAssertEquals();
        owner.assertEquals(sender);
    }
    /**
     * In some exceptional cases it may be needed to transfer ownership
     * to a different account than the one that deployed the contract.
     * This will be used in very few cases.
     */
    changeOwnership(newOwner) {
        // only the owner can transfer ownership of this account
        this.onlyOwner(this.sender);
        // assert and change to newOwner
        let currentOwner = this.owner.get();
        this.owner.assertEquals(currentOwner);
        this.owner.set(newOwner);
    }
    /**
     * Receive the deposit that community admins, validators and credential
     * applicants must made in each case when creating a new community,
     * proposing as validator or claiming a credential.
     */
    deposit(amount) {
        // anyone can deposit ...
        let senderUpdate = AccountUpdate.create(this.sender);
        senderUpdate.requireSignature();
        senderUpdate.send({ to: this, amount });
        // 
        let total = this.totalDeposits.getAndAssertEquals();
        total = total.add(amount);
        this.totalDeposits.set(total);
    }
    /**
     * Transfer the corresponding share of the received fees to each
     * of the communities who participate in Socialcap.
     */
    transferShares(receiver, amount) {
        // only owner can transfer !!!
        this.onlyOwner(this.sender);
        let senderUpdate = AccountUpdate.create(this.sender);
        senderUpdate.requireSignature();
        senderUpdate.send({ to: receiver, amount });
        let total = this.totalSharesPayed.getAndAssertEquals();
        total = total.add(amount);
        this.totalSharesPayed.set(total);
    }
    /**
     * Transfer rewards to validators involved in the voting process
     * when we can confirm that they did their job and the voting process
     * has been completed.
     */
    transferRewards(receiver, amount) {
        // only owner can transfer !!!
        this.onlyOwner(this.sender);
        let senderUpdate = AccountUpdate.create(this.sender);
        senderUpdate.requireSignature();
        senderUpdate.send({ to: receiver, amount });
        let total = this.totalRewardsPayed.getAndAssertEquals();
        total = total.add(amount);
        this.totalRewardsPayed.set(total);
    }
    /**
     * Transfer fees to the FeePayer account to be used in the API
     * server for bookeping and rolling up transactions.
     */
    transferFees(receiver, amount) {
        // only owner can transfer !!!
        this.onlyOwner(this.sender);
        let senderUpdate = AccountUpdate.create(this.sender);
        senderUpdate.requireSignature();
        senderUpdate.send({ to: receiver, amount });
        let total = this.totalFeesPayed.getAndAssertEquals();
        total = total.add(amount);
        this.totalFeesPayed.set(total);
    }
}
__decorate([
    state(UInt64),
    __metadata("design:type", Object)
], SocialcapContract.prototype, "totalDeposits", void 0);
__decorate([
    state(UInt64),
    __metadata("design:type", Object)
], SocialcapContract.prototype, "totalSharesPayed", void 0);
__decorate([
    state(UInt64),
    __metadata("design:type", Object)
], SocialcapContract.prototype, "totalRewardsPayed", void 0);
__decorate([
    state(UInt64),
    __metadata("design:type", Object)
], SocialcapContract.prototype, "totalFeesPayed", void 0);
__decorate([
    state(PublicKey),
    __metadata("design:type", Object)
], SocialcapContract.prototype, "owner", void 0);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [PublicKey]),
    __metadata("design:returntype", void 0)
], SocialcapContract.prototype, "onlyOwner", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [PublicKey]),
    __metadata("design:returntype", void 0)
], SocialcapContract.prototype, "changeOwnership", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [UInt64]),
    __metadata("design:returntype", void 0)
], SocialcapContract.prototype, "deposit", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [PublicKey, UInt64]),
    __metadata("design:returntype", void 0)
], SocialcapContract.prototype, "transferShares", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [PublicKey, UInt64]),
    __metadata("design:returntype", void 0)
], SocialcapContract.prototype, "transferRewards", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [PublicKey, UInt64]),
    __metadata("design:returntype", void 0)
], SocialcapContract.prototype, "transferFees", null);
//# sourceMappingURL=SocialcapContract.js.map