var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { SmartContract, state, State, method, PublicKey } from "o1js";
import { Field, MerkleMap, MerkleMapWitness, Circuit } from "o1js";
import { MerkleMapProxy, MerkleMapUpdate } from "./CommunitiesContract.js";
import { ProvableClaim } from "./models/provable-claims.js";
import { ProvablePlan } from "./models/provable-plans.js";
import { ProvableCredential } from "./models/provable-credentials.js";
export class ClaimingsContract extends SmartContract {
    constructor() {
        super(...arguments);
        // the MasterPlans dataset, binded to the Provable MasterPlan entity
        // key: plan.uid, value: plan.hash()
        this.plansRoot = State();
        // the Claims dataset, binded to the Provable Claim entity
        // key: claim.uid, value: claim.hash()
        this.claimsRoot = State();
        // the Approved Credentials dataset, binded to the Provable Credential entity
        // key: credential.uid, value: credential.hash()
        // NOTE that the the credential uid === the claim uid that claimed it
        this.credentialsRoot = State();
    }
    init() {
        super.init();
        const zero = this.zeroRoot();
        this.plansRoot.set(zero);
        this.claimsRoot.set(zero);
        this.credentialsRoot.set(zero);
    }
    zeroRoot() {
        const mt = new MerkleMap();
        mt.set(Field(0), Field(0)); // we set a first NULL key, with a NULL value
        return mt.getRoot();
    }
    /**
     * Check that only the contract deployer can call the method.
     * The deployer will be the Socialcap main account, which will also act
     * as fee payer for most method calls that imply commited roots bookeeping.
     * WARNING: If the Socialcap account changes we need to redeploy the contract.
     */
    assertOnlyDeployer() {
        const DEPLOYER_ADDR = "B62qo1gZFRgGhsozfGeqHv9bbkACr2sHA7qRsf4r9Tadk3dHH3Fwwmy";
        let deployer = PublicKey.fromBase58(DEPLOYER_ADDR);
        this.sender.assertEquals(deployer);
    }
    /**
     * Checks that the given update (key and leaf data after and before)
     * efectively belong to the commited Merkle Map.
     */
    checkMerkleUpdate(
    // map: MerkleMapProxy,
    key, hashed, map, witness, updated, currentRoot) {
        // check the initial state matches what we expect
        const [previousRoot, previousKey] = witness.computeRootAndKey(updated.beforeLeaf.hash);
        // check root is correct and match the Witness
        previousRoot.assertEquals(currentRoot);
        Circuit.log("Circuit.log previousRoot=", previousRoot);
        // check the updated keys we have used are correct and match the Witness
        previousKey.assertEquals(updated.afterLeaf.key);
        Circuit.log("Circuit.log previousKey=", previousKey);
        Circuit.log("Circuit.log equals afterLeaf.key=", updated.afterLeaf.key);
        // check the key corresponds with this entity UID
        previousKey.assertEquals(key);
        Circuit.log("Circuit.log previousKey=", previousKey);
        // check the new leaf hash matchs the hashed Entity struct
        updated.afterLeaf.hash.assertEquals(hashed);
        Circuit.log("Circuit.log hash=", hashed);
        // compute the new root for the existent key and hash using the given Witness 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const [newRoot, _] = witness.computeRootAndKey(updated.afterLeaf.hash);
        // check the newRoot matchs the MerkleMapProxy root
        map.root.assertEquals(newRoot);
        // and the updated root
        updated.afterRoot.assertEquals(newRoot);
    }
    updateClaim(claim, map, witness, updated) {
        const currentRoot = this.claimsRoot.get();
        this.claimsRoot.assertEquals(currentRoot);
        // assertOnlyDeployer();
        this.checkMerkleUpdate(claim.key(), claim.hash(), map, witness, updated, currentRoot);
        // set the new root
        this.claimsRoot.set(updated.afterRoot);
        Circuit.log("Circuit.log newRoot=", updated.afterRoot);
    }
    updatePlan(plan, map, witness, updated) {
        const currentRoot = this.plansRoot.get();
        this.plansRoot.assertEquals(currentRoot);
        // assertOnlyDeployer();
        this.checkMerkleUpdate(plan.key(), plan.hash(), map, witness, updated, currentRoot);
        // set the new root
        this.plansRoot.set(updated.afterRoot);
        Circuit.log("Circuit.log newRoot=", updated.afterRoot);
    }
    updateCredential(credential, map, witness, updated) {
        const currentRoot = this.credentialsRoot.get();
        this.credentialsRoot.assertEquals(currentRoot);
        // assertOnlyDeployer();
        this.checkMerkleUpdate(credential.key(), credential.hash(), map, witness, updated, currentRoot);
        // set the new root
        this.credentialsRoot.set(updated.afterRoot);
        Circuit.log("Circuit.log newRoot=", updated.afterRoot);
    }
}
__decorate([
    state(Field),
    __metadata("design:type", Object)
], ClaimingsContract.prototype, "plansRoot", void 0);
__decorate([
    state(Field),
    __metadata("design:type", Object)
], ClaimingsContract.prototype, "claimsRoot", void 0);
__decorate([
    state(Field),
    __metadata("design:type", Object)
], ClaimingsContract.prototype, "credentialsRoot", void 0);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ClaimingsContract.prototype, "assertOnlyDeployer", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Field, Field,
        MerkleMapProxy,
        MerkleMapWitness,
        MerkleMapUpdate,
        Field]),
    __metadata("design:returntype", void 0)
], ClaimingsContract.prototype, "checkMerkleUpdate", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [ProvableClaim,
        MerkleMapProxy,
        MerkleMapWitness,
        MerkleMapUpdate]),
    __metadata("design:returntype", void 0)
], ClaimingsContract.prototype, "updateClaim", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [ProvablePlan,
        MerkleMapProxy,
        MerkleMapWitness,
        MerkleMapUpdate]),
    __metadata("design:returntype", void 0)
], ClaimingsContract.prototype, "updatePlan", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [ProvableCredential,
        MerkleMapProxy,
        MerkleMapWitness,
        MerkleMapUpdate]),
    __metadata("design:returntype", void 0)
], ClaimingsContract.prototype, "updateCredential", null);
//# sourceMappingURL=ClaimingsContract.js.map