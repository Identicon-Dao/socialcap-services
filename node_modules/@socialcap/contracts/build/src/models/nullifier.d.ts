import { PublicKey, Field } from "o1js";
declare const ProvableElector_base: (new (value: {
    claimUid: import("o1js/dist/node/lib/field.js").Field;
    electorId: PublicKey;
    state: import("o1js/dist/node/lib/field.js").Field;
}) => {
    claimUid: import("o1js/dist/node/lib/field.js").Field;
    electorId: PublicKey;
    state: import("o1js/dist/node/lib/field.js").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    claimUid: import("o1js/dist/node/lib/field.js").Field;
    electorId: PublicKey;
    state: import("o1js/dist/node/lib/field.js").Field;
}> & {
    toInput: (x: {
        claimUid: import("o1js/dist/node/lib/field.js").Field;
        electorId: PublicKey;
        state: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        claimUid: import("o1js/dist/node/lib/field.js").Field;
        electorId: PublicKey;
        state: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        claimUid: string;
        electorId: string;
        state: string;
    };
    fromJSON: (x: {
        claimUid: string;
        electorId: string;
        state: string;
    }) => {
        claimUid: import("o1js/dist/node/lib/field.js").Field;
        electorId: PublicKey;
        state: import("o1js/dist/node/lib/field.js").Field;
    };
};
export declare class ProvableElector extends ProvableElector_base {
    constructor(json?: any);
    fromJSON(json: {
        claimUid: string;
        electorId: string;
        state: number;
    }): this;
    key(): Field;
    hash(): Field;
}
export {};
