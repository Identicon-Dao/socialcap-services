import { Field, PublicKey } from 'o1js';
import { EntityState } from "./entity-state.js";
export { ProvablePerson, PersonState };
declare const PersonState: EntityState;
declare const ProvablePerson_base: (new (value: {
    uid: import("o1js/dist/node/lib/field.js").Field;
    state: any;
    accountId: PublicKey;
    fullName: any;
    description: any;
    image: any;
    telegram: any;
    email: any;
    phone: any;
    createdUTC: import("o1js/dist/node/lib/field.js").Field;
    updatedUTC: import("o1js/dist/node/lib/field.js").Field;
    approvedUTC: import("o1js/dist/node/lib/field.js").Field;
}) => {
    uid: import("o1js/dist/node/lib/field.js").Field;
    state: any;
    accountId: PublicKey;
    fullName: any;
    description: any;
    image: any;
    telegram: any;
    email: any;
    phone: any;
    createdUTC: import("o1js/dist/node/lib/field.js").Field;
    updatedUTC: import("o1js/dist/node/lib/field.js").Field;
    approvedUTC: import("o1js/dist/node/lib/field.js").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    uid: import("o1js/dist/node/lib/field.js").Field;
    state: any;
    accountId: PublicKey;
    fullName: any;
    description: any;
    image: any;
    telegram: any;
    email: any;
    phone: any;
    createdUTC: import("o1js/dist/node/lib/field.js").Field;
    updatedUTC: import("o1js/dist/node/lib/field.js").Field;
    approvedUTC: import("o1js/dist/node/lib/field.js").Field;
}> & {
    toInput: (x: {
        uid: import("o1js/dist/node/lib/field.js").Field;
        state: any;
        accountId: PublicKey;
        fullName: any;
        description: any;
        image: any;
        telegram: any;
        email: any;
        phone: any;
        createdUTC: import("o1js/dist/node/lib/field.js").Field;
        updatedUTC: import("o1js/dist/node/lib/field.js").Field;
        approvedUTC: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        uid: import("o1js/dist/node/lib/field.js").Field;
        state: any;
        accountId: PublicKey;
        fullName: any;
        description: any;
        image: any;
        telegram: any;
        email: any;
        phone: any;
        createdUTC: import("o1js/dist/node/lib/field.js").Field;
        updatedUTC: import("o1js/dist/node/lib/field.js").Field;
        approvedUTC: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        uid: string;
        state: any;
        accountId: string;
        fullName: any;
        description: any;
        image: any;
        telegram: any;
        email: any;
        phone: any;
        createdUTC: string;
        updatedUTC: string;
        approvedUTC: string;
    };
    fromJSON: (x: {
        uid: string;
        state: any;
        accountId: string;
        fullName: any;
        description: any;
        image: any;
        telegram: any;
        email: any;
        phone: any;
        createdUTC: string;
        updatedUTC: string;
        approvedUTC: string;
    }) => {
        uid: import("o1js/dist/node/lib/field.js").Field;
        state: any;
        accountId: PublicKey;
        fullName: any;
        description: any;
        image: any;
        telegram: any;
        email: any;
        phone: any;
        createdUTC: import("o1js/dist/node/lib/field.js").Field;
        updatedUTC: import("o1js/dist/node/lib/field.js").Field;
        approvedUTC: import("o1js/dist/node/lib/field.js").Field;
    };
};
declare class ProvablePerson extends ProvablePerson_base {
    constructor(json?: any);
    fromJSON(json: {
        uid: string;
        fullName?: string;
        description?: string;
        image?: string;
        accountId?: string;
        state?: string;
        createdUTC?: Date;
        approvedUTC?: Date;
        updatedUTC?: Date;
        telegram?: string;
        email?: string;
        phone?: string;
    }): void;
    toJSON(): {
        uid: string;
        accountId: string;
        fullName: any;
        description: any;
        image: any;
        state: any;
        approvedUTC: string;
        createdUTC: string;
        updatedUTC: string;
        email: any;
        phone: any;
        telegram: any;
    };
    hash(): Field;
    key(): Field;
}
