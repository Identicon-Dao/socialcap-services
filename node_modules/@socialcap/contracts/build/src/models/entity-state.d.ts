/**
 * An auxiliary class to manage entity state and state transitions
 *
 * Use:
 * ~~~
 *    const PersonState = new EntityState([
 *      "INITIAL", "REVISION", "APPROVED", "PAYMENT", "ACTIVE",
 *      "DELETED","CANCELED","PAUSED"
 *    ])
 *
 *    let state = PersonState.set("INITIAL");
 *    // ...
 *    // latter on ...
 *    state = state.set("REVISION");
 * ~~~
 *
 * Valid states must be expressed with an array of strings:
 * ~~~
 *    [
 *      "INITIAL", "REVISION","APPROVED","PAYMENT","ACTIVE",
 *      "DELETED","CANCELED","PAUSED"
 *    ]
 * ~~~
 *
 * State transitions msut be expresed with an dictionary, where each entry is
 * a valid state, and the value for this entry is an array of the possible
 * valid states:
 * ~~~
 *    {
 *      "INITIAL":  ["REVISION", "CANCELED"],
 *      "REVISION": ["APPROVED", "CANCELED"],
 *      "APPROVED": ["PAYMENT", "CANCELED"],
 *      // ...
 *    }
 * ~~~
 *
 *
*/
export { EntityState };
declare class EntityState {
    private current;
    private valids;
    private transitions;
    constructor(valids: string[], transitions?: object);
    set(value: string | number): this;
    initial(): string;
    get(): string;
    index(value: string): number;
    private isValidTransition;
    changeFrom(from0: string, to1: string): string;
}
