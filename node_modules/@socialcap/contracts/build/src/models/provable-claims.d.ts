import { Field, PublicKey } from 'o1js';
import { CLAIM_STATES } from "./states.js";
export { ProvableClaim, CLAIM_STATES };
declare const ProvableClaim_base: (new (value: {
    uid: import("o1js/dist/node/lib/field.js").Field;
    state: import("o1js/dist/node/lib/field.js").Field;
    accountId: PublicKey;
    communityUid: import("o1js/dist/node/lib/field.js").Field;
    applicantUid: import("o1js/dist/node/lib/field.js").Field;
    planUid: import("o1js/dist/node/lib/field.js").Field;
    alias: any;
    createdUTC: import("o1js/dist/node/lib/field.js").Field;
    updatedUTC: import("o1js/dist/node/lib/field.js").Field;
    votedUTC: import("o1js/dist/node/lib/field.js").Field;
    issuedUTC: import("o1js/dist/node/lib/field.js").Field;
    dueUTC: import("o1js/dist/node/lib/field.js").Field;
    requiredVotes: import("o1js/dist/node/lib/field.js").Field;
    requiredPositives: import("o1js/dist/node/lib/field.js").Field;
    positiveVotes: import("o1js/dist/node/lib/field.js").Field;
    negativeVotes: import("o1js/dist/node/lib/field.js").Field;
    ignoredVotes: import("o1js/dist/node/lib/field.js").Field;
    evidenceDataHash: import("o1js/dist/node/lib/field.js").Field;
}) => {
    uid: import("o1js/dist/node/lib/field.js").Field;
    state: import("o1js/dist/node/lib/field.js").Field;
    accountId: PublicKey;
    communityUid: import("o1js/dist/node/lib/field.js").Field;
    applicantUid: import("o1js/dist/node/lib/field.js").Field;
    planUid: import("o1js/dist/node/lib/field.js").Field;
    alias: any;
    createdUTC: import("o1js/dist/node/lib/field.js").Field;
    updatedUTC: import("o1js/dist/node/lib/field.js").Field;
    votedUTC: import("o1js/dist/node/lib/field.js").Field;
    issuedUTC: import("o1js/dist/node/lib/field.js").Field;
    dueUTC: import("o1js/dist/node/lib/field.js").Field;
    requiredVotes: import("o1js/dist/node/lib/field.js").Field;
    requiredPositives: import("o1js/dist/node/lib/field.js").Field;
    positiveVotes: import("o1js/dist/node/lib/field.js").Field;
    negativeVotes: import("o1js/dist/node/lib/field.js").Field;
    ignoredVotes: import("o1js/dist/node/lib/field.js").Field;
    evidenceDataHash: import("o1js/dist/node/lib/field.js").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    uid: import("o1js/dist/node/lib/field.js").Field;
    state: import("o1js/dist/node/lib/field.js").Field;
    accountId: PublicKey;
    communityUid: import("o1js/dist/node/lib/field.js").Field;
    applicantUid: import("o1js/dist/node/lib/field.js").Field;
    planUid: import("o1js/dist/node/lib/field.js").Field;
    alias: any;
    createdUTC: import("o1js/dist/node/lib/field.js").Field;
    updatedUTC: import("o1js/dist/node/lib/field.js").Field;
    votedUTC: import("o1js/dist/node/lib/field.js").Field;
    issuedUTC: import("o1js/dist/node/lib/field.js").Field;
    dueUTC: import("o1js/dist/node/lib/field.js").Field;
    requiredVotes: import("o1js/dist/node/lib/field.js").Field;
    requiredPositives: import("o1js/dist/node/lib/field.js").Field;
    positiveVotes: import("o1js/dist/node/lib/field.js").Field;
    negativeVotes: import("o1js/dist/node/lib/field.js").Field;
    ignoredVotes: import("o1js/dist/node/lib/field.js").Field;
    evidenceDataHash: import("o1js/dist/node/lib/field.js").Field;
}> & {
    toInput: (x: {
        uid: import("o1js/dist/node/lib/field.js").Field;
        state: import("o1js/dist/node/lib/field.js").Field;
        accountId: PublicKey;
        communityUid: import("o1js/dist/node/lib/field.js").Field;
        applicantUid: import("o1js/dist/node/lib/field.js").Field;
        planUid: import("o1js/dist/node/lib/field.js").Field;
        alias: any;
        createdUTC: import("o1js/dist/node/lib/field.js").Field;
        updatedUTC: import("o1js/dist/node/lib/field.js").Field;
        votedUTC: import("o1js/dist/node/lib/field.js").Field;
        issuedUTC: import("o1js/dist/node/lib/field.js").Field;
        dueUTC: import("o1js/dist/node/lib/field.js").Field;
        requiredVotes: import("o1js/dist/node/lib/field.js").Field;
        requiredPositives: import("o1js/dist/node/lib/field.js").Field;
        positiveVotes: import("o1js/dist/node/lib/field.js").Field;
        negativeVotes: import("o1js/dist/node/lib/field.js").Field;
        ignoredVotes: import("o1js/dist/node/lib/field.js").Field;
        evidenceDataHash: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        uid: import("o1js/dist/node/lib/field.js").Field;
        state: import("o1js/dist/node/lib/field.js").Field;
        accountId: PublicKey;
        communityUid: import("o1js/dist/node/lib/field.js").Field;
        applicantUid: import("o1js/dist/node/lib/field.js").Field;
        planUid: import("o1js/dist/node/lib/field.js").Field;
        alias: any;
        createdUTC: import("o1js/dist/node/lib/field.js").Field;
        updatedUTC: import("o1js/dist/node/lib/field.js").Field;
        votedUTC: import("o1js/dist/node/lib/field.js").Field;
        issuedUTC: import("o1js/dist/node/lib/field.js").Field;
        dueUTC: import("o1js/dist/node/lib/field.js").Field;
        requiredVotes: import("o1js/dist/node/lib/field.js").Field;
        requiredPositives: import("o1js/dist/node/lib/field.js").Field;
        positiveVotes: import("o1js/dist/node/lib/field.js").Field;
        negativeVotes: import("o1js/dist/node/lib/field.js").Field;
        ignoredVotes: import("o1js/dist/node/lib/field.js").Field;
        evidenceDataHash: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        uid: string;
        state: string;
        accountId: string;
        communityUid: string;
        applicantUid: string;
        planUid: string;
        alias: any;
        createdUTC: string;
        updatedUTC: string;
        votedUTC: string;
        issuedUTC: string;
        dueUTC: string;
        requiredVotes: string;
        requiredPositives: string;
        positiveVotes: string;
        negativeVotes: string;
        ignoredVotes: string;
        evidenceDataHash: string;
    };
    fromJSON: (x: {
        uid: string;
        state: string;
        accountId: string;
        communityUid: string;
        applicantUid: string;
        planUid: string;
        alias: any;
        createdUTC: string;
        updatedUTC: string;
        votedUTC: string;
        issuedUTC: string;
        dueUTC: string;
        requiredVotes: string;
        requiredPositives: string;
        positiveVotes: string;
        negativeVotes: string;
        ignoredVotes: string;
        evidenceDataHash: string;
    }) => {
        uid: import("o1js/dist/node/lib/field.js").Field;
        state: import("o1js/dist/node/lib/field.js").Field;
        accountId: PublicKey;
        communityUid: import("o1js/dist/node/lib/field.js").Field;
        applicantUid: import("o1js/dist/node/lib/field.js").Field;
        planUid: import("o1js/dist/node/lib/field.js").Field;
        alias: any;
        createdUTC: import("o1js/dist/node/lib/field.js").Field;
        updatedUTC: import("o1js/dist/node/lib/field.js").Field;
        votedUTC: import("o1js/dist/node/lib/field.js").Field;
        issuedUTC: import("o1js/dist/node/lib/field.js").Field;
        dueUTC: import("o1js/dist/node/lib/field.js").Field;
        requiredVotes: import("o1js/dist/node/lib/field.js").Field;
        requiredPositives: import("o1js/dist/node/lib/field.js").Field;
        positiveVotes: import("o1js/dist/node/lib/field.js").Field;
        negativeVotes: import("o1js/dist/node/lib/field.js").Field;
        ignoredVotes: import("o1js/dist/node/lib/field.js").Field;
        evidenceDataHash: import("o1js/dist/node/lib/field.js").Field;
    };
};
declare class ProvableClaim extends ProvableClaim_base {
    constructor(json?: any);
    fromJSON(json: {
        uid: string;
        planUid: string;
        communityUid: string;
        applicantUid: string;
        accountId?: string;
        alias?: string;
        state?: number;
        createdUTC?: string;
        updatedUTC?: string;
        votedUTC?: string;
        issuedUTC?: string;
        dueUTC?: string;
        requiredVotes?: number;
        requiredPositives?: number;
        positiveVotes?: number;
        negativeVotes?: number;
        ignoredVotes?: number;
        evidenceDataHash?: any;
    }): this;
    toJSON(): {
        uid: string;
        planUid: string;
        communityUid: string;
        applicantUid: string;
        accountId: string;
        alias: any;
        state: bigint;
        createdUTC: string;
    };
    hash(): Field;
    key(): Field;
}
