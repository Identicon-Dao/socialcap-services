import { Field } from "o1js";
import { EntityState } from "./entity-state.js";
export { ProvableMember, MemberRole };
declare const MemberRole: EntityState;
declare const ProvableMember_base: (new (value: {
    personUid: import("o1js/dist/node/lib/field.js").Field;
    communityUid: import("o1js/dist/node/lib/field.js").Field;
    role: import("o1js/dist/node/lib/field.js").Field;
}) => {
    personUid: import("o1js/dist/node/lib/field.js").Field;
    communityUid: import("o1js/dist/node/lib/field.js").Field;
    role: import("o1js/dist/node/lib/field.js").Field;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky.js").ProvablePure<{
    personUid: import("o1js/dist/node/lib/field.js").Field;
    communityUid: import("o1js/dist/node/lib/field.js").Field;
    role: import("o1js/dist/node/lib/field.js").Field;
}> & {
    toInput: (x: {
        personUid: import("o1js/dist/node/lib/field.js").Field;
        communityUid: import("o1js/dist/node/lib/field.js").Field;
        role: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        personUid: import("o1js/dist/node/lib/field.js").Field;
        communityUid: import("o1js/dist/node/lib/field.js").Field;
        role: import("o1js/dist/node/lib/field.js").Field;
    }) => {
        personUid: string;
        communityUid: string;
        role: string;
    };
    fromJSON: (x: {
        personUid: string;
        communityUid: string;
        role: string;
    }) => {
        personUid: import("o1js/dist/node/lib/field.js").Field;
        communityUid: import("o1js/dist/node/lib/field.js").Field;
        role: import("o1js/dist/node/lib/field.js").Field;
    };
};
declare class ProvableMember extends ProvableMember_base {
    constructor(json?: any);
    fromJSON(json: {
        personUid: string;
        communityUid: string;
        role: string;
    }): void;
    toJSON(): {
        personUid: string;
        communityUid: string;
        role: string;
    };
    hash(): Field;
    key(): Field;
}
