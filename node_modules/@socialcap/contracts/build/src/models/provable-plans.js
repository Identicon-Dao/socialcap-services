import { Field, Bool, Struct, CircuitString, Poseidon } from 'o1js';
import { UID } from "../lib/uid.js";
import { UTCDateTime } from "../lib/datetime.js";
import { PLAN_STATES } from "./states.js";
export { ProvablePlan, PLAN_STATES };
class ProvablePlan extends Struct({
    // id and refrences 
    uid: Field,
    communityUid: Field,
    state: Field,
    // how the claim or credential will be presented
    name: CircuitString,
    description: CircuitString,
    // some images for styling the Claim/Credential cards
    image: CircuitString,
    // content
    evidenceHash: Field,
    metadataHash: Field,
    instructionsHash: Field,
    legalHash: Field,
    // fees and shares
    fee: Field,
    rewardsShare: Field,
    communityShare: Field,
    protocolShare: Field,
    // claim parameters
    strategyHash: Field,
    expiration: Field,
    revocable: Bool,
    total: Field,
    available: Field,
    startsUTC: Field,
    endsUTC: Field,
    // standard activity times
    createdUTC: Field,
    updatedUTC: Field,
    approvedUTC: Field
}) {
    constructor(json) {
        super(json);
        this.fromJSON(json);
    }
    fromJSON(json) {
        // ids and refrences are not optional
        this.uid = UID.toField(json.uid);
        this.communityUid = UID.toField(json.communityUid);
        this.state = Field(json.state || this.state || 0);
        //
        this.name = CircuitString.fromString(json.name || this.name || "");
        this.description = CircuitString.fromString(json.description || this.description || "");
        this.image = ""; // IGNORE This for now CircuitString.fromString(json.image || this.image || "");
        //
        this.evidenceHash = Field(json.evidenceHash || this.evidenceHash || 0);
        this.metadataHash = Field(json.metadataHash || this.metadataHash || 0);
        this.instructionsHash = Field(json.instructionsHash || this.instructionsHash || 0);
        this.legalHash = Field(json.legalHash || this.legalHash || 0);
        //
        this.fee = Field(json.fee || this.fee || 0);
        this.rewardsShare = Field(json.rewardsShare || this.rewardsShare || 0);
        this.communityShare = Field(json.communityShare || this.communityShare || 0);
        this.protocolShare = Field(json.protocolShare || this.protocolShare || 0);
        //    
        this.strategyHash = Field(json.strategyHash || this.strategyHash || 0);
        this.expiration = Field(json.expiration || this.expiration || 0);
        this.revocable = Bool(json.revocable || this.revocable || false);
        this.total = Field(json.total || this.total || 0);
        this.available = Field(json.available || this.available || 0);
        this.startsUTC = UTCDateTime.fromString((json.startsUTC || this.startsUTC || 0).toString());
        this.endsUTC = UTCDateTime.fromString((json.endsUTC || this.endsUTC || 0).toString());
        // timestamps are optional, if Unknown we assign Field(0) to them 
        this.createdUTC = UTCDateTime.fromString((json.createdUTC || this.createdUTC || 0).toString());
        this.updatedUTC = UTCDateTime.fromString((json.updatedUTC || this.updatedUTC || 0).toString());
        this.approvedUTC = UTCDateTime.fromString((json.approvedUTC || this.approvedUTC || 0).toString());
        return this;
    }
    toJSON() {
        // not really needed for now ...
        return {
            uid: this.uid.toString(),
            communityUid: this.communityUid.toString(),
            state: this.state.toBigInt()
        };
    }
    hash() {
        let fields = [];
        fields = fields
            .concat(this.uid.toFields())
            .concat(this.communityUid.toFields())
            .concat(this.state.toFields())
            .concat(this.name.toFields())
            .concat(this.description.toFields())
            //.concat(this.image.toFields())
            .concat(this.evidenceHash.toFields())
            .concat(this.metadataHash.toFields())
            .concat(this.instructionsHash.toFields())
            .concat(this.legalHash.toFields())
            .concat(this.fee.toFields())
            .concat(this.rewardsShare.toFields())
            .concat(this.communityShare.toFields())
            .concat(this.protocolShare.toFields())
            .concat(this.strategyHash.toFields())
            .concat(this.expiration.toFields())
            .concat(this.revocable.toFields())
            .concat(this.total.toFields())
            .concat(this.available.toFields())
            .concat(this.startsUTC.toFields())
            .concat(this.endsUTC.toFields())
            .concat(this.createdUTC.toFields())
            .concat(this.updatedUTC.toFields())
            .concat(this.approvedUTC.toFields());
        return Poseidon.hash(fields);
    }
    key() {
        return this.uid;
    }
}
//# sourceMappingURL=provable-plans.js.map