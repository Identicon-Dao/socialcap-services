import { SmartContract, State } from "o1js";
import { Field, MerkleMapWitness } from "o1js";
import { MerkleMapProxy, MerkleMapUpdate } from "./CommunitiesContract.js";
import { ProvableTask } from "./models/provable-tasks.js";
export declare class ElectorsContract extends SmartContract {
    tasksRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    nullifierRoot: State<import("o1js/dist/node/lib/field.js").Field>;
    init(): void;
    zeroRoot(): Field;
    /**
     * Check that only the contract deployer can call the method.
     * The deployer will be the Socialcap main account, which will also act
     * as fee payer for most method calls that imply commited roots bookeeping.
     * WARNING: If the Socialcap account changes we need to redeploy the contract.
     */
    assertOnlyDeployer(): void;
    /**
     * Checks that the given update (key and leaf data after and before)
     * efectively belong to the commited Merkle Map.
     */
    checkMerkleUpdate(key: Field, hashed: Field, map: MerkleMapProxy, witness: MerkleMapWitness, updated: MerkleMapUpdate, currentRoot: Field): void;
    updateTask(task: ProvableTask, map: MerkleMapProxy, witness: MerkleMapWitness, updated: MerkleMapUpdate): void;
    updateNullifier(map: MerkleMapProxy, witness: MerkleMapWitness, updated: MerkleMapUpdate): void;
}
