import { SmartContract, State } from "o1js";
import { UInt64, DeployArgs, PublicKey } from "o1js";
/**
 * This manages the Socialcapp account used to receive deposits
 * and transfer shares to communities and rewards to validators,
 * and also mantain the FeePayer account funded for transactions
 * started by the API server.
 */
export declare class SocialcapContract extends SmartContract {
    totalDeposits: State<UInt64>;
    totalSharesPayed: State<UInt64>;
    totalRewardsPayed: State<UInt64>;
    totalFeesPayed: State<UInt64>;
    owner: State<PublicKey>;
    init(): void;
    /**
     * Configure this zkApp to be modifiable only by using proofs. It will not
     * be upgradable after it is deployed. After its first deployment, it requires
     * proof authorization and consequently can only be updated by transactions
     * that fulfill the zkApp's smart contract logic.
     * Ref: https://docs.minaprotocol.com/zkapps/tutorials/account-updates#smart-contracts
     */
    deploy(args: DeployArgs): void;
    /**
     * Check that only the owner of the account (the one who originally deployed
     * it) can make transfers from the Socialcap funds to other accounts.
     */
    onlyOwner(sender: PublicKey): void;
    /**
     * In some exceptional cases it may be needed to transfer ownership
     * to a different account than the one that deployed the contract.
     * This will be used in very few cases.
     */
    changeOwnership(newOwner: PublicKey): void;
    /**
     * Receive the deposit that community admins, validators and credential
     * applicants must made in each case when creating a new community,
     * proposing as validator or claiming a credential.
     */
    deposit(amount: UInt64): void;
    /**
     * Transfer the corresponding share of the received fees to each
     * of the communities who participate in Socialcap.
     */
    transferShares(receiver: PublicKey, amount: UInt64): void;
    /**
     * Transfer rewards to validators involved in the voting process
     * when we can confirm that they did their job and the voting process
     * has been completed.
     */
    transferRewards(receiver: PublicKey, amount: UInt64): void;
    /**
     * Transfer fees to the FeePayer account to be used in the API
     * server for bookeping and rolling up transactions.
     */
    transferFees(receiver: PublicKey, amount: UInt64): void;
}
