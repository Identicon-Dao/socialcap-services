import { MerkleMapUpdate } from "@socialcap/contracts";
import { Field } from "o1js";

export interface SequencerTransaction {
  txid: string,
  update: any
}

enum SequencerState {
  READY,
  BUSY
}


/**
 * Sequencer
 */


/**
 * Merger
 * Will merge/aggregate all pending transactions in the Sequencer queue
 * into one single transaction (really, a single commitment) that will be
 * the only one dispatched and settled on-chain.
 */




export class Rollup {
  
  queue: SequencerTransaction[] = [];
  state: SequencerState ; 
  retries = 0;
  MAX_RETRIES = 3;

  // the method called to settle the Tx on MINA
  settler: (t: any) => void; 

  constructor(params: {
    sequencer: any,
    aggregator: any,
    dispatcher: any,
  }) {
    this.retries = 0;
  }



  /**
   * Pushes a new transaction to the rollup queue
   * @param tx: the transaction to add 
   */
  push(tx: SequencerTransaction) {
    return;
  }


  rollup() {
    return ;
  }


  dispatch() {
    // do settlement of last transactions
  }
}

CollectionState
uid: Field
commitment: Field
index: Field
lastKey: Field
lastValue: Field