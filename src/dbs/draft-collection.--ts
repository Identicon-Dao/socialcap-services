import { raiseError } from "../responses.js"

interface ICollection {
  name: string,
  title: string,
  prismaHandler: any,
  schemaHandler: any,
  provableHandler: any
}

class Collection<T> {

  name: string;
  title: string;
  handler: any;
  schema: any;
  provable: any;
  merkleMap: any;
  sequencer: any;

  constructor(params: ICollection) {
    this.name = params.name;
    this.title = params.title;
    this.handler = params.prismaHandler;
    this.schema = params.schemaHandler;
    this.provable = params.provableHandler;
  }

  async get(uid: string): Promise<T> {
    const t = await this.handler.findUnique({
      where: { uid: uid }
    });
    if (!t) 
      raiseError.NotFound(`${this.title}: item ${uid} not found`);

    // verify validity of data against merkle map
    let provable = this.provable.get(t as T);

    return t as T;
  }

  async insert(uid: string, entity: T): Promise<any> {
    return {};
  }

  async update(uid: string, entity: T): Promise<any> {
    return {};
  }

  async remove(uid: string): Promise<any> {
    return {};
  }
}

/**
 * Usage
 */
import { prisma } from "../global.js";
import { Community } from "@prisma/client";
import { CommunitySchema, CommunityPartialSchema } from "../../prisma/generated/zod/index.js";
import { ProvableCommunity } from "@socialcap/contracts";

let communities: Collection = new Collection<Community>({
  name: "communities",
  title: "Communities Collection",
  prismaHandler: prisma.community,
  schemaHandler: CommunityPartialSchema,
  provableHandler: ProvableCommunity
})

let community = await communities.get("");
await communities.add("", {});
await communities.update("", {})
