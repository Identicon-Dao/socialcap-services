
export const enum TransactionType {
  MERKLE_COMMIT,
  ACCOUNT_CREATION,
  VOTING_COMMIT
}

export interface SequencerParams {
  type: TransactionType;
  aggregator: any;
  dispatcher: any;
  data?: any;
  options?: {
    autoremove?: false
  }
}

const enum SequencerState {
  INITIAL,
  BUSY,
  CAN_AGGREGATE,
  CAN_DISPATCH,
  CAN_REMOVE,
  FAILED,
  DONE
}

class Sequencer {
  queue: any;
  aggregator: any;
  dispatcher: any;
  data: any;
  options: any;
  state = SequencerState.INITIAL;

  constructor(key: string, params: SequencerParams) {
    this.queue = new NatsQueue(key);
  }

  isBusy(): boolean {
    return true;
  }

  isNotEmpty(): boolean {
    return true;
  }

  canAggregate(): boolean {
    return true;
  }

  canDispatch(): boolean {
    return true;
  }

  canRemove(): boolean {
    return (this.options?.autoremove && this.state === SequencerState.CAN_REMOVE)
  }

  hasFailed(): boolean {
    return true;
  }
 
  push(txData: any) {
    this.queue.push(txData);
  }

  aggregate() {
    return ;
  }

  dispatch() {
    return ;
  }

  run() {
    if (this.isBusy())
      return;

    if (this.isNotEmpty() && this.canAggregate())
      this.aggregate();

    if (this.canDispatch()) 
      this.dispatch()
  }
}


class SequencersCollection {
  sequencers = new Map();
  RUN_INTERVAL = 5000; // run every X milisecs

  add(key: string, params: SequencerParams) {
    this.sequencers.set(key, new Sequencer(key, params));
    return;
  }

  get(key: string): Sequencer | null {
    return this.sequencers.has(key) 
      ? this.sequencers.get(key) 
      : null;
  }

  autoremove() {
    this.sequencers.forEach((instance, key) => {
      if (instance.canRemove()) {
        this.sequencers.delete(key)
      }
    })
  }

  run() {
    setTimeout(() => {
      this.sequencers.forEach((instance) => {
        instance.run();
      })
      this.autoremove();
    }, this.RUN_INTERVAL);
  }
}

export const Sequencers = new SequencersCollection();



/*

// Collections

Sequencers.add("persons", {
  type: TransactionType.MERKLE_COMMIT,
  merger: new MerkleMapUpdatesMerger(),
  dispatcher: new MerkleMapCommiter()
})

// ZKApp account creation

Sequencers.add("claim-voting", {
  type: TransactionType.ACCOUNT_CREATION,
  merger: new SingleMerger(), // one at a time
  dispatcher: new VotingAccountCreator()
})

// Recursive voting counter

Sequencers.add("claim-1234", {
  type: TransactionType.VOTING_COMMIT,
  merger: new RecursiveVotesCounter(),
  dispatcher: new VotingFinalResultSettlement(),
  options: { 
    autoremove: true // removes this sequencer once dispatcher is done
  }
})


Sequencers.run();


Sequencers.get("persons").push(SignedData);

Sequencers.get("claim-{uid}").push(SignedData);
*/